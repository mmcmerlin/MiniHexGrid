
mini-hexgrid-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e758  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800e9a8  0800e9a8  0000f9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaf4  0800eaf4  00010014  2**0
                  CONTENTS
  4 .ARM          00000008  0800eaf4  0800eaf4  0000faf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eafc  0800eafc  00010014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eafc  0800eafc  0000fafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb00  0800eb00  0000fb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800eb04  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038d8  20000014  0800eb18  00010014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038ec  0800eb18  000108ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029428  00000000  00000000  0001004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e60  00000000  00000000  00039472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002280  00000000  00000000  0003e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ad0  00000000  00000000  00040558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032cef  00000000  00000000  00042028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ab9f  00000000  00000000  00074d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141908  00000000  00000000  0009f8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e11be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092d0  00000000  00000000  001e1204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001ea4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000014 	.word	0x20000014
 800026c:	00000000 	.word	0x00000000
 8000270:	0800e990 	.word	0x0800e990

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000018 	.word	0x20000018
 800028c:	0800e990 	.word	0x0800e990

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <MX_FREERTOS_Init+0x58>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4814      	ldr	r0, [pc, #80]	@ (8000604 <MX_FREERTOS_Init+0x5c>)
 80005b2:	f00c f913 	bl	800c7dc <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_FREERTOS_Init+0x60>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of NeoPixelTask */
  NeoPixelTaskHandle = osThreadNew(StartNeoPixelTask, NULL, &NeoPixelTask_attributes);
 80005bc:	4a13      	ldr	r2, [pc, #76]	@ (800060c <MX_FREERTOS_Init+0x64>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4813      	ldr	r0, [pc, #76]	@ (8000610 <MX_FREERTOS_Init+0x68>)
 80005c2:	f00c f90b 	bl	800c7dc <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a12      	ldr	r2, [pc, #72]	@ (8000614 <MX_FREERTOS_Init+0x6c>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &EncoderTask_attributes);
 80005cc:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <MX_FREERTOS_Init+0x70>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4812      	ldr	r0, [pc, #72]	@ (800061c <MX_FREERTOS_Init+0x74>)
 80005d2:	f00c f903 	bl	800c7dc <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a11      	ldr	r2, [pc, #68]	@ (8000620 <MX_FREERTOS_Init+0x78>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 80005dc:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <MX_FREERTOS_Init+0x7c>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4811      	ldr	r0, [pc, #68]	@ (8000628 <MX_FREERTOS_Init+0x80>)
 80005e2:	f00c f8fb 	bl	800c7dc <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a10      	ldr	r2, [pc, #64]	@ (800062c <MX_FREERTOS_Init+0x84>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(StartServoTask, NULL, &ServoTask_attributes);
 80005ec:	4a10      	ldr	r2, [pc, #64]	@ (8000630 <MX_FREERTOS_Init+0x88>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4810      	ldr	r0, [pc, #64]	@ (8000634 <MX_FREERTOS_Init+0x8c>)
 80005f2:	f00c f8f3 	bl	800c7dc <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <MX_FREERTOS_Init+0x90>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800ea00 	.word	0x0800ea00
 8000604:	0800063d 	.word	0x0800063d
 8000608:	20000030 	.word	0x20000030
 800060c:	0800ea24 	.word	0x0800ea24
 8000610:	0800064d 	.word	0x0800064d
 8000614:	20000034 	.word	0x20000034
 8000618:	0800ea48 	.word	0x0800ea48
 800061c:	08000669 	.word	0x08000669
 8000620:	20000038 	.word	0x20000038
 8000624:	0800ea6c 	.word	0x0800ea6c
 8000628:	08000679 	.word	0x08000679
 800062c:	2000003c 	.word	0x2000003c
 8000630:	0800ea90 	.word	0x0800ea90
 8000634:	080006a9 	.word	0x080006a9
 8000638:	20000040 	.word	0x20000040

0800063c <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f00c f95a 	bl	800c8fe <osDelay>
 800064a:	e7fb      	b.n	8000644 <StartUARTTask+0x8>

0800064c <StartNeoPixelTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNeoPixelTask */
void StartNeoPixelTask(void *argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NeoPixelTask */
  uint8_t counter = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	counter++;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3301      	adds	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
    osDelay(30);
 800065e:	201e      	movs	r0, #30
 8000660:	f00c f94d 	bl	800c8fe <osDelay>
	counter++;
 8000664:	bf00      	nop
 8000666:	e7f7      	b.n	8000658 <StartNeoPixelTask+0xc>

08000668 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f00c f944 	bl	800c8fe <osDelay>
 8000676:	e7fb      	b.n	8000670 <StartEncoderTask+0x8>

08000678 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayTask */
  /* Infinite loop */
  for(;;)
  {
	ssd1306_Fill(White);
 8000680:	2001      	movs	r0, #1
 8000682:	f001 fbbd 	bl	8001e00 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000686:	f001 fbd3 	bl	8001e30 <ssd1306_UpdateScreen>
    osDelay(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068e:	f00c f936 	bl	800c8fe <osDelay>
	ssd1306_Fill(Black);
 8000692:	2000      	movs	r0, #0
 8000694:	f001 fbb4 	bl	8001e00 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000698:	f001 fbca 	bl	8001e30 <ssd1306_UpdateScreen>
    osDelay(1000);
 800069c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a0:	f00c f92d 	bl	800c8fe <osDelay>
	ssd1306_Fill(White);
 80006a4:	bf00      	nop
 80006a6:	e7eb      	b.n	8000680 <StartDisplayTask+0x8>

080006a8 <StartServoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoTask */
void StartServoTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoTask */
  /* Infinite loop */
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 250);   // Move to 0°
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <StartServoTask+0x40>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	22fa      	movs	r2, #250	@ 0xfa
 80006b6:	641a      	str	r2, [r3, #64]	@ 0x40
	osDelay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006bc:	f00c f91f 	bl	800c8fe <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 750);// Move to 90°
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <StartServoTask+0x40>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80006c8:	641a      	str	r2, [r3, #64]	@ 0x40
	osDelay(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ce:	f00c f916 	bl	800c8fe <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 1250); // Move to 180°
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <StartServoTask+0x40>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80006da:	641a      	str	r2, [r3, #64]	@ 0x40
	osDelay(1000);
 80006dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e0:	f00c f90d 	bl	800c8fe <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, 250);   // Move to 0°
 80006e4:	bf00      	nop
 80006e6:	e7e3      	b.n	80006b0 <StartServoTask+0x8>
 80006e8:	200000e4 	.word	0x200000e4

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f001 fbf8 	bl	8001ee4 <HAL_Init>

  /* USER CODE BEGIN Init */
  ssd1306_Init();
 80006f4:	f001 fb1a 	bl	8001d2c <ssd1306_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f820 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fb7c 	bl	8000df8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000700:	f000 f894 	bl	800082c <MX_GPDMA1_Init>
  MX_GPDMA2_Init();
 8000704:	f000 f8da 	bl	80008bc <MX_GPDMA2_Init>
  MX_I2C2_Init();
 8000708:	f000 f8f8 	bl	80008fc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800070c:	f000 fa5e 	bl	8000bcc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000710:	f000 faa8 	bl	8000c64 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000714:	f000 faf2 	bl	8000cfc <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000718:	f000 fb3c 	bl	8000d94 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800071c:	f000 f942 	bl	80009a4 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000720:	f000 fa2e 	bl	8000b80 <MX_TIM17_Init>
  MX_ICACHE_Init();
 8000724:	f000 f92a 	bl	800097c <MX_ICACHE_Init>
  MX_TIM4_Init();
 8000728:	f000 f9b2 	bl	8000a90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800072c:	f00c f806 	bl	800c73c <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 8000730:	f7ff ff3a 	bl	80005a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000734:	f00c f828 	bl	800c788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <main+0x4c>

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	@ 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2250      	movs	r2, #80	@ 0x50
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f00e f8e5 	bl	800e91a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000762:	4b30      	ldr	r3, [pc, #192]	@ (8000824 <SystemClock_Config+0xe8>)
 8000764:	691b      	ldr	r3, [r3, #16]
 8000766:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800076a:	4a2e      	ldr	r2, [pc, #184]	@ (8000824 <SystemClock_Config+0xe8>)
 800076c:	f043 0320 	orr.w	r3, r3, #32
 8000770:	6113      	str	r3, [r2, #16]
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <SystemClock_Config+0xe8>)
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077e:	bf00      	nop
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <SystemClock_Config+0xe8>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f003 0308 	and.w	r3, r3, #8
 8000788:	2b08      	cmp	r3, #8
 800078a:	d1f9      	bne.n	8000780 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 800078c:	2330      	movs	r3, #48	@ 0x30
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800079c:	2320      	movs	r3, #32
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80007ac:	2350      	movs	r3, #80	@ 0x50
 80007ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80007bc:	2308      	movs	r3, #8
 80007be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fa8b 	bl	8003ce8 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007d8:	f000 fb6c 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	231f      	movs	r3, #31
 80007de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2303      	movs	r3, #3
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2104      	movs	r1, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 feac 	bl	8004558 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000806:	f000 fb55 	bl	8000eb4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <SystemClock_Config+0xec>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <SystemClock_Config+0xec>)
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	6013      	str	r3, [r2, #0]
}
 800081a:	bf00      	nop
 800081c:	3770      	adds	r7, #112	@ 0x70
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	44020800 	.word	0x44020800
 8000828:	40022000 	.word	0x40022000

0800082c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000832:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <MX_GPDMA1_Init+0x8c>)
 8000834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000838:	4a1f      	ldr	r2, [pc, #124]	@ (80008b8 <MX_GPDMA1_Init+0x8c>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000842:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_GPDMA1_Init+0x8c>)
 8000844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2105      	movs	r1, #5
 8000854:	201b      	movs	r0, #27
 8000856:	f001 fc69 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800085a:	201b      	movs	r0, #27
 800085c:	f001 fc80 	bl	8002160 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2105      	movs	r1, #5
 8000864:	201c      	movs	r0, #28
 8000866:	f001 fc61 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800086a:	201c      	movs	r0, #28
 800086c:	f001 fc78 	bl	8002160 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 5, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2105      	movs	r1, #5
 8000874:	201d      	movs	r0, #29
 8000876:	f001 fc59 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800087a:	201d      	movs	r0, #29
 800087c:	f001 fc70 	bl	8002160 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 5, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2105      	movs	r1, #5
 8000884:	201e      	movs	r0, #30
 8000886:	f001 fc51 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 800088a:	201e      	movs	r0, #30
 800088c:	f001 fc68 	bl	8002160 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 5, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2105      	movs	r1, #5
 8000894:	201f      	movs	r0, #31
 8000896:	f001 fc49 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 800089a:	201f      	movs	r0, #31
 800089c:	f001 fc60 	bl	8002160 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 5, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2105      	movs	r1, #5
 80008a4:	2020      	movs	r0, #32
 80008a6:	f001 fc41 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 80008aa:	2020      	movs	r0, #32
 80008ac:	f001 fc58 	bl	8002160 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	44020c00 	.word	0x44020c00

080008bc <MX_GPDMA2_Init>:
  * @brief GPDMA2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Init 0 */

  /* USER CODE END GPDMA2_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA2_CLK_ENABLE();
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <MX_GPDMA2_Init+0x3c>)
 80008c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c8:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <MX_GPDMA2_Init+0x3c>)
 80008ca:	f043 0302 	orr.w	r3, r3, #2
 80008ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_GPDMA2_Init+0x3c>)
 80008d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d8:	f003 0302 	and.w	r3, r3, #2
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /* GPDMA2 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA2_Channel0_IRQn, 5, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2105      	movs	r1, #5
 80008e4:	205a      	movs	r0, #90	@ 0x5a
 80008e6:	f001 fc21 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel0_IRQn);
 80008ea:	205a      	movs	r0, #90	@ 0x5a
 80008ec:	f001 fc38 	bl	8002160 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA2_Init 1 */
  /* USER CODE BEGIN GPDMA2_Init 2 */

  /* USER CODE END GPDMA2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	44020c00 	.word	0x44020c00

080008fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	@ (8000974 <MX_I2C2_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <MX_I2C2_Init+0x7c>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800090c:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000914:	2201      	movs	r2, #1
 8000916:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_I2C2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000938:	f002 fbbc 	bl	80030b4 <HAL_I2C_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000942:	f000 fab7 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <MX_I2C2_Init+0x74>)
 800094a:	f002 ffd1 	bl	80038f0 <HAL_I2CEx_ConfigAnalogFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000954:	f000 faae 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_I2C2_Init+0x74>)
 800095c:	f003 f813 	bl	8003986 <HAL_I2CEx_ConfigDigitalFilter>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 faa5 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000044 	.word	0x20000044
 8000974:	40005800 	.word	0x40005800
 8000978:	30909dec 	.word	0x30909dec

0800097c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000980:	2000      	movs	r0, #0
 8000982:	f003 f84d 	bl	8003a20 <HAL_ICACHE_ConfigAssociativityMode>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800098c:	f000 fa92 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000990:	f003 f866 	bl	8003a60 <HAL_ICACHE_Enable>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800099a:	f000 fa8b 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80009de:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80009ea:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009ec:	2263      	movs	r2, #99	@ 0x63
 80009ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fc:	4823      	ldr	r0, [pc, #140]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009fe:	f009 f905 	bl	8009c0c <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a08:	f000 fa54 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481c      	ldr	r0, [pc, #112]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a1a:	f009 fcc1 	bl	800a3a0 <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a24:	f000 fa46 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a28:	4818      	ldr	r0, [pc, #96]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a2a:	f009 f9f5 	bl	8009e18 <HAL_TIM_PWM_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a34:	f000 fa3e 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4811      	ldr	r0, [pc, #68]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a48:	f00a fb8c 	bl	800b164 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a52:	f000 fa2f 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a56:	2360      	movs	r3, #96	@ 0x60
 8000a58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4807      	ldr	r0, [pc, #28]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a6e:	f009 fb83 	bl	800a178 <HAL_TIM_PWM_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a78:	f000 fa1c 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a7e:	f000 fb5b 	bl	8001138 <HAL_TIM_MspPostInit>

}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	@ 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000098 	.word	0x20000098

08000a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b7c <MX_TIM4_Init+0xec>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000aca:	229f      	movs	r2, #159	@ 0x9f
 8000acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000ad6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ada:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ae8:	4823      	ldr	r0, [pc, #140]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000aea:	f009 f88f 	bl	8009c0c <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000af4:	f000 f9de 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b02:	4619      	mov	r1, r3
 8000b04:	481c      	ldr	r0, [pc, #112]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000b06:	f009 fc4b 	bl	800a3a0 <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000b10:	f000 f9d0 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b14:	4818      	ldr	r0, [pc, #96]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000b16:	f009 f97f 	bl	8009e18 <HAL_TIM_PWM_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b20:	f000 f9c8 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4811      	ldr	r0, [pc, #68]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000b34:	f00a fb16 	bl	800b164 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b3e:	f000 f9b9 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b42:	2360      	movs	r3, #96	@ 0x60
 8000b44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	220c      	movs	r2, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000b5a:	f009 fb0d 	bl	800a178 <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b64:	f000 f9a6 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <MX_TIM4_Init+0xe8>)
 8000b6a:	f000 fae5 	bl	8001138 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3738      	adds	r7, #56	@ 0x38
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000e4 	.word	0x200000e4
 8000b7c:	40000800 	.word	0x40000800

08000b80 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <MX_TIM17_Init+0x48>)
 8000b88:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b9c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_TIM17_Init+0x44>)
 8000bb2:	f009 f82b 	bl	8009c0c <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000bbc:	f000 f97a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000130 	.word	0x20000130
 8000bc8:	40014800 	.word	0x40014800

08000bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_USART1_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c16:	f00a fbbb 	bl	800b390 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f948 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c28:	f00b fbb1 	bl	800c38e <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f93f 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c3a:	f00b fbe6 	bl	800c40a <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f936 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c4a:	f00b fb67 	bl	800c31c <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f92e 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001f4 	.word	0x200001f4
 8000c60:	40013800 	.word	0x40013800

08000c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c68:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c6a:	4a23      	ldr	r2, [pc, #140]	@ (8000cf8 <MX_USART2_UART_Init+0x94>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cac:	4811      	ldr	r0, [pc, #68]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000cae:	f00a fb6f 	bl	800b390 <HAL_UART_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cb8:	f000 f8fc 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000cc0:	f00b fb65 	bl	800c38e <HAL_UARTEx_SetTxFifoThreshold>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cca:	f000 f8f3 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000cd2:	f00b fb9a 	bl	800c40a <HAL_UARTEx_SetRxFifoThreshold>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cdc:	f000 f8ea 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_USART2_UART_Init+0x90>)
 8000ce2:	f00b fb1b 	bl	800c31c <HAL_UARTEx_DisableFifoMode>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f000 f8e2 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000288 	.word	0x20000288
 8000cf8:	40004400 	.word	0x40004400

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d02:	4a23      	ldr	r2, [pc, #140]	@ (8000d90 <MX_USART3_UART_Init+0x94>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d44:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d46:	f00a fb23 	bl	800b390 <HAL_UART_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f8b0 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d58:	f00b fb19 	bl	800c38e <HAL_UARTEx_SetTxFifoThreshold>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d62:	f000 f8a7 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f00b fb4e 	bl	800c40a <HAL_UARTEx_SetRxFifoThreshold>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f000 f89e 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d7a:	f00b facf 	bl	800c31c <HAL_UARTEx_DisableFifoMode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f896 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000031c 	.word	0x2000031c
 8000d90:	40004800 	.word	0x40004800

08000d94 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000d98:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000d9a:	4a16      	ldr	r2, [pc, #88]	@ (8000df4 <MX_USB_PCD_Init+0x60>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000da0:	2208      	movs	r2, #8
 8000da2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000da6:	2202      	movs	r2, #2
 8000da8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_USB_PCD_Init+0x5c>)
 8000ddc:	f002 fe50 	bl	8003a80 <HAL_PCD_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000de6:	f000 f865 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000680 	.word	0x20000680
 8000df4:	40016000 	.word	0x40016000

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e14:	4a1c      	ldr	r2, [pc, #112]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e32:	4a15      	ldr	r2, [pc, #84]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_GPIO_Init+0x90>)
 8000e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_GPIO_Init+0x94>)
 8000e7c:	f001 ffc8 	bl	8002e10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	44020c00 	.word	0x44020c00
 8000e8c:	42020000 	.word	0x42020000

08000e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea2:	f001 f847 	bl	8001f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40012c00 	.word	0x40012c00

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <Error_Handler+0x8>

08000ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f06f 0001 	mvn.w	r0, #1
 8000ecc:	f001 f92e 	bl	800212c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0cc      	sub	sp, #304	@ 0x130
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ede:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ee2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ef8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000efc:	4618      	mov	r0, r3
 8000efe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000f02:	461a      	mov	r2, r3
 8000f04:	2100      	movs	r1, #0
 8000f06:	f00d fd08 	bl	800e91a <memset>
  if(hi2c->Instance==I2C2)
 8000f0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a33      	ldr	r2, [pc, #204]	@ (8000fe4 <HAL_I2C_MspInit+0x110>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d15e      	bne.n	8000fda <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f20:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000f24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f34:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 fe82 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000f4e:	f7ff ffb1 	bl	8000eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <HAL_I2C_MspInit+0x114>)
 8000f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f58:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <HAL_I2C_MspInit+0x114>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <HAL_I2C_MspInit+0x114>)
 8000f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f68:	f003 0202 	and.w	r2, r3, #2
 8000f6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f7e:	681b      	ldr	r3, [r3, #0]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4811      	ldr	r0, [pc, #68]	@ (8000fec <HAL_I2C_MspInit+0x118>)
 8000fa8:	f001 ff32 	bl	8002e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_I2C_MspInit+0x114>)
 8000fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <HAL_I2C_MspInit+0x114>)
 8000fb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_I2C_MspInit+0x114>)
 8000fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fc2:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000fc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fd4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000fd8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000fda:	bf00      	nop
 8000fdc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40005800 	.word	0x40005800
 8000fe8:	44020c00 	.word	0x44020c00
 8000fec:	42020400 	.word	0x42020400

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001000:	d15a      	bne.n	80010b8 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	4b48      	ldr	r3, [pc, #288]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 8001004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001008:	4a46      	ldr	r2, [pc, #280]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 8001014:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* GPDMA2_REQUEST_TIM2_CH1 Init */
    handle_GPDMA2_Channel0.Instance = GPDMA2_Channel0;
 8001020:	4b41      	ldr	r3, [pc, #260]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001022:	4a42      	ldr	r2, [pc, #264]	@ (800112c <HAL_TIM_Base_MspInit+0x13c>)
 8001024:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel0.Init.Request = GPDMA2_REQUEST_TIM2_CH1;
 8001026:	4b40      	ldr	r3, [pc, #256]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001028:	2248      	movs	r2, #72	@ 0x48
 800102a:	605a      	str	r2, [r3, #4]
    handle_GPDMA2_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800102c:	4b3e      	ldr	r3, [pc, #248]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
    handle_GPDMA2_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001032:	4b3d      	ldr	r3, [pc, #244]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001034:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001038:	60da      	str	r2, [r3, #12]
    handle_GPDMA2_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 800103a:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 800103c:	2208      	movs	r2, #8
 800103e:	611a      	str	r2, [r3, #16]
    handle_GPDMA2_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8001040:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
    handle_GPDMA2_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001046:	4b38      	ldr	r3, [pc, #224]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
    handle_GPDMA2_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 800104e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001052:	61da      	str	r2, [r3, #28]
    handle_GPDMA2_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
    handle_GPDMA2_Channel0.Init.SrcBurstLength = 1;
 800105a:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 800105c:	2201      	movs	r2, #1
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA2_Channel0.Init.DestBurstLength = 1;
 8001060:	4b31      	ldr	r3, [pc, #196]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001062:	2201      	movs	r2, #1
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA2_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001066:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA2_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800106c:	4b2e      	ldr	r3, [pc, #184]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 800106e:	2200      	movs	r2, #0
 8001070:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA2_Channel0.Init.Mode = DMA_NORMAL;
 8001072:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA2_Channel0) != HAL_OK)
 8001078:	482b      	ldr	r0, [pc, #172]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 800107a:	f001 f8d7 	bl	800222c <HAL_DMA_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_TIM_Base_MspInit+0x98>
    {
      Error_Handler();
 8001084:	f7ff ff16 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], handle_GPDMA2_Channel0);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
 800108e:	4a26      	ldr	r2, [pc, #152]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001094:	2110      	movs	r1, #16
 8001096:	4824      	ldr	r0, [pc, #144]	@ (8001128 <HAL_TIM_Base_MspInit+0x138>)
 8001098:	f001 fbfa 	bl	8002890 <HAL_DMA_ConfigChannelAttributes>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_TIM_Base_MspInit+0xb6>
    {
      Error_Handler();
 80010a2:	f7ff ff07 	bl	8000eb4 <Error_Handler>
    }

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2105      	movs	r1, #5
 80010aa:	202d      	movs	r0, #45	@ 0x2d
 80010ac:	f001 f83e 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b0:	202d      	movs	r0, #45	@ 0x2d
 80010b2:	f001 f855 	bl	8002160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010b6:	e030      	b.n	800111a <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM4)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <HAL_TIM_Base_MspInit+0x140>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d117      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 80010c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010c8:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010d2:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 80010d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2105      	movs	r1, #5
 80010e4:	202f      	movs	r0, #47	@ 0x2f
 80010e6:	f001 f821 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010ea:	202f      	movs	r0, #47	@ 0x2f
 80010ec:	f001 f838 	bl	8002160 <HAL_NVIC_EnableIRQ>
}
 80010f0:	e013      	b.n	800111a <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM17)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <HAL_TIM_Base_MspInit+0x144>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d10e      	bne.n	800111a <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 80010fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001102:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001108:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_TIM_Base_MspInit+0x134>)
 800110e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	44020c00 	.word	0x44020c00
 8001128:	2000017c 	.word	0x2000017c
 800112c:	40021050 	.word	0x40021050
 8001130:	40000800 	.word	0x40000800
 8001134:	40014800 	.word	0x40014800

08001138 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001158:	d120      	bne.n	800119c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <HAL_TIM_MspPostInit+0xb4>)
 800115c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001160:	4a22      	ldr	r2, [pc, #136]	@ (80011ec <HAL_TIM_MspPostInit+0xb4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800116a:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <HAL_TIM_MspPostInit+0xb4>)
 800116c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = NEOPIXEL_Pin;
 8001178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800118a:	2301      	movs	r3, #1
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(NEOPIXEL_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <HAL_TIM_MspPostInit+0xb8>)
 8001196:	f001 fe3b 	bl	8002e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800119a:	e023      	b.n	80011e4 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM4)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <HAL_TIM_MspPostInit+0xbc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d11e      	bne.n	80011e4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_TIM_MspPostInit+0xb4>)
 80011a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ac:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_TIM_MspPostInit+0xb4>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_TIM_MspPostInit+0xb4>)
 80011b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c4:	2304      	movs	r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011d4:	2302      	movs	r3, #2
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <HAL_TIM_MspPostInit+0xc0>)
 80011e0:	f001 fe16 	bl	8002e10 <HAL_GPIO_Init>
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	@ 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	44020c00 	.word	0x44020c00
 80011f0:	42020000 	.word	0x42020000
 80011f4:	40000800 	.word	0x40000800
 80011f8:	42020800 	.word	0x42020800

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0d0      	sub	sp, #320	@ 0x140
 8001200:	af00      	add	r7, sp, #0
 8001202:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001206:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800120a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001220:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001224:	4618      	mov	r0, r3
 8001226:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800122a:	461a      	mov	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f00d fb74 	bl	800e91a <memset>
  if(huart->Instance==USART1)
 8001232:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001236:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7f      	ldr	r2, [pc, #508]	@ (800143c <HAL_UART_MspInit+0x240>)
 8001240:	4293      	cmp	r3, r2
 8001242:	f040 8109 	bne.w	8001458 <HAL_UART_MspInit+0x25c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001246:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800124a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800124e:	f04f 0201 	mov.w	r2, #1
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800125a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800125e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001262:	2200      	movs	r2, #0
 8001264:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fcee 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001276:	f7ff fe1d 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127a:	4b71      	ldr	r3, [pc, #452]	@ (8001440 <HAL_UART_MspInit+0x244>)
 800127c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001280:	4a6f      	ldr	r2, [pc, #444]	@ (8001440 <HAL_UART_MspInit+0x244>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001286:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800128a:	4b6d      	ldr	r3, [pc, #436]	@ (8001440 <HAL_UART_MspInit+0x244>)
 800128c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001290:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001294:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001298:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012a2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012a6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b65      	ldr	r3, [pc, #404]	@ (8001440 <HAL_UART_MspInit+0x244>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ae:	4a64      	ldr	r2, [pc, #400]	@ (8001440 <HAL_UART_MspInit+0x244>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b8:	4b61      	ldr	r3, [pc, #388]	@ (8001440 <HAL_UART_MspInit+0x244>)
 80012ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012be:	f003 0201 	and.w	r2, r3, #1
 80012c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012d4:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f0:	2307      	movs	r3, #7
 80012f2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80012fa:	4619      	mov	r1, r3
 80012fc:	4851      	ldr	r0, [pc, #324]	@ (8001444 <HAL_UART_MspInit+0x248>)
 80012fe:	f001 fd87 	bl	8002e10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001302:	4b51      	ldr	r3, [pc, #324]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001304:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_UART_MspInit+0x250>)
 8001306:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8001308:	4b4f      	ldr	r3, [pc, #316]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 800130a:	2215      	movs	r2, #21
 800130c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800130e:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001314:	4b4c      	ldr	r3, [pc, #304]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 800131a:	4b4b      	ldr	r3, [pc, #300]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8001320:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001326:	4b48      	ldr	r3, [pc, #288]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800132c:	4b46      	ldr	r3, [pc, #280]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001332:	4b45      	ldr	r3, [pc, #276]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001338:	4b43      	ldr	r3, [pc, #268]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 800133a:	2201      	movs	r2, #1
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 800133e:	4b42      	ldr	r3, [pc, #264]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001340:	2201      	movs	r2, #1
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001344:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800134a:	4b3f      	ldr	r3, [pc, #252]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8001350:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001352:	2200      	movs	r2, #0
 8001354:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001356:	483c      	ldr	r0, [pc, #240]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001358:	f000 ff68 	bl	800222c <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001362:	f7ff fda7 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel1);
 8001366:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800136a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a35      	ldr	r2, [pc, #212]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001376:	4a34      	ldr	r2, [pc, #208]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001378:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800137c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001384:	2110      	movs	r1, #16
 8001386:	4830      	ldr	r0, [pc, #192]	@ (8001448 <HAL_UART_MspInit+0x24c>)
 8001388:	f001 fa82 	bl	8002890 <HAL_DMA_ConfigChannelAttributes>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 8001392:	f7ff fd8f 	bl	8000eb4 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001396:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_UART_MspInit+0x254>)
 8001398:	4a2e      	ldr	r2, [pc, #184]	@ (8001454 <HAL_UART_MspInit+0x258>)
 800139a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 800139c:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <HAL_UART_MspInit+0x254>)
 800139e:	2216      	movs	r2, #22
 80013a0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a8:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80013ae:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80013b4:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80013ba:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80013c0:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80013c6:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013da:	2200      	movs	r2, #0
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80013ea:	4819      	ldr	r0, [pc, #100]	@ (8001450 <HAL_UART_MspInit+0x254>)
 80013ec:	f000 ff1e 	bl	800222c <HAL_DMA_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_UART_MspInit+0x1fe>
    {
      Error_Handler();
 80013f6:	f7ff fd5d 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 80013fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <HAL_UART_MspInit+0x254>)
 8001406:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001408:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <HAL_UART_MspInit+0x254>)
 800140a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800140e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001416:	2110      	movs	r1, #16
 8001418:	480d      	ldr	r0, [pc, #52]	@ (8001450 <HAL_UART_MspInit+0x254>)
 800141a:	f001 fa39 	bl	8002890 <HAL_DMA_ConfigChannelAttributes>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_UART_MspInit+0x22c>
    {
      Error_Handler();
 8001424:	f7ff fd46 	bl	8000eb4 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2105      	movs	r1, #5
 800142c:	203a      	movs	r0, #58	@ 0x3a
 800142e:	f000 fe7d 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001432:	203a      	movs	r0, #58	@ 0x3a
 8001434:	f000 fe94 	bl	8002160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001438:	e223      	b.n	8001882 <HAL_UART_MspInit+0x686>
 800143a:	bf00      	nop
 800143c:	40013800 	.word	0x40013800
 8001440:	44020c00 	.word	0x44020c00
 8001444:	42020000 	.word	0x42020000
 8001448:	200003b0 	.word	0x200003b0
 800144c:	400200d0 	.word	0x400200d0
 8001450:	20000428 	.word	0x20000428
 8001454:	40020050 	.word	0x40020050
  else if(huart->Instance==USART2)
 8001458:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800145c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a7e      	ldr	r2, [pc, #504]	@ (8001660 <HAL_UART_MspInit+0x464>)
 8001466:	4293      	cmp	r3, r2
 8001468:	f040 8108 	bne.w	800167c <HAL_UART_MspInit+0x480>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800146c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001470:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001474:	f04f 0202 	mov.w	r2, #2
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001480:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001484:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001488:	2200      	movs	r2, #0
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fbdb 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 800149c:	f7ff fd0a 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a0:	4b70      	ldr	r3, [pc, #448]	@ (8001664 <HAL_UART_MspInit+0x468>)
 80014a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001664 <HAL_UART_MspInit+0x468>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001664 <HAL_UART_MspInit+0x468>)
 80014b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014b6:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80014ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014cc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b65      	ldr	r3, [pc, #404]	@ (8001664 <HAL_UART_MspInit+0x468>)
 80014d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d4:	4a63      	ldr	r2, [pc, #396]	@ (8001664 <HAL_UART_MspInit+0x468>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014de:	4b61      	ldr	r3, [pc, #388]	@ (8001664 <HAL_UART_MspInit+0x468>)
 80014e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e4:	f003 0201 	and.w	r2, r3, #1
 80014e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014ec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014fa:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fc:	230c      	movs	r3, #12
 80014fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800151e:	4619      	mov	r1, r3
 8001520:	4851      	ldr	r0, [pc, #324]	@ (8001668 <HAL_UART_MspInit+0x46c>)
 8001522:	f001 fc75 	bl	8002e10 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001526:	4b51      	ldr	r3, [pc, #324]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001528:	4a51      	ldr	r2, [pc, #324]	@ (8001670 <HAL_UART_MspInit+0x474>)
 800152a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_USART2_RX;
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <HAL_UART_MspInit+0x470>)
 800152e:	2217      	movs	r2, #23
 8001530:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001532:	4b4e      	ldr	r3, [pc, #312]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001538:	4b4c      	ldr	r3, [pc, #304]	@ (800166c <HAL_UART_MspInit+0x470>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_FIXED;
 800153e:	4b4b      	ldr	r3, [pc, #300]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001544:	4b49      	ldr	r3, [pc, #292]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800154a:	4b48      	ldr	r3, [pc, #288]	@ (800166c <HAL_UART_MspInit+0x470>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001550:	4b46      	ldr	r3, [pc, #280]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001556:	4b45      	ldr	r3, [pc, #276]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800155c:	4b43      	ldr	r3, [pc, #268]	@ (800166c <HAL_UART_MspInit+0x470>)
 800155e:	2201      	movs	r2, #1
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001562:	4b42      	ldr	r3, [pc, #264]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001564:	2201      	movs	r2, #1
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001568:	4b40      	ldr	r3, [pc, #256]	@ (800166c <HAL_UART_MspInit+0x470>)
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800156e:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001574:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001576:	2200      	movs	r2, #0
 8001578:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 800157a:	483c      	ldr	r0, [pc, #240]	@ (800166c <HAL_UART_MspInit+0x470>)
 800157c:	f000 fe56 	bl	800222c <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0x38e>
      Error_Handler();
 8001586:	f7ff fc95 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel3);
 800158a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800158e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a35      	ldr	r2, [pc, #212]	@ (800166c <HAL_UART_MspInit+0x470>)
 8001596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800159a:	4a34      	ldr	r2, [pc, #208]	@ (800166c <HAL_UART_MspInit+0x470>)
 800159c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80015a8:	2110      	movs	r1, #16
 80015aa:	4830      	ldr	r0, [pc, #192]	@ (800166c <HAL_UART_MspInit+0x470>)
 80015ac:	f001 f970 	bl	8002890 <HAL_DMA_ConfigChannelAttributes>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_UART_MspInit+0x3be>
      Error_Handler();
 80015b6:	f7ff fc7d 	bl	8000eb4 <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80015ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001678 <HAL_UART_MspInit+0x47c>)
 80015be:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_TX;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015c2:	2218      	movs	r2, #24
 80015c4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 80015d2:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_FIXED;
 80015d8:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80015de:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80015ea:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80015f0:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80015f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <HAL_UART_MspInit+0x478>)
 80015fe:	2200      	movs	r2, #0
 8001600:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <HAL_UART_MspInit+0x478>)
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <HAL_UART_MspInit+0x478>)
 800160a:	2200      	movs	r2, #0
 800160c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800160e:	4819      	ldr	r0, [pc, #100]	@ (8001674 <HAL_UART_MspInit+0x478>)
 8001610:	f000 fe0c 	bl	800222c <HAL_DMA_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_UART_MspInit+0x422>
      Error_Handler();
 800161a:	f7ff fc4b 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel2);
 800161e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001622:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <HAL_UART_MspInit+0x478>)
 800162a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800162c:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <HAL_UART_MspInit+0x478>)
 800162e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001632:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800163a:	2110      	movs	r1, #16
 800163c:	480d      	ldr	r0, [pc, #52]	@ (8001674 <HAL_UART_MspInit+0x478>)
 800163e:	f001 f927 	bl	8002890 <HAL_DMA_ConfigChannelAttributes>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_MspInit+0x450>
      Error_Handler();
 8001648:	f7ff fc34 	bl	8000eb4 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2105      	movs	r1, #5
 8001650:	203b      	movs	r0, #59	@ 0x3b
 8001652:	f000 fd6b 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001656:	203b      	movs	r0, #59	@ 0x3b
 8001658:	f000 fd82 	bl	8002160 <HAL_NVIC_EnableIRQ>
}
 800165c:	e111      	b.n	8001882 <HAL_UART_MspInit+0x686>
 800165e:	bf00      	nop
 8001660:	40004400 	.word	0x40004400
 8001664:	44020c00 	.word	0x44020c00
 8001668:	42020000 	.word	0x42020000
 800166c:	200004a0 	.word	0x200004a0
 8001670:	400201d0 	.word	0x400201d0
 8001674:	20000518 	.word	0x20000518
 8001678:	40020150 	.word	0x40020150
  else if(huart->Instance==USART3)
 800167c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001680:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a80      	ldr	r2, [pc, #512]	@ (800188c <HAL_UART_MspInit+0x690>)
 800168a:	4293      	cmp	r3, r2
 800168c:	f040 80f9 	bne.w	8001882 <HAL_UART_MspInit+0x686>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001690:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001694:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001698:	f04f 0204 	mov.w	r2, #4
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80016a8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016ac:	2200      	movs	r2, #0
 80016ae:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fac9 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0x4c8>
      Error_Handler();
 80016c0:	f7ff fbf8 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016c4:	4b72      	ldr	r3, [pc, #456]	@ (8001890 <HAL_UART_MspInit+0x694>)
 80016c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016ca:	4a71      	ldr	r2, [pc, #452]	@ (8001890 <HAL_UART_MspInit+0x694>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001890 <HAL_UART_MspInit+0x694>)
 80016d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016da:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80016de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80016e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80016ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016f0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	4b67      	ldr	r3, [pc, #412]	@ (8001890 <HAL_UART_MspInit+0x694>)
 80016f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f8:	4a65      	ldr	r2, [pc, #404]	@ (8001890 <HAL_UART_MspInit+0x694>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001702:	4b63      	ldr	r3, [pc, #396]	@ (8001890 <HAL_UART_MspInit+0x694>)
 8001704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001708:	f003 0204 	and.w	r2, r3, #4
 800170c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001710:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800171a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800171e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001720:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001724:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800173a:	2307      	movs	r3, #7
 800173c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001744:	4619      	mov	r1, r3
 8001746:	4853      	ldr	r0, [pc, #332]	@ (8001894 <HAL_UART_MspInit+0x698>)
 8001748:	f001 fb62 	bl	8002e10 <HAL_GPIO_Init>
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 800174c:	4b52      	ldr	r3, [pc, #328]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 800174e:	4a53      	ldr	r2, [pc, #332]	@ (800189c <HAL_UART_MspInit+0x6a0>)
 8001750:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.Init.Request = GPDMA1_REQUEST_USART3_RX;
 8001752:	4b51      	ldr	r3, [pc, #324]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001754:	2219      	movs	r2, #25
 8001756:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel5.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001758:	4b4f      	ldr	r3, [pc, #316]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175e:	4b4e      	ldr	r3, [pc, #312]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel5.Init.SrcInc = DMA_SINC_FIXED;
 8001764:	4b4c      	ldr	r3, [pc, #304]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel5.Init.DestInc = DMA_DINC_FIXED;
 800176a:	4b4b      	ldr	r3, [pc, #300]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel5.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001770:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel5.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001776:	4b48      	ldr	r3, [pc, #288]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel5.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800177c:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel5.Init.SrcBurstLength = 1;
 8001782:	4b45      	ldr	r3, [pc, #276]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001784:	2201      	movs	r2, #1
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel5.Init.DestBurstLength = 1;
 8001788:	4b43      	ldr	r3, [pc, #268]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 800178a:	2201      	movs	r2, #1
 800178c:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800178e:	4b42      	ldr	r3, [pc, #264]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001790:	2200      	movs	r2, #0
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel5.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001794:	4b40      	ldr	r3, [pc, #256]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 8001796:	2200      	movs	r2, #0
 8001798:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel5.Init.Mode = DMA_NORMAL;
 800179a:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 800179c:	2200      	movs	r2, #0
 800179e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 80017a0:	483d      	ldr	r0, [pc, #244]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 80017a2:	f000 fd43 	bl	800222c <HAL_DMA_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_UART_MspInit+0x5b4>
      Error_Handler();
 80017ac:	f7ff fb82 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel5);
 80017b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a37      	ldr	r2, [pc, #220]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 80017bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017c0:	4a35      	ldr	r2, [pc, #212]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 80017c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017ce:	2110      	movs	r1, #16
 80017d0:	4831      	ldr	r0, [pc, #196]	@ (8001898 <HAL_UART_MspInit+0x69c>)
 80017d2:	f001 f85d 	bl	8002890 <HAL_DMA_ConfigChannelAttributes>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0x5e4>
      Error_Handler();
 80017dc:	f7ff fb6a 	bl	8000eb4 <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 80017e0:	4b2f      	ldr	r3, [pc, #188]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 80017e2:	4a30      	ldr	r2, [pc, #192]	@ (80018a4 <HAL_UART_MspInit+0x6a8>)
 80017e4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.Init.Request = GPDMA1_REQUEST_USART3_TX;
 80017e6:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 80017e8:	221a      	movs	r2, #26
 80017ea:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel4.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80017ec:	4b2c      	ldr	r3, [pc, #176]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f2:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel4.Init.SrcInc = DMA_SINC_FIXED;
 80017f8:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel4.Init.DestInc = DMA_DINC_FIXED;
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel4.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001804:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel4.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800180a:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel4.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001810:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel4.Init.SrcBurstLength = 1;
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001818:	2201      	movs	r2, #1
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel4.Init.DestBurstLength = 1;
 800181c:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 800181e:	2201      	movs	r2, #1
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel4.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001822:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001824:	2200      	movs	r2, #0
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel4.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 800182a:	2200      	movs	r2, #0
 800182c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel4.Init.Mode = DMA_NORMAL;
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001830:	2200      	movs	r2, #0
 8001832:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8001834:	481a      	ldr	r0, [pc, #104]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001836:	f000 fcf9 	bl	800222c <HAL_DMA_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0x648>
      Error_Handler();
 8001840:	f7ff fb38 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel4);
 8001844:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001848:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001850:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001852:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001854:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001858:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001860:	2110      	movs	r1, #16
 8001862:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <HAL_UART_MspInit+0x6a4>)
 8001864:	f001 f814 	bl	8002890 <HAL_DMA_ConfigChannelAttributes>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_UART_MspInit+0x676>
      Error_Handler();
 800186e:	f7ff fb21 	bl	8000eb4 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2105      	movs	r1, #5
 8001876:	203c      	movs	r0, #60	@ 0x3c
 8001878:	f000 fc58 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800187c:	203c      	movs	r0, #60	@ 0x3c
 800187e:	f000 fc6f 	bl	8002160 <HAL_NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40004800 	.word	0x40004800
 8001890:	44020c00 	.word	0x44020c00
 8001894:	42020800 	.word	0x42020800
 8001898:	20000590 	.word	0x20000590
 800189c:	400202d0 	.word	0x400202d0
 80018a0:	20000608 	.word	0x20000608
 80018a4:	40020250 	.word	0x40020250

080018a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0c6      	sub	sp, #280	@ 0x118
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018b6:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018c0:	4618      	mov	r0, r3
 80018c2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80018c6:	461a      	mov	r2, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	f00d f826 	bl	800e91a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80018ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <HAL_PCD_MspInit+0xac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d133      	bne.n	8001948 <HAL_PCD_MspInit+0xa0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018e4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0310 	mov.w	r3, #16
 80018f0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80018f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018fc:	2230      	movs	r2, #48	@ 0x30
 80018fe:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f9a0 	bl	8004c4c <HAL_RCCEx_PeriphCLKConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001912:	f7ff facf 	bl	8000eb4 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001916:	f002 f9d7 	bl	8003cc8 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <HAL_PCD_MspInit+0xb0>)
 800191c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <HAL_PCD_MspInit+0xb0>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001926:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_PCD_MspInit+0xb0>)
 800192c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001930:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001934:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001938:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001946:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001948:	bf00      	nop
 800194a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40016000 	.word	0x40016000
 8001958:	44020c00 	.word	0x44020c00

0800195c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	@ 0x38
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001964:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <HAL_InitTick+0xc4>)
 8001966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800196a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a20 <HAL_InitTick+0xc4>)
 800196c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001970:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001974:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <HAL_InitTick+0xc4>)
 8001976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800197a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001982:	f107 0210 	add.w	r2, r7, #16
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f925 	bl	8004bdc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001992:	f003 f8f7 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8001996:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <HAL_InitTick+0xc8>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	09db      	lsrs	r3, r3, #7
 80019a4:	3b01      	subs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <HAL_InitTick+0xcc>)
 80019aa:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <HAL_InitTick+0xd0>)
 80019ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (100000U / 1000U) - 1U;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <HAL_InitTick+0xcc>)
 80019b0:	2263      	movs	r2, #99	@ 0x63
 80019b2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <HAL_InitTick+0xcc>)
 80019b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_InitTick+0xcc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_InitTick+0xcc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80019c6:	4818      	ldr	r0, [pc, #96]	@ (8001a28 <HAL_InitTick+0xcc>)
 80019c8:	f008 f920 	bl	8009c0c <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80019d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019da:	4813      	ldr	r0, [pc, #76]	@ (8001a28 <HAL_InitTick+0xcc>)
 80019dc:	f008 f96e 	bl	8009cbc <HAL_TIM_Base_Start_IT>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80019e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10e      	bne.n	8001a0c <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d808      	bhi.n	8001a06 <HAL_InitTick+0xaa>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	202a      	movs	r0, #42	@ 0x2a
 80019fa:	f000 fb97 	bl	800212c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001a30 <HAL_InitTick+0xd4>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e002      	b.n	8001a0c <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a0c:	202a      	movs	r0, #42	@ 0x2a
 8001a0e:	f000 fba7 	bl	8002160 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001a12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3738      	adds	r7, #56	@ 0x38
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	44020c00 	.word	0x44020c00
 8001a24:	0a7c5ac5 	.word	0x0a7c5ac5
 8001a28:	20000964 	.word	0x20000964
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	20000004 	.word	0x20000004

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001a72:	f000 fdac 	bl	80025ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000428 	.word	0x20000428

08001a80 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <GPDMA1_Channel1_IRQHandler+0x10>)
 8001a86:	f000 fda2 	bl	80025ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200003b0 	.word	0x200003b0

08001a94 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <GPDMA1_Channel2_IRQHandler+0x10>)
 8001a9a:	f000 fd98 	bl	80025ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000518 	.word	0x20000518

08001aa8 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <GPDMA1_Channel3_IRQHandler+0x10>)
 8001aae:	f000 fd8e 	bl	80025ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200004a0 	.word	0x200004a0

08001abc <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <GPDMA1_Channel4_IRQHandler+0x10>)
 8001ac2:	f000 fd84 	bl	80025ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000608 	.word	0x20000608

08001ad0 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <GPDMA1_Channel5_IRQHandler+0x10>)
 8001ad6:	f000 fd7a 	bl	80025ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000590 	.word	0x20000590

08001ae4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <TIM1_UP_IRQHandler+0x10>)
 8001aea:	f008 f9f6 	bl	8009eda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000964 	.word	0x20000964

08001af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <TIM2_IRQHandler+0x10>)
 8001afe:	f008 f9ec 	bl	8009eda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000098 	.word	0x20000098

08001b0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <TIM4_IRQHandler+0x10>)
 8001b12:	f008 f9e2 	bl	8009eda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200000e4 	.word	0x200000e4

08001b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <USART1_IRQHandler+0x10>)
 8001b26:	f009 fc83 	bl	800b430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200001f4 	.word	0x200001f4

08001b34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <USART2_IRQHandler+0x10>)
 8001b3a:	f009 fc79 	bl	800b430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000288 	.word	0x20000288

08001b48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <USART3_IRQHandler+0x10>)
 8001b4e:	f009 fc6f 	bl	800b430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000031c 	.word	0x2000031c

08001b5c <GPDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 0 global interrupt.
  */
void GPDMA2_Channel0_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 0 */

  /* USER CODE END GPDMA2_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel0);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <GPDMA2_Channel0_IRQHandler+0x10>)
 8001b62:	f000 fd34 	bl	80025ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 1 */

  /* USER CODE END GPDMA2_Channel0_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000017c 	.word	0x2000017c

08001b70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b76:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <SystemInit+0xdc>)
 8001b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7c:	4a33      	ldr	r2, [pc, #204]	@ (8001c4c <SystemInit+0xdc>)
 8001b7e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001b86:	4b32      	ldr	r3, [pc, #200]	@ (8001c50 <SystemInit+0xe0>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b8c:	4b30      	ldr	r3, [pc, #192]	@ (8001c50 <SystemInit+0xe0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b92:	4b2f      	ldr	r3, [pc, #188]	@ (8001c50 <SystemInit+0xe0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001b98:	4b2d      	ldr	r3, [pc, #180]	@ (8001c50 <SystemInit+0xe0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	492c      	ldr	r1, [pc, #176]	@ (8001c50 <SystemInit+0xe0>)
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <SystemInit+0xe4>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c50 <SystemInit+0xe0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001baa:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <SystemInit+0xe0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001bb0:	4b27      	ldr	r3, [pc, #156]	@ (8001c50 <SystemInit+0xe0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001bb6:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <SystemInit+0xe0>)
 8001bb8:	4a27      	ldr	r2, [pc, #156]	@ (8001c58 <SystemInit+0xe8>)
 8001bba:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <SystemInit+0xe0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001bc2:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <SystemInit+0xe0>)
 8001bc4:	4a24      	ldr	r2, [pc, #144]	@ (8001c58 <SystemInit+0xe8>)
 8001bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001bc8:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <SystemInit+0xe0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <SystemInit+0xe0>)
 8001bd0:	4a21      	ldr	r2, [pc, #132]	@ (8001c58 <SystemInit+0xe8>)
 8001bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <SystemInit+0xe0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <SystemInit+0xe0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <SystemInit+0xe0>)
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <SystemInit+0xe0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bec:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <SystemInit+0xdc>)
 8001bee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bf2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <SystemInit+0xec>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001bfc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001c04:	d003      	beq.n	8001c0e <SystemInit+0x9e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c0c:	d117      	bne.n	8001c3e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <SystemInit+0xec>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <SystemInit+0xec>)
 8001c1c:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <SystemInit+0xf0>)
 8001c1e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <SystemInit+0xec>)
 8001c22:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <SystemInit+0xf4>)
 8001c24:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <SystemInit+0xec>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <SystemInit+0xec>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <SystemInit+0xec>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <SystemInit+0xec>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	61d3      	str	r3, [r2, #28]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	44020c00 	.word	0x44020c00
 8001c54:	eae2eae3 	.word	0xeae2eae3
 8001c58:	01010280 	.word	0x01010280
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	08192a3b 	.word	0x08192a3b
 8001c64:	4c5d6e7f 	.word	0x4c5d6e7f

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c6e:	e003      	b.n	8001c78 <LoopCopyDataInit>

08001c70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c76:	3104      	adds	r1, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c78:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c80:	d3f6      	bcc.n	8001c70 <CopyDataInit>
	ldr	r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c84:	e002      	b.n	8001c8c <LoopFillZerobss>

08001c86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c88:	f842 3b04 	str.w	r3, [r2], #4

08001c8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <LoopForever+0x16>)
	cmp	r2, r3
 8001c8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c90:	d3f9      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c92:	f7ff ff6d 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f00c fe49 	bl	800e92c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7fe fd27 	bl	80006ec <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001ca0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001ca4:	0800eb04 	.word	0x0800eb04
	ldr	r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cac:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001cb0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001cb4:	200038ec 	.word	0x200038ec

08001cb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_IRQHandler>

08001cba <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af04      	add	r7, sp, #16
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2178      	movs	r1, #120	@ 0x78
 8001ce6:	4803      	ldr	r0, [pc, #12]	@ (8001cf4 <ssd1306_WriteCommand+0x2c>)
 8001ce8:	f001 fa80 	bl	80031ec <HAL_I2C_Mem_Write>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000044 	.word	0x20000044

08001cf8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af04      	add	r7, sp, #16
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0a:	9202      	str	r2, [sp, #8]
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	2240      	movs	r2, #64	@ 0x40
 8001d16:	2178      	movs	r1, #120	@ 0x78
 8001d18:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <ssd1306_WriteData+0x30>)
 8001d1a:	f001 fa67 	bl	80031ec <HAL_I2C_Mem_Write>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000044 	.word	0x20000044

08001d2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d30:	f7ff ffc3 	bl	8001cba <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d34:	2064      	movs	r0, #100	@ 0x64
 8001d36:	f000 f91d 	bl	8001f74 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f8b4 	bl	8001ea8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d40:	2020      	movs	r0, #32
 8001d42:	f7ff ffc1 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff ffbe 	bl	8001cc8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d4c:	20b0      	movs	r0, #176	@ 0xb0
 8001d4e:	f7ff ffbb 	bl	8001cc8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d52:	20c8      	movs	r0, #200	@ 0xc8
 8001d54:	f7ff ffb8 	bl	8001cc8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff ffb5 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d5e:	2010      	movs	r0, #16
 8001d60:	f7ff ffb2 	bl	8001cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d64:	2040      	movs	r0, #64	@ 0x40
 8001d66:	f7ff ffaf 	bl	8001cc8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d6a:	20ff      	movs	r0, #255	@ 0xff
 8001d6c:	f000 f888 	bl	8001e80 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d70:	20a1      	movs	r0, #161	@ 0xa1
 8001d72:	f7ff ffa9 	bl	8001cc8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d76:	20a6      	movs	r0, #166	@ 0xa6
 8001d78:	f7ff ffa6 	bl	8001cc8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d7c:	20a8      	movs	r0, #168	@ 0xa8
 8001d7e:	f7ff ffa3 	bl	8001cc8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d82:	203f      	movs	r0, #63	@ 0x3f
 8001d84:	f7ff ffa0 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d88:	20a4      	movs	r0, #164	@ 0xa4
 8001d8a:	f7ff ff9d 	bl	8001cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d8e:	20d3      	movs	r0, #211	@ 0xd3
 8001d90:	f7ff ff9a 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff ff97 	bl	8001cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d9a:	20d5      	movs	r0, #213	@ 0xd5
 8001d9c:	f7ff ff94 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001da0:	20f0      	movs	r0, #240	@ 0xf0
 8001da2:	f7ff ff91 	bl	8001cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001da6:	20d9      	movs	r0, #217	@ 0xd9
 8001da8:	f7ff ff8e 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001dac:	2022      	movs	r0, #34	@ 0x22
 8001dae:	f7ff ff8b 	bl	8001cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001db2:	20da      	movs	r0, #218	@ 0xda
 8001db4:	f7ff ff88 	bl	8001cc8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001db8:	2012      	movs	r0, #18
 8001dba:	f7ff ff85 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001dbe:	20db      	movs	r0, #219	@ 0xdb
 8001dc0:	f7ff ff82 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001dc4:	2020      	movs	r0, #32
 8001dc6:	f7ff ff7f 	bl	8001cc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001dca:	208d      	movs	r0, #141	@ 0x8d
 8001dcc:	f7ff ff7c 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001dd0:	2014      	movs	r0, #20
 8001dd2:	f7ff ff79 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f000 f866 	bl	8001ea8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f000 f80f 	bl	8001e00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001de2:	f000 f825 	bl	8001e30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001de6:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <ssd1306_Init+0xd0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <ssd1306_Init+0xd0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001df2:	4b02      	ldr	r3, [pc, #8]	@ (8001dfc <ssd1306_Init+0xd0>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	711a      	strb	r2, [r3, #4]
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000db0 	.word	0x20000db0

08001e00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <ssd1306_Fill+0x14>
 8001e10:	2300      	movs	r3, #0
 8001e12:	e000      	b.n	8001e16 <ssd1306_Fill+0x16>
 8001e14:	23ff      	movs	r3, #255	@ 0xff
 8001e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4803      	ldr	r0, [pc, #12]	@ (8001e2c <ssd1306_Fill+0x2c>)
 8001e1e:	f00c fd7c 	bl	800e91a <memset>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200009b0 	.word	0x200009b0

08001e30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	e016      	b.n	8001e6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	3b50      	subs	r3, #80	@ 0x50
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff40 	bl	8001cc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff ff3d 	bl	8001cc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e4e:	2010      	movs	r0, #16
 8001e50:	f7ff ff3a 	bl	8001cc8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	01db      	lsls	r3, r3, #7
 8001e58:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <ssd1306_UpdateScreen+0x4c>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	2180      	movs	r1, #128	@ 0x80
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff4a 	bl	8001cf8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	3301      	adds	r3, #1
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b07      	cmp	r3, #7
 8001e6e:	d9e5      	bls.n	8001e3c <ssd1306_UpdateScreen+0xc>
    }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200009b0 	.word	0x200009b0

08001e80 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e8a:	2381      	movs	r3, #129	@ 0x81
 8001e8c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff19 	bl	8001cc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff15 	bl	8001cc8 <ssd1306_WriteCommand>
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001eb8:	23af      	movs	r3, #175	@ 0xaf
 8001eba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <ssd1306_SetDisplayOn+0x38>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	715a      	strb	r2, [r3, #5]
 8001ec2:	e004      	b.n	8001ece <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ec4:	23ae      	movs	r3, #174	@ 0xae
 8001ec6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <ssd1306_SetDisplayOn+0x38>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fef9 	bl	8001cc8 <ssd1306_WriteCommand>
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000db0 	.word	0x20000db0

08001ee4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f914 	bl	8002116 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001eee:	f002 fceb 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <HAL_Init+0x44>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	490b      	ldr	r1, [pc, #44]	@ (8001f2c <HAL_Init+0x48>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <HAL_Init+0x4c>)
 8001f06:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f08:	2004      	movs	r0, #4
 8001f0a:	f000 f937 	bl	800217c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f7ff fd24 	bl	800195c <HAL_InitTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e002      	b.n	8001f24 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1e:	f7fe ffcf 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	44020c00 	.word	0x44020c00
 8001f2c:	0800eab4 	.word	0x0800eab4
 8001f30:	20000000 	.word	0x20000000

08001f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_IncTick+0x20>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_IncTick+0x24>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_IncTick+0x24>)
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000db8 	.word	0x20000db8

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000db8 	.word	0x20000db8

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <HAL_Delay+0x44>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9a:	bf00      	nop
 8001f9c:	f7ff ffde 	bl	8001f5c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d8f7      	bhi.n	8001f9c <HAL_Delay+0x28>
  {
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0b      	blt.n	800204a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4907      	ldr	r1, [pc, #28]	@ (8002058 <__NVIC_EnableIRQ+0x38>)
 800203a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	@ (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	@ (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
         );
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	@ 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ff4c 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800213a:	f7ff ff63 	bl	8002004 <__NVIC_GetPriorityGrouping>
 800213e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f7ff ffb3 	bl	80020b0 <NVIC_EncodePriority>
 800214a:	4602      	mov	r2, r0
 800214c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff82 	bl	800205c <__NVIC_SetPriority>
}
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff56 	bl	8002020 <__NVIC_EnableIRQ>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d844      	bhi.n	8002214 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800218a:	a201      	add	r2, pc, #4	@ (adr r2, 8002190 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	080021b3 	.word	0x080021b3
 8002194:	080021d1 	.word	0x080021d1
 8002198:	080021f3 	.word	0x080021f3
 800219c:	08002215 	.word	0x08002215
 80021a0:	080021a5 	.word	0x080021a5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80021a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6013      	str	r3, [r2, #0]
      break;
 80021b0:	e031      	b.n	8002216 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80021be:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80021c4:	4a18      	ldr	r2, [pc, #96]	@ (8002228 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021c6:	f023 030c 	bic.w	r3, r3, #12
 80021ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80021ce:	e022      	b.n	8002216 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80021e2:	f023 030c 	bic.w	r3, r3, #12
 80021e6:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80021f0:	e011      	b.n	8002216 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80021f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002224 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002204:	f023 030c 	bic.w	r3, r3, #12
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002212:	e000      	b.n	8002216 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002214:	bf00      	nop
  }
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010
 8002228:	44020c00 	.word	0x44020c00

0800222c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fe92 	bl	8001f5c <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0db      	b.n	80023fc <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a6e      	ldr	r2, [pc, #440]	@ (8002404 <HAL_DMA_Init+0x1d8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	f000 809f 	beq.w	800238e <HAL_DMA_Init+0x162>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a6c      	ldr	r2, [pc, #432]	@ (8002408 <HAL_DMA_Init+0x1dc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	f000 8099 	beq.w	800238e <HAL_DMA_Init+0x162>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6a      	ldr	r2, [pc, #424]	@ (800240c <HAL_DMA_Init+0x1e0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	f000 8093 	beq.w	800238e <HAL_DMA_Init+0x162>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a68      	ldr	r2, [pc, #416]	@ (8002410 <HAL_DMA_Init+0x1e4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	f000 808d 	beq.w	800238e <HAL_DMA_Init+0x162>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a66      	ldr	r2, [pc, #408]	@ (8002414 <HAL_DMA_Init+0x1e8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	f000 8087 	beq.w	800238e <HAL_DMA_Init+0x162>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a64      	ldr	r2, [pc, #400]	@ (8002418 <HAL_DMA_Init+0x1ec>)
 8002286:	4293      	cmp	r3, r2
 8002288:	f000 8081 	beq.w	800238e <HAL_DMA_Init+0x162>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a62      	ldr	r2, [pc, #392]	@ (800241c <HAL_DMA_Init+0x1f0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d07b      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a61      	ldr	r2, [pc, #388]	@ (8002420 <HAL_DMA_Init+0x1f4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d076      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002424 <HAL_DMA_Init+0x1f8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d071      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002428 <HAL_DMA_Init+0x1fc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d06c      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a5c      	ldr	r2, [pc, #368]	@ (800242c <HAL_DMA_Init+0x200>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d067      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002430 <HAL_DMA_Init+0x204>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d062      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a59      	ldr	r2, [pc, #356]	@ (8002434 <HAL_DMA_Init+0x208>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d05d      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a58      	ldr	r2, [pc, #352]	@ (8002438 <HAL_DMA_Init+0x20c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d058      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a56      	ldr	r2, [pc, #344]	@ (800243c <HAL_DMA_Init+0x210>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d053      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a55      	ldr	r2, [pc, #340]	@ (8002440 <HAL_DMA_Init+0x214>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04e      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a53      	ldr	r2, [pc, #332]	@ (8002444 <HAL_DMA_Init+0x218>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d049      	beq.n	800238e <HAL_DMA_Init+0x162>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_DMA_Init+0x21c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d044      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a50      	ldr	r2, [pc, #320]	@ (800244c <HAL_DMA_Init+0x220>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d03f      	beq.n	800238e <HAL_DMA_Init+0x162>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a4f      	ldr	r2, [pc, #316]	@ (8002450 <HAL_DMA_Init+0x224>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d03a      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4d      	ldr	r2, [pc, #308]	@ (8002454 <HAL_DMA_Init+0x228>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d035      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_DMA_Init+0x22c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d030      	beq.n	800238e <HAL_DMA_Init+0x162>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a4a      	ldr	r2, [pc, #296]	@ (800245c <HAL_DMA_Init+0x230>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02b      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_DMA_Init+0x234>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d026      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a47      	ldr	r2, [pc, #284]	@ (8002464 <HAL_DMA_Init+0x238>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d021      	beq.n	800238e <HAL_DMA_Init+0x162>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a46      	ldr	r2, [pc, #280]	@ (8002468 <HAL_DMA_Init+0x23c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d01c      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a44      	ldr	r2, [pc, #272]	@ (800246c <HAL_DMA_Init+0x240>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d017      	beq.n	800238e <HAL_DMA_Init+0x162>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a43      	ldr	r2, [pc, #268]	@ (8002470 <HAL_DMA_Init+0x244>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d012      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a41      	ldr	r2, [pc, #260]	@ (8002474 <HAL_DMA_Init+0x248>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a40      	ldr	r2, [pc, #256]	@ (8002478 <HAL_DMA_Init+0x24c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d008      	beq.n	800238e <HAL_DMA_Init+0x162>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3e      	ldr	r2, [pc, #248]	@ (800247c <HAL_DMA_Init+0x250>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <HAL_DMA_Init+0x162>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3d      	ldr	r2, [pc, #244]	@ (8002480 <HAL_DMA_Init+0x254>)
 800238c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0206 	orr.w	r2, r2, #6
 80023ac:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80023ae:	e00f      	b.n	80023d0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80023b0:	f7ff fdd4 	bl	8001f5c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d908      	bls.n	80023d0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2210      	movs	r2, #16
 80023c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e015      	b.n	80023fc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e8      	bne.n	80023b0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa92 	bl	8002908 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40020050 	.word	0x40020050
 8002408:	50020050 	.word	0x50020050
 800240c:	400200d0 	.word	0x400200d0
 8002410:	500200d0 	.word	0x500200d0
 8002414:	40020150 	.word	0x40020150
 8002418:	50020150 	.word	0x50020150
 800241c:	400201d0 	.word	0x400201d0
 8002420:	500201d0 	.word	0x500201d0
 8002424:	40020250 	.word	0x40020250
 8002428:	50020250 	.word	0x50020250
 800242c:	400202d0 	.word	0x400202d0
 8002430:	500202d0 	.word	0x500202d0
 8002434:	40020350 	.word	0x40020350
 8002438:	50020350 	.word	0x50020350
 800243c:	400203d0 	.word	0x400203d0
 8002440:	500203d0 	.word	0x500203d0
 8002444:	40021050 	.word	0x40021050
 8002448:	50021050 	.word	0x50021050
 800244c:	400210d0 	.word	0x400210d0
 8002450:	500210d0 	.word	0x500210d0
 8002454:	40021150 	.word	0x40021150
 8002458:	50021150 	.word	0x50021150
 800245c:	400211d0 	.word	0x400211d0
 8002460:	500211d0 	.word	0x500211d0
 8002464:	40021250 	.word	0x40021250
 8002468:	50021250 	.word	0x50021250
 800246c:	400212d0 	.word	0x400212d0
 8002470:	500212d0 	.word	0x500212d0
 8002474:	40021350 	.word	0x40021350
 8002478:	50021350 	.word	0x50021350
 800247c:	400213d0 	.word	0x400213d0
 8002480:	500213d0 	.word	0x500213d0

08002484 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800248c:	f7ff fd66 	bl	8001f5c <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e06b      	b.n	8002574 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d008      	beq.n	80024ba <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e05c      	b.n	8002574 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0204 	orr.w	r2, r2, #4
 80024c8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2205      	movs	r2, #5
 80024ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80024d2:	e020      	b.n	8002516 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80024d4:	f7ff fd42 	bl	8001f5c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d919      	bls.n	8002516 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002506:	2201      	movs	r2, #1
 8002508:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e02e      	b.n	8002574 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0d7      	beq.n	80024d4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0202 	orr.w	r2, r2, #2
 8002532:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002544:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800255e:	2201      	movs	r2, #1
 8002560:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e019      	b.n	80025c2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d004      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e00e      	b.n	80025c2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2204      	movs	r2, #4
 80025a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025de:	f023 030f 	bic.w	r3, r3, #15
 80025e2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	3b50      	subs	r3, #80	@ 0x50
 80025ee:	09db      	lsrs	r3, r3, #7
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2201      	movs	r2, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 813b 	beq.w	8002884 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d011      	beq.n	8002640 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002632:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800264a:	2b00      	cmp	r3, #0
 800264c:	d011      	beq.n	8002672 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002664:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d011      	beq.n	80026a4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002696:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d011      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026c8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	f043 0208 	orr.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026fa:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d04c      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d045      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002730:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b04      	cmp	r3, #4
 800273c:	d12e      	bne.n	800279c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800274c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0202 	orr.w	r2, r2, #2
 800275c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002776:	2201      	movs	r2, #1
 8002778:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d07a      	beq.n	8002888 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
        }

        return;
 800279a:	e075      	b.n	8002888 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2205      	movs	r2, #5
 80027a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d039      	beq.n	8002836 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d032      	beq.n	8002836 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d116      	bne.n	8002814 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	2201      	movs	r2, #1
 80027fe:	731a      	strb	r2, [r3, #12]
 8002800:	e008      	b.n	8002814 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800281c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	2b00      	cmp	r3, #0
 800283c:	d025      	beq.n	800288a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0202 	orr.w	r2, r2, #2
 800284c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	2201      	movs	r2, #1
 8002868:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
 8002882:	e002      	b.n	800288a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8002888:	bf00      	nop
    }
  }
}
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e02b      	b.n	80028fc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80028ac:	f023 030f 	bic.w	r3, r3, #15
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ba:	3b50      	subs	r3, #80	@ 0x50
 80028bc:	09db      	lsrs	r3, r3, #7
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2201      	movs	r2, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f003 0311 	and.w	r3, r3, #17
 80028da:	2b11      	cmp	r3, #17
 80028dc:	d106      	bne.n	80028ec <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	e006      	b.n	80028fa <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	401a      	ands	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	430a      	orrs	r2, r1
 8002928:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a53      	ldr	r2, [pc, #332]	@ (8002a94 <DMA_Init+0x18c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	f000 80a0 	beq.w	8002a8e <DMA_Init+0x186>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a51      	ldr	r2, [pc, #324]	@ (8002a98 <DMA_Init+0x190>)
 8002954:	4293      	cmp	r3, r2
 8002956:	f000 809a 	beq.w	8002a8e <DMA_Init+0x186>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a4f      	ldr	r2, [pc, #316]	@ (8002a9c <DMA_Init+0x194>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f000 8094 	beq.w	8002a8e <DMA_Init+0x186>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa0 <DMA_Init+0x198>)
 800296c:	4293      	cmp	r3, r2
 800296e:	f000 808e 	beq.w	8002a8e <DMA_Init+0x186>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa4 <DMA_Init+0x19c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	f000 8088 	beq.w	8002a8e <DMA_Init+0x186>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a49      	ldr	r2, [pc, #292]	@ (8002aa8 <DMA_Init+0x1a0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	f000 8082 	beq.w	8002a8e <DMA_Init+0x186>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a47      	ldr	r2, [pc, #284]	@ (8002aac <DMA_Init+0x1a4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d07c      	beq.n	8002a8e <DMA_Init+0x186>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a45      	ldr	r2, [pc, #276]	@ (8002ab0 <DMA_Init+0x1a8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d077      	beq.n	8002a8e <DMA_Init+0x186>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a44      	ldr	r2, [pc, #272]	@ (8002ab4 <DMA_Init+0x1ac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d072      	beq.n	8002a8e <DMA_Init+0x186>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a42      	ldr	r2, [pc, #264]	@ (8002ab8 <DMA_Init+0x1b0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d06d      	beq.n	8002a8e <DMA_Init+0x186>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a41      	ldr	r2, [pc, #260]	@ (8002abc <DMA_Init+0x1b4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d068      	beq.n	8002a8e <DMA_Init+0x186>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ac0 <DMA_Init+0x1b8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d063      	beq.n	8002a8e <DMA_Init+0x186>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a3e      	ldr	r2, [pc, #248]	@ (8002ac4 <DMA_Init+0x1bc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d05e      	beq.n	8002a8e <DMA_Init+0x186>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ac8 <DMA_Init+0x1c0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d059      	beq.n	8002a8e <DMA_Init+0x186>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3b      	ldr	r2, [pc, #236]	@ (8002acc <DMA_Init+0x1c4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d054      	beq.n	8002a8e <DMA_Init+0x186>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a39      	ldr	r2, [pc, #228]	@ (8002ad0 <DMA_Init+0x1c8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d04f      	beq.n	8002a8e <DMA_Init+0x186>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a38      	ldr	r2, [pc, #224]	@ (8002ad4 <DMA_Init+0x1cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04a      	beq.n	8002a8e <DMA_Init+0x186>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a36      	ldr	r2, [pc, #216]	@ (8002ad8 <DMA_Init+0x1d0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d045      	beq.n	8002a8e <DMA_Init+0x186>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a35      	ldr	r2, [pc, #212]	@ (8002adc <DMA_Init+0x1d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d040      	beq.n	8002a8e <DMA_Init+0x186>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a33      	ldr	r2, [pc, #204]	@ (8002ae0 <DMA_Init+0x1d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d03b      	beq.n	8002a8e <DMA_Init+0x186>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ae4 <DMA_Init+0x1dc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d036      	beq.n	8002a8e <DMA_Init+0x186>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a30      	ldr	r2, [pc, #192]	@ (8002ae8 <DMA_Init+0x1e0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d031      	beq.n	8002a8e <DMA_Init+0x186>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002aec <DMA_Init+0x1e4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d02c      	beq.n	8002a8e <DMA_Init+0x186>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <DMA_Init+0x1e8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d027      	beq.n	8002a8e <DMA_Init+0x186>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2c      	ldr	r2, [pc, #176]	@ (8002af4 <DMA_Init+0x1ec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <DMA_Init+0x186>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <DMA_Init+0x1f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <DMA_Init+0x186>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <DMA_Init+0x1f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d018      	beq.n	8002a8e <DMA_Init+0x186>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a27      	ldr	r2, [pc, #156]	@ (8002b00 <DMA_Init+0x1f8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <DMA_Init+0x186>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a26      	ldr	r2, [pc, #152]	@ (8002b04 <DMA_Init+0x1fc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <DMA_Init+0x186>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a24      	ldr	r2, [pc, #144]	@ (8002b08 <DMA_Init+0x200>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <DMA_Init+0x186>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a23      	ldr	r2, [pc, #140]	@ (8002b0c <DMA_Init+0x204>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <DMA_Init+0x186>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a21      	ldr	r2, [pc, #132]	@ (8002b10 <DMA_Init+0x208>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d142      	bne.n	8002b14 <DMA_Init+0x20c>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e041      	b.n	8002b16 <DMA_Init+0x20e>
 8002a92:	bf00      	nop
 8002a94:	40020050 	.word	0x40020050
 8002a98:	50020050 	.word	0x50020050
 8002a9c:	400200d0 	.word	0x400200d0
 8002aa0:	500200d0 	.word	0x500200d0
 8002aa4:	40020150 	.word	0x40020150
 8002aa8:	50020150 	.word	0x50020150
 8002aac:	400201d0 	.word	0x400201d0
 8002ab0:	500201d0 	.word	0x500201d0
 8002ab4:	40020250 	.word	0x40020250
 8002ab8:	50020250 	.word	0x50020250
 8002abc:	400202d0 	.word	0x400202d0
 8002ac0:	500202d0 	.word	0x500202d0
 8002ac4:	40020350 	.word	0x40020350
 8002ac8:	50020350 	.word	0x50020350
 8002acc:	400203d0 	.word	0x400203d0
 8002ad0:	500203d0 	.word	0x500203d0
 8002ad4:	40021050 	.word	0x40021050
 8002ad8:	50021050 	.word	0x50021050
 8002adc:	400210d0 	.word	0x400210d0
 8002ae0:	500210d0 	.word	0x500210d0
 8002ae4:	40021150 	.word	0x40021150
 8002ae8:	50021150 	.word	0x50021150
 8002aec:	400211d0 	.word	0x400211d0
 8002af0:	500211d0 	.word	0x500211d0
 8002af4:	40021250 	.word	0x40021250
 8002af8:	50021250 	.word	0x50021250
 8002afc:	400212d0 	.word	0x400212d0
 8002b00:	500212d0 	.word	0x500212d0
 8002b04:	40021350 	.word	0x40021350
 8002b08:	50021350 	.word	0x50021350
 8002b0c:	400213d0 	.word	0x400213d0
 8002b10:	500213d0 	.word	0x500213d0
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	051b      	lsls	r3, r3, #20
 8002b26:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002b2a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	3b01      	subs	r3, #1
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002b38:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b70:	f040 80b0 	bne.w	8002cd4 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a84      	ldr	r2, [pc, #528]	@ (8002d8c <DMA_Init+0x484>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f000 80a0 	beq.w	8002cc0 <DMA_Init+0x3b8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a82      	ldr	r2, [pc, #520]	@ (8002d90 <DMA_Init+0x488>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	f000 809a 	beq.w	8002cc0 <DMA_Init+0x3b8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a80      	ldr	r2, [pc, #512]	@ (8002d94 <DMA_Init+0x48c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f000 8094 	beq.w	8002cc0 <DMA_Init+0x3b8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7e      	ldr	r2, [pc, #504]	@ (8002d98 <DMA_Init+0x490>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	f000 808e 	beq.w	8002cc0 <DMA_Init+0x3b8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7c      	ldr	r2, [pc, #496]	@ (8002d9c <DMA_Init+0x494>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f000 8088 	beq.w	8002cc0 <DMA_Init+0x3b8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7a      	ldr	r2, [pc, #488]	@ (8002da0 <DMA_Init+0x498>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	f000 8082 	beq.w	8002cc0 <DMA_Init+0x3b8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a78      	ldr	r2, [pc, #480]	@ (8002da4 <DMA_Init+0x49c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d07c      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a77      	ldr	r2, [pc, #476]	@ (8002da8 <DMA_Init+0x4a0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d077      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a75      	ldr	r2, [pc, #468]	@ (8002dac <DMA_Init+0x4a4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d072      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a74      	ldr	r2, [pc, #464]	@ (8002db0 <DMA_Init+0x4a8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d06d      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a72      	ldr	r2, [pc, #456]	@ (8002db4 <DMA_Init+0x4ac>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d068      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a71      	ldr	r2, [pc, #452]	@ (8002db8 <DMA_Init+0x4b0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d063      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6f      	ldr	r2, [pc, #444]	@ (8002dbc <DMA_Init+0x4b4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d05e      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc0 <DMA_Init+0x4b8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d059      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6c      	ldr	r2, [pc, #432]	@ (8002dc4 <DMA_Init+0x4bc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d054      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6b      	ldr	r2, [pc, #428]	@ (8002dc8 <DMA_Init+0x4c0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04f      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a69      	ldr	r2, [pc, #420]	@ (8002dcc <DMA_Init+0x4c4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04a      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a68      	ldr	r2, [pc, #416]	@ (8002dd0 <DMA_Init+0x4c8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d045      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a66      	ldr	r2, [pc, #408]	@ (8002dd4 <DMA_Init+0x4cc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d040      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a65      	ldr	r2, [pc, #404]	@ (8002dd8 <DMA_Init+0x4d0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d03b      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a63      	ldr	r2, [pc, #396]	@ (8002ddc <DMA_Init+0x4d4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d036      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a62      	ldr	r2, [pc, #392]	@ (8002de0 <DMA_Init+0x4d8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d031      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a60      	ldr	r2, [pc, #384]	@ (8002de4 <DMA_Init+0x4dc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02c      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a5f      	ldr	r2, [pc, #380]	@ (8002de8 <DMA_Init+0x4e0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d027      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5d      	ldr	r2, [pc, #372]	@ (8002dec <DMA_Init+0x4e4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d022      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002df0 <DMA_Init+0x4e8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d01d      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5a      	ldr	r2, [pc, #360]	@ (8002df4 <DMA_Init+0x4ec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d018      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a59      	ldr	r2, [pc, #356]	@ (8002df8 <DMA_Init+0x4f0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a57      	ldr	r2, [pc, #348]	@ (8002dfc <DMA_Init+0x4f4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00e      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a56      	ldr	r2, [pc, #344]	@ (8002e00 <DMA_Init+0x4f8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a54      	ldr	r2, [pc, #336]	@ (8002e04 <DMA_Init+0x4fc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <DMA_Init+0x3b8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a53      	ldr	r2, [pc, #332]	@ (8002e08 <DMA_Init+0x500>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <DMA_Init+0x3bc>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <DMA_Init+0x3be>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e008      	b.n	8002ce6 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cdc:	d103      	bne.n	8002ce6 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ce4:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cf6:	4b45      	ldr	r3, [pc, #276]	@ (8002e0c <DMA_Init+0x504>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2a      	ldr	r2, [pc, #168]	@ (8002dbc <DMA_Init+0x4b4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d022      	beq.n	8002d5c <DMA_Init+0x454>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a29      	ldr	r2, [pc, #164]	@ (8002dc0 <DMA_Init+0x4b8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01d      	beq.n	8002d5c <DMA_Init+0x454>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <DMA_Init+0x4bc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d018      	beq.n	8002d5c <DMA_Init+0x454>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <DMA_Init+0x4c0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <DMA_Init+0x454>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a30      	ldr	r2, [pc, #192]	@ (8002dfc <DMA_Init+0x4f4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00e      	beq.n	8002d5c <DMA_Init+0x454>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2f      	ldr	r2, [pc, #188]	@ (8002e00 <DMA_Init+0x4f8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d009      	beq.n	8002d5c <DMA_Init+0x454>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e04 <DMA_Init+0x4fc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <DMA_Init+0x454>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2c      	ldr	r2, [pc, #176]	@ (8002e08 <DMA_Init+0x500>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d101      	bne.n	8002d60 <DMA_Init+0x458>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <DMA_Init+0x45a>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40020050 	.word	0x40020050
 8002d90:	50020050 	.word	0x50020050
 8002d94:	400200d0 	.word	0x400200d0
 8002d98:	500200d0 	.word	0x500200d0
 8002d9c:	40020150 	.word	0x40020150
 8002da0:	50020150 	.word	0x50020150
 8002da4:	400201d0 	.word	0x400201d0
 8002da8:	500201d0 	.word	0x500201d0
 8002dac:	40020250 	.word	0x40020250
 8002db0:	50020250 	.word	0x50020250
 8002db4:	400202d0 	.word	0x400202d0
 8002db8:	500202d0 	.word	0x500202d0
 8002dbc:	40020350 	.word	0x40020350
 8002dc0:	50020350 	.word	0x50020350
 8002dc4:	400203d0 	.word	0x400203d0
 8002dc8:	500203d0 	.word	0x500203d0
 8002dcc:	40021050 	.word	0x40021050
 8002dd0:	50021050 	.word	0x50021050
 8002dd4:	400210d0 	.word	0x400210d0
 8002dd8:	500210d0 	.word	0x500210d0
 8002ddc:	40021150 	.word	0x40021150
 8002de0:	50021150 	.word	0x50021150
 8002de4:	400211d0 	.word	0x400211d0
 8002de8:	500211d0 	.word	0x500211d0
 8002dec:	40021250 	.word	0x40021250
 8002df0:	50021250 	.word	0x50021250
 8002df4:	400212d0 	.word	0x400212d0
 8002df8:	500212d0 	.word	0x500212d0
 8002dfc:	40021350 	.word	0x40021350
 8002e00:	50021350 	.word	0x50021350
 8002e04:	400213d0 	.word	0x400213d0
 8002e08:	500213d0 	.word	0x500213d0
 8002e0c:	3cc02100 	.word	0x3cc02100

08002e10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e1e:	e136      	b.n	800308e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8128 	beq.w	8003088 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x38>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b12      	cmp	r3, #18
 8002e46:	d125      	bne.n	8002e94 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f003 020f 	and.w	r2, r3, #15
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	6979      	ldr	r1, [r7, #20]
 8002e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d00b      	beq.n	8002ee8 <HAL_GPIO_Init+0xd8>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d007      	beq.n	8002ee8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002edc:	2b11      	cmp	r3, #17
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b12      	cmp	r3, #18
 8002ee6:	d130      	bne.n	8002f4a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1e:	2201      	movs	r2, #1
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0201 	and.w	r2, r3, #1
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d017      	beq.n	8002f82 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4013      	ands	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d07c      	beq.n	8003088 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002f8e:	4a47      	ldr	r2, [pc, #284]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	3318      	adds	r3, #24
 8002f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0a9a      	lsrs	r2, r3, #10
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80030b0 <HAL_GPIO_Init+0x2a0>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	f002 0203 	and.w	r2, r2, #3
 8002fc0:	00d2      	lsls	r2, r2, #3
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002fca:	4938      	ldr	r1, [pc, #224]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3318      	adds	r3, #24
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002fd8:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003002:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4013      	ands	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003026:	4a21      	ldr	r2, [pc, #132]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800302c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003032:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	43db      	mvns	r3, r3
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4013      	ands	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003052:	4a16      	ldr	r2, [pc, #88]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800305a:	4b14      	ldr	r3, [pc, #80]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 800305c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003060:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4013      	ands	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003080:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <HAL_GPIO_Init+0x29c>)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3301      	adds	r3, #1
 800308c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f aec1 	bne.w	8002e20 <HAL_GPIO_Init+0x10>
  }
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	44022000 	.word	0x44022000
 80030b0:	002f7f7f 	.word	0x002f7f7f

080030b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e08d      	b.n	80031e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fefa 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	@ 0x24
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003104:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003114:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	e006      	b.n	800313c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800313a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d108      	bne.n	8003156 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	e007      	b.n	8003166 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69d9      	ldr	r1, [r3, #28]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b20      	cmp	r3, #32
 8003210:	f040 80f9 	bne.w	8003406 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_I2C_Mem_Write+0x34>
 800321a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0ed      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_I2C_Mem_Write+0x4e>
 8003236:	2302      	movs	r3, #2
 8003238:	e0e6      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003242:	f7fe fe8b 	bl	8001f5c <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f955 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0d1      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2221      	movs	r2, #33	@ 0x21
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800328c:	88f8      	ldrh	r0, [r7, #6]
 800328e:	893a      	ldrh	r2, [r7, #8]
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4603      	mov	r3, r0
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f8b9 	bl	8003414 <I2C_RequestMemoryWrite>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0a9      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2bff      	cmp	r3, #255	@ 0xff
 80032bc:	d90e      	bls.n	80032dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	22ff      	movs	r2, #255	@ 0xff
 80032c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	8979      	ldrh	r1, [r7, #10]
 80032cc:	2300      	movs	r3, #0
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fad9 	bl	800388c <I2C_TransferConfig>
 80032da:	e00f      	b.n	80032fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	8979      	ldrh	r1, [r7, #10]
 80032ee:	2300      	movs	r3, #0
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fac8 	bl	800388c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f958 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e07b      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d034      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x1c8>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	d130      	bne.n	80033b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	2200      	movs	r2, #0
 800335a:	2180      	movs	r1, #128	@ 0x80
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f8d1 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e04d      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2bff      	cmp	r3, #255	@ 0xff
 8003374:	d90e      	bls.n	8003394 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	22ff      	movs	r2, #255	@ 0xff
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	b2da      	uxtb	r2, r3
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fa7d 	bl	800388c <I2C_TransferConfig>
 8003392:	e00f      	b.n	80033b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	2300      	movs	r3, #0
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa6c 	bl	800388c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d19e      	bne.n	80032fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f93e 	bl	8003644 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01a      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2220      	movs	r2, #32
 80033d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <HAL_I2C_Mem_Write+0x224>)
 80033e6:	400b      	ands	r3, r1
 80033e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	fe00e800 	.word	0xfe00e800

08003414 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	8979      	ldrh	r1, [r7, #10]
 8003434:	4b20      	ldr	r3, [pc, #128]	@ (80034b8 <I2C_RequestMemoryWrite+0xa4>)
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fa25 	bl	800388c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f8b5 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e02c      	b.n	80034b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	629a      	str	r2, [r3, #40]	@ 0x28
 8003466:	e015      	b.n	8003494 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003468:	893b      	ldrh	r3, [r7, #8]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	b29b      	uxth	r3, r3
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	69b9      	ldr	r1, [r7, #24]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f89b 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e012      	b.n	80034b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800348a:	893b      	ldrh	r3, [r7, #8]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2200      	movs	r2, #0
 800349c:	2180      	movs	r1, #128	@ 0x80
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f830 	bl	8003504 <I2C_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	80002000 	.word	0x80002000

080034bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d103      	bne.n	80034da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d007      	beq.n	80034f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	619a      	str	r2, [r3, #24]
  }
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003514:	e03b      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f8d6 	bl	80036cc <I2C_IsErrorOccurred>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d02d      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fd13 	bl	8001f5c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d122      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	429a      	cmp	r2, r3
 8003564:	d113      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d0b4      	beq.n	8003516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c2:	e033      	b.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f87f 	bl	80036cc <I2C_IsErrorOccurred>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e031      	b.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d025      	beq.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7fe fcbc 	bl	8001f5c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11a      	bne.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d013      	beq.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e007      	b.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d1c4      	bne.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003650:	e02f      	b.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f838 	bl	80036cc <I2C_IsErrorOccurred>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02d      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7fe fc79 	bl	8001f5c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11a      	bne.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b20      	cmp	r3, #32
 8003688:	d013      	beq.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d1c8      	bne.n	8003652 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d068      	beq.n	80037ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2210      	movs	r2, #16
 80036fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003700:	e049      	b.n	8003796 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d045      	beq.n	8003796 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fc27 	bl	8001f5c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_IsErrorOccurred+0x54>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d13a      	bne.n	8003796 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003732:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003742:	d121      	bne.n	8003788 <I2C_IsErrorOccurred+0xbc>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800374a:	d01d      	beq.n	8003788 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b20      	cmp	r3, #32
 8003750:	d01a      	beq.n	8003788 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003760:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003762:	f7fe fbfb 	bl	8001f5c <HAL_GetTick>
 8003766:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003768:	e00e      	b.n	8003788 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800376a:	f7fe fbf7 	bl	8001f5c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b19      	cmp	r3, #25
 8003776:	d907      	bls.n	8003788 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f043 0320 	orr.w	r3, r3, #32
 800377e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003786:	e006      	b.n	8003796 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d1e9      	bne.n	800376a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d003      	beq.n	80037ac <I2C_IsErrorOccurred+0xe0>
 80037a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0aa      	beq.n	8003702 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2220      	movs	r2, #32
 80037ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800380e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003830:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01c      	beq.n	800387a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fe3b 	bl	80034bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <I2C_IsErrorOccurred+0x1bc>)
 8003852:	400b      	ands	r3, r1
 8003854:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	431a      	orrs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800387a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800387e:	4618      	mov	r0, r3
 8003880:	3728      	adds	r7, #40	@ 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	fe00e800 	.word	0xfe00e800

0800388c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	817b      	strh	r3, [r7, #10]
 800389a:	4613      	mov	r3, r2
 800389c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a4:	7a7b      	ldrb	r3, [r7, #9]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ac:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038ba:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	0d5b      	lsrs	r3, r3, #21
 80038c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80038ca:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <I2C_TransferConfig+0x60>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	43db      	mvns	r3, r3
 80038d0:	ea02 0103 	and.w	r1, r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	03ff63ff 	.word	0x03ff63ff

080038f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	d138      	bne.n	8003978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003910:	2302      	movs	r3, #2
 8003912:	e032      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	@ 0x24
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	d139      	bne.n	8003a10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e033      	b.n	8003a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2224      	movs	r2, #36	@ 0x24
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e007      	b.n	8003a4e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0204 	bic.w	r2, r3, #4
 8003a46:	4905      	ldr	r1, [pc, #20]	@ (8003a5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40030400 	.word	0x40030400

08003a60 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <HAL_ICACHE_Enable+0x1c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <HAL_ICACHE_Enable+0x1c>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40030400 	.word	0x40030400

08003a80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0f3      	b.n	8003c7a <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd fefe 	bl	80018a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f008 fd68 	bl	800c58e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7c1a      	ldrb	r2, [r3, #16]
 8003ac6:	f88d 2000 	strb.w	r2, [sp]
 8003aca:	3304      	adds	r3, #4
 8003acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ace:	f008 fd40 	bl	800c552 <USB_CoreInit>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0ca      	b.n	8003c7a <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f008 fd64 	bl	800c5b8 <USB_SetCurrentMode>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0bb      	b.n	8003c7a <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
 8003b06:	e03f      	b.n	8003b88 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	3315      	adds	r3, #21
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3317      	adds	r3, #23
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	440b      	add	r3, r1
 8003b52:	3324      	adds	r3, #36	@ 0x24
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	3328      	adds	r3, #40	@ 0x28
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	3301      	adds	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d3ba      	bcc.n	8003b08 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
 8003b96:	e044      	b.n	8003c22 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	440b      	add	r3, r1
 8003bbc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	440b      	add	r3, r1
 8003bd2:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	440b      	add	r3, r1
 8003c14:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	791b      	ldrb	r3, [r3, #4]
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d3b5      	bcc.n	8003b98 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7c1a      	ldrb	r2, [r3, #16]
 8003c34:	f88d 2000 	strb.w	r2, [sp]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c3c:	f008 fcdf 	bl	800c5fe <USB_DevInit>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e013      	b.n	8003c7a <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7b1b      	ldrb	r3, [r3, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f80a 	bl	8003c82 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f008 fce6 	bl	800c644 <USB_DevDisconnect>

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	f043 0202 	orr.w	r2, r3, #2
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cd6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	44020800 	.word	0x44020800

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f000 bc28 	b.w	800454c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfc:	4b94      	ldr	r3, [pc, #592]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f003 0318 	and.w	r3, r3, #24
 8003d04:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003d06:	4b92      	ldr	r3, [pc, #584]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d05b      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b18      	cmp	r3, #24
 8003d26:	d114      	bne.n	8003d52 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d111      	bne.n	8003d52 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f000 bc08 	b.w	800454c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003d3c:	4b84      	ldr	r3, [pc, #528]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	4981      	ldr	r1, [pc, #516]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003d50:	e040      	b.n	8003dd4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d023      	beq.n	8003da2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fe f8f9 	bl	8001f5c <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003d6e:	f7fe f8f5 	bl	8001f5c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e3e5      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d80:	4b73      	ldr	r3, [pc, #460]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003d8c:	4b70      	ldr	r3, [pc, #448]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	496d      	ldr	r1, [pc, #436]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	618b      	str	r3, [r1, #24]
 8003da0:	e018      	b.n	8003dd4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003da2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6a      	ldr	r2, [pc, #424]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe f8d5 	bl	8001f5c <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003db6:	f7fe f8d1 	bl	8001f5c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e3c1      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003dc8:	4b61      	ldr	r3, [pc, #388]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a0 	beq.w	8003f22 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_OscConfig+0x10c>
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b18      	cmp	r3, #24
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f040 8092 	bne.w	8003f22 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e3a4      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCC_OscConfig+0x132>
 8003e0c:	4b50      	ldr	r3, [pc, #320]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a4f      	ldr	r2, [pc, #316]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e058      	b.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d112      	bne.n	8003e48 <HAL_RCC_OscConfig+0x160>
 8003e22:	4b4b      	ldr	r3, [pc, #300]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4a      	ldr	r2, [pc, #296]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b48      	ldr	r3, [pc, #288]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a47      	ldr	r2, [pc, #284]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b45      	ldr	r3, [pc, #276]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a44      	ldr	r2, [pc, #272]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e041      	b.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_OscConfig+0x190>
 8003e52:	4b3f      	ldr	r3, [pc, #252]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a3e      	ldr	r2, [pc, #248]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3b      	ldr	r2, [pc, #236]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b39      	ldr	r3, [pc, #228]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a38      	ldr	r2, [pc, #224]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e029      	b.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003e80:	d112      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1c0>
 8003e82:	4b33      	ldr	r3, [pc, #204]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a32      	ldr	r2, [pc, #200]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b30      	ldr	r3, [pc, #192]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2f      	ldr	r2, [pc, #188]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e011      	b.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
 8003ea8:	4b29      	ldr	r3, [pc, #164]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a28      	ldr	r2, [pc, #160]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b26      	ldr	r3, [pc, #152]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b23      	ldr	r3, [pc, #140]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003ec6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f842 	bl	8001f5c <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003edc:	f7fe f83e 	bl	8001f5c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e32e      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eee:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x1f4>
 8003efa:	e012      	b.n	8003f22 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f82e 	bl	8001f5c <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f82a 	bl	8001f5c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	@ 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e31a      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f16:	4b0e      	ldr	r3, [pc, #56]	@ (8003f50 <HAL_RCC_OscConfig+0x268>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 809a 	beq.w	8004064 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_RCC_OscConfig+0x25a>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b18      	cmp	r3, #24
 8003f3a:	d149      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d146      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e2fe      	b.n	800454c <HAL_RCC_OscConfig+0x864>
 8003f4e:	bf00      	nop
 8003f50:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003f5a:	4b9a      	ldr	r3, [pc, #616]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0218 	and.w	r2, r3, #24
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d014      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003f6a:	4b96      	ldr	r3, [pc, #600]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 0218 	bic.w	r2, r3, #24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4993      	ldr	r1, [pc, #588]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003f7c:	f000 fdd0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f80:	4b91      	ldr	r3, [pc, #580]	@ (80041c8 <HAL_RCC_OscConfig+0x4e0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd fce9 	bl	800195c <HAL_InitTick>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e2db      	b.n	800454c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd ffe2 	bl	8001f5c <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f9c:	f7fd ffde 	bl	8001f5c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e2ce      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fae:	4b85      	ldr	r3, [pc, #532]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003fba:	4b82      	ldr	r3, [pc, #520]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	497e      	ldr	r1, [pc, #504]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003fce:	e049      	b.n	8004064 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02c      	beq.n	8004032 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003fd8:	4b7a      	ldr	r3, [pc, #488]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 0218 	bic.w	r2, r3, #24
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	4977      	ldr	r1, [pc, #476]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003fea:	4b76      	ldr	r3, [pc, #472]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a75      	ldr	r2, [pc, #468]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7fd ffb1 	bl	8001f5c <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003ffe:	f7fd ffad 	bl	8001f5c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e29d      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004010:	4b6c      	ldr	r3, [pc, #432]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800401c:	4b69      	ldr	r3, [pc, #420]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	4966      	ldr	r1, [pc, #408]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	610b      	str	r3, [r1, #16]
 8004030:	e018      	b.n	8004064 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004032:	4b64      	ldr	r3, [pc, #400]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a63      	ldr	r2, [pc, #396]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd ff8d 	bl	8001f5c <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004046:	f7fd ff89 	bl	8001f5c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e279      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004058:	4b5a      	ldr	r3, [pc, #360]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d03c      	beq.n	80040ea <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004078:	4b52      	ldr	r3, [pc, #328]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800407a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800407e:	4a51      	ldr	r2, [pc, #324]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004084:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7fd ff68 	bl	8001f5c <HAL_GetTick>
 800408c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004090:	f7fd ff64 	bl	8001f5c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e254      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80040a2:	4b48      	ldr	r3, [pc, #288]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80040a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <HAL_RCC_OscConfig+0x3a8>
 80040b0:	e01b      	b.n	80040ea <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b2:	4b44      	ldr	r3, [pc, #272]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80040b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040b8:	4a42      	ldr	r2, [pc, #264]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80040ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fd ff4b 	bl	8001f5c <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80040ca:	f7fd ff47 	bl	8001f5c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e237      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80040dc:	4b39      	ldr	r3, [pc, #228]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80040de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ef      	bne.n	80040ca <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80d2 	beq.w	800429c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80040f8:	4b34      	ldr	r3, [pc, #208]	@ (80041cc <HAL_RCC_OscConfig+0x4e4>)
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d118      	bne.n	8004136 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004104:	4b31      	ldr	r3, [pc, #196]	@ (80041cc <HAL_RCC_OscConfig+0x4e4>)
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	4a30      	ldr	r2, [pc, #192]	@ (80041cc <HAL_RCC_OscConfig+0x4e4>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004110:	f7fd ff24 	bl	8001f5c <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7fd ff20 	bl	8001f5c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e210      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800412a:	4b28      	ldr	r3, [pc, #160]	@ (80041cc <HAL_RCC_OscConfig+0x4e4>)
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d108      	bne.n	8004150 <HAL_RCC_OscConfig+0x468>
 800413e:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004144:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800414e:	e074      	b.n	800423a <HAL_RCC_OscConfig+0x552>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d118      	bne.n	800418a <HAL_RCC_OscConfig+0x4a2>
 8004158:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800415a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800415e:	4a19      	ldr	r2, [pc, #100]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004168:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800416a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800416e:	4a15      	ldr	r2, [pc, #84]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004174:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004178:	4b12      	ldr	r3, [pc, #72]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800417a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800417e:	4a11      	ldr	r2, [pc, #68]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004188:	e057      	b.n	800423a <HAL_RCC_OscConfig+0x552>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d11e      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4e8>
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 8004194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004198:	4a0a      	ldr	r2, [pc, #40]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041a2:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80041a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041a8:	4a06      	ldr	r2, [pc, #24]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80041aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041b2:	4b04      	ldr	r3, [pc, #16]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80041b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041b8:	4a02      	ldr	r2, [pc, #8]	@ (80041c4 <HAL_RCC_OscConfig+0x4dc>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041c2:	e03a      	b.n	800423a <HAL_RCC_OscConfig+0x552>
 80041c4:	44020c00 	.word	0x44020c00
 80041c8:	20000004 	.word	0x20000004
 80041cc:	44020800 	.word	0x44020800
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b85      	cmp	r3, #133	@ 0x85
 80041d6:	d118      	bne.n	800420a <HAL_RCC_OscConfig+0x522>
 80041d8:	4ba2      	ldr	r3, [pc, #648]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80041da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041de:	4aa1      	ldr	r2, [pc, #644]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80041e0:	f043 0304 	orr.w	r3, r3, #4
 80041e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041e8:	4b9e      	ldr	r3, [pc, #632]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80041ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ee:	4a9d      	ldr	r2, [pc, #628]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80041f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041f8:	4b9a      	ldr	r3, [pc, #616]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80041fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041fe:	4a99      	ldr	r2, [pc, #612]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004208:	e017      	b.n	800423a <HAL_RCC_OscConfig+0x552>
 800420a:	4b96      	ldr	r3, [pc, #600]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 800420c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004210:	4a94      	ldr	r2, [pc, #592]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800421a:	4b92      	ldr	r3, [pc, #584]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 800421c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004220:	4a90      	ldr	r2, [pc, #576]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800422a:	4b8e      	ldr	r3, [pc, #568]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 800422c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004230:	4a8c      	ldr	r2, [pc, #560]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004236:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd fe8b 	bl	8001f5c <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004248:	e00a      	b.n	8004260 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fd fe87 	bl	8001f5c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e175      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004260:	4b80      	ldr	r3, [pc, #512]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ed      	beq.n	800424a <HAL_RCC_OscConfig+0x562>
 800426e:	e015      	b.n	800429c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fd fe74 	bl	8001f5c <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fd fe70 	bl	8001f5c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e15e      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800428e:	4b75      	ldr	r3, [pc, #468]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ed      	bne.n	8004278 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d036      	beq.n	8004316 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80042b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fd fe4e 	bl	8001f5c <HAL_GetTick>
 80042c0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80042c4:	f7fd fe4a 	bl	8001f5c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e13a      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80042d6:	4b63      	ldr	r3, [pc, #396]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x5dc>
 80042e2:	e018      	b.n	8004316 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042e4:	4b5f      	ldr	r3, [pc, #380]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80042ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fd fe34 	bl	8001f5c <HAL_GetTick>
 80042f4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80042f8:	f7fd fe30 	bl	8001f5c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e120      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800430a:	4b56      	ldr	r3, [pc, #344]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8115 	beq.w	800454a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b18      	cmp	r3, #24
 8004324:	f000 80af 	beq.w	8004486 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	2b02      	cmp	r3, #2
 800432e:	f040 8086 	bne.w	800443e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004332:	4b4c      	ldr	r3, [pc, #304]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4b      	ldr	r2, [pc, #300]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004338:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800433c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fd fe0d 	bl	8001f5c <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004346:	f7fd fe09 	bl	8001f5c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0f9      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004358:	4b42      	ldr	r3, [pc, #264]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004364:	4b3f      	ldr	r3, [pc, #252]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800436c:	f023 0303 	bic.w	r3, r3, #3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004378:	0212      	lsls	r2, r2, #8
 800437a:	430a      	orrs	r2, r1
 800437c:	4939      	ldr	r1, [pc, #228]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	628b      	str	r3, [r1, #40]	@ 0x28
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004386:	3b01      	subs	r3, #1
 8004388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	3b01      	subs	r3, #1
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	b29b      	uxth	r3, r3
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	3b01      	subs	r3, #1
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043b2:	492c      	ldr	r1, [pc, #176]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80043b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	4a29      	ldr	r2, [pc, #164]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c8:	4a26      	ldr	r2, [pc, #152]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80043ce:	4b25      	ldr	r3, [pc, #148]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	4a24      	ldr	r2, [pc, #144]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043d4:	f043 0310 	orr.w	r3, r3, #16
 80043d8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80043da:	4b22      	ldr	r3, [pc, #136]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	f023 020c 	bic.w	r2, r3, #12
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	491f      	ldr	r1, [pc, #124]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	f023 0220 	bic.w	r2, r3, #32
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f8:	491a      	ldr	r1, [pc, #104]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043fe:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004408:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800440a:	4b16      	ldr	r3, [pc, #88]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a15      	ldr	r2, [pc, #84]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004410:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fd fda1 	bl	8001f5c <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800441e:	f7fd fd9d 	bl	8001f5c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e08d      	b.n	800454c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x736>
 800443c:	e085      	b.n	800454a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800443e:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <HAL_RCC_OscConfig+0x77c>)
 8004444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fd fd87 	bl	8001f5c <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004452:	f7fd fd83 	bl	8001f5c <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d903      	bls.n	8004468 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e073      	b.n	800454c <HAL_RCC_OscConfig+0x864>
 8004464:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004468:	4b3a      	ldr	r3, [pc, #232]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ee      	bne.n	8004452 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004474:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	4a36      	ldr	r2, [pc, #216]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 800447a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	6293      	str	r3, [r2, #40]	@ 0x28
 8004484:	e061      	b.n	800454a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004486:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800448c:	4b31      	ldr	r3, [pc, #196]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 800448e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004490:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	2b01      	cmp	r3, #1
 8004498:	d031      	beq.n	80044fe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0203 	and.w	r2, r3, #3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d12a      	bne.n	80044fe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d122      	bne.n	80044fe <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d11a      	bne.n	80044fe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	0a5b      	lsrs	r3, r3, #9
 80044cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d111      	bne.n	80044fe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d108      	bne.n	80044fe <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	0e1b      	lsrs	r3, r3, #24
 80044f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e024      	b.n	800454c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004502:	4b14      	ldr	r3, [pc, #80]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	08db      	lsrs	r3, r3, #3
 8004508:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004510:	429a      	cmp	r2, r3
 8004512:	d01a      	beq.n	800454a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004514:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 8004516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004518:	4a0e      	ldr	r2, [pc, #56]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fd1c 	bl	8001f5c <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004526:	bf00      	nop
 8004528:	f7fd fd18 	bl	8001f5c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4293      	cmp	r3, r2
 8004532:	d0f9      	beq.n	8004528 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004538:	4a06      	ldr	r2, [pc, #24]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800453e:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	4a04      	ldr	r2, [pc, #16]	@ (8004554 <HAL_RCC_OscConfig+0x86c>)
 8004544:	f043 0310 	orr.w	r3, r3, #16
 8004548:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	44020c00 	.word	0x44020c00

08004558 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e19e      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b83      	ldr	r3, [pc, #524]	@ (800477c <HAL_RCC_ClockConfig+0x224>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d910      	bls.n	800459c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b80      	ldr	r3, [pc, #512]	@ (800477c <HAL_RCC_ClockConfig+0x224>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 020f 	bic.w	r2, r3, #15
 8004582:	497e      	ldr	r1, [pc, #504]	@ (800477c <HAL_RCC_ClockConfig+0x224>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b7c      	ldr	r3, [pc, #496]	@ (800477c <HAL_RCC_ClockConfig+0x224>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e186      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	4b74      	ldr	r3, [pc, #464]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d909      	bls.n	80045ce <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80045ba:	4b71      	ldr	r3, [pc, #452]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	496d      	ldr	r1, [pc, #436]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	4b68      	ldr	r3, [pc, #416]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d909      	bls.n	8004600 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80045ec:	4b64      	ldr	r3, [pc, #400]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	4961      	ldr	r1, [pc, #388]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	4b5b      	ldr	r3, [pc, #364]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004618:	429a      	cmp	r2, r3
 800461a:	d908      	bls.n	800462e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800461c:	4b58      	ldr	r3, [pc, #352]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4955      	ldr	r1, [pc, #340]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 800462a:	4313      	orrs	r3, r2
 800462c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d010      	beq.n	800465c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	4b50      	ldr	r3, [pc, #320]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	429a      	cmp	r2, r3
 8004648:	d908      	bls.n	800465c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800464a:	4b4d      	ldr	r3, [pc, #308]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	494a      	ldr	r1, [pc, #296]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 8004658:	4313      	orrs	r3, r2
 800465a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8093 	beq.w	8004790 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004672:	4b43      	ldr	r3, [pc, #268]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d121      	bne.n	80046c2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e113      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800468a:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d115      	bne.n	80046c2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e107      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80046a2:	4b37      	ldr	r3, [pc, #220]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0fb      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b2:	4b33      	ldr	r3, [pc, #204]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0f3      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80046c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	492c      	ldr	r1, [pc, #176]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fd fc42 	bl	8001f5c <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d112      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fd fc3a 	bl	8001f5c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0d7      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046fa:	4b21      	ldr	r3, [pc, #132]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 0318 	and.w	r3, r3, #24
 8004702:	2b18      	cmp	r3, #24
 8004704:	d1ee      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x18c>
 8004706:	e043      	b.n	8004790 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d112      	bne.n	8004736 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004710:	e00a      	b.n	8004728 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004712:	f7fd fc23 	bl	8001f5c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0c0      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004728:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f003 0318 	and.w	r3, r3, #24
 8004730:	2b10      	cmp	r3, #16
 8004732:	d1ee      	bne.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
 8004734:	e02c      	b.n	8004790 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d122      	bne.n	8004784 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fd fc0c 	bl	8001f5c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0a9      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_RCC_ClockConfig+0x228>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 0318 	and.w	r3, r3, #24
 800475e:	2b08      	cmp	r3, #8
 8004760:	d1ee      	bne.n	8004740 <HAL_RCC_ClockConfig+0x1e8>
 8004762:	e015      	b.n	8004790 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	f7fd fbfa 	bl	8001f5c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d906      	bls.n	8004784 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e097      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
 800477a:	bf00      	nop
 800477c:	40022000 	.word	0x40022000
 8004780:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004784:	4b4b      	ldr	r3, [pc, #300]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f003 0318 	and.w	r3, r3, #24
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e9      	bne.n	8004764 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	4b44      	ldr	r3, [pc, #272]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d208      	bcs.n	80047be <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80047ac:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f023 020f 	bic.w	r2, r3, #15
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	493e      	ldr	r1, [pc, #248]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047be:	4b3e      	ldr	r3, [pc, #248]	@ (80048b8 <HAL_RCC_ClockConfig+0x360>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d210      	bcs.n	80047ee <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047cc:	4b3a      	ldr	r3, [pc, #232]	@ (80048b8 <HAL_RCC_ClockConfig+0x360>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f023 020f 	bic.w	r2, r3, #15
 80047d4:	4938      	ldr	r1, [pc, #224]	@ (80048b8 <HAL_RCC_ClockConfig+0x360>)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047dc:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <HAL_RCC_ClockConfig+0x360>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e05d      	b.n	80048aa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d010      	beq.n	800481c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004806:	429a      	cmp	r2, r3
 8004808:	d208      	bcs.n	800481c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800480a:	4b2a      	ldr	r3, [pc, #168]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	4927      	ldr	r1, [pc, #156]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d012      	beq.n	800484e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	4b21      	ldr	r3, [pc, #132]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004836:	429a      	cmp	r2, r3
 8004838:	d209      	bcs.n	800484e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800483a:	4b1e      	ldr	r3, [pc, #120]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	491a      	ldr	r1, [pc, #104]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004868:	429a      	cmp	r2, r3
 800486a:	d209      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800486c:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	490e      	ldr	r1, [pc, #56]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004880:	f000 f822 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	490b      	ldr	r1, [pc, #44]	@ (80048bc <HAL_RCC_ClockConfig+0x364>)
 8004890:	5ccb      	ldrb	r3, [r1, r3]
 8004892:	fa22 f303 	lsr.w	r3, r2, r3
 8004896:	4a0a      	ldr	r2, [pc, #40]	@ (80048c0 <HAL_RCC_ClockConfig+0x368>)
 8004898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800489a:	4b0a      	ldr	r3, [pc, #40]	@ (80048c4 <HAL_RCC_ClockConfig+0x36c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd f85c 	bl	800195c <HAL_InitTick>
 80048a4:	4603      	mov	r3, r0
 80048a6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80048a8:	7afb      	ldrb	r3, [r7, #11]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	44020c00 	.word	0x44020c00
 80048b8:	40022000 	.word	0x40022000
 80048bc:	0800eab4 	.word	0x0800eab4
 80048c0:	20000000 	.word	0x20000000
 80048c4:	20000004 	.word	0x20000004

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	@ 0x24
 80048cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80048ce:	4b8c      	ldr	r3, [pc, #560]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 0318 	and.w	r3, r3, #24
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d102      	bne.n	80048e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80048da:	4b8a      	ldr	r3, [pc, #552]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x23c>)
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	e107      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048e0:	4b87      	ldr	r3, [pc, #540]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0318 	and.w	r3, r3, #24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d112      	bne.n	8004912 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80048ec:	4b84      	ldr	r3, [pc, #528]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048f8:	4b81      	ldr	r3, [pc, #516]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	4a81      	ldr	r2, [pc, #516]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x240>)
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	e0f1      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800490c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x240>)
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e0ee      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004912:	4b7b      	ldr	r3, [pc, #492]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0318 	and.w	r3, r3, #24
 800491a:	2b10      	cmp	r3, #16
 800491c:	d102      	bne.n	8004924 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800491e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x244>)
 8004920:	61fb      	str	r3, [r7, #28]
 8004922:	e0e5      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004924:	4b76      	ldr	r3, [pc, #472]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 0318 	and.w	r3, r3, #24
 800492c:	2b18      	cmp	r3, #24
 800492e:	f040 80dd 	bne.w	8004aec <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004932:	4b73      	ldr	r3, [pc, #460]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800493c:	4b70      	ldr	r3, [pc, #448]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004946:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004948:	4b6d      	ldr	r3, [pc, #436]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004954:	4b6a      	ldr	r3, [pc, #424]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80b7 	beq.w	8004ae6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d003      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0xbe>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d056      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x16a>
 8004984:	e077      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004986:	4b5e      	ldr	r3, [pc, #376]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02d      	beq.n	80049ee <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004992:	4b5b      	ldr	r3, [pc, #364]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	08db      	lsrs	r3, r3, #3
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	4a5a      	ldr	r2, [pc, #360]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x240>)
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049bc:	4b50      	ldr	r3, [pc, #320]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 80049be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80049cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80049d0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x248>
 80049d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80049dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80049ec:	e065      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004b14 <HAL_RCC_GetSysClockFreq+0x24c>
 80049fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a00:	4b3f      	ldr	r3, [pc, #252]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a10:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a14:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x248>
 8004a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004a30:	e043      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004b18 <HAL_RCC_GetSysClockFreq+0x250>
 8004a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a44:	4b2e      	ldr	r3, [pc, #184]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a54:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a58:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x248>
 8004a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004a74:	e021      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a80:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b1c <HAL_RCC_GetSysClockFreq+0x254>
 8004a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a88:	4b1d      	ldr	r3, [pc, #116]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a98:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a9c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004b10 <HAL_RCC_GetSysClockFreq+0x248>
 8004aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004aa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ab8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004aba:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x238>)
 8004abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abe:	0a5b      	lsrs	r3, r3, #9
 8004ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ad2:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ade:	ee17 3a90 	vmov	r3, s15
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e004      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	e001      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x240>)
 8004aee:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004af0:	69fb      	ldr	r3, [r7, #28]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3724      	adds	r7, #36	@ 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	44020c00 	.word	0x44020c00
 8004b04:	003d0900 	.word	0x003d0900
 8004b08:	03d09000 	.word	0x03d09000
 8004b0c:	017d7840 	.word	0x017d7840
 8004b10:	46000000 	.word	0x46000000
 8004b14:	4c742400 	.word	0x4c742400
 8004b18:	4bbebc20 	.word	0x4bbebc20
 8004b1c:	4a742400 	.word	0x4a742400

08004b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b24:	f7ff fed0 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004b2e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b32:	4907      	ldr	r1, [pc, #28]	@ (8004b50 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b34:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004b36:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a05      	ldr	r2, [pc, #20]	@ (8004b54 <HAL_RCC_GetHCLKFreq+0x34>)
 8004b40:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004b42:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <HAL_RCC_GetHCLKFreq+0x34>)
 8004b44:	681b      	ldr	r3, [r3, #0]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	44020c00 	.word	0x44020c00
 8004b50:	0800eab4 	.word	0x0800eab4
 8004b54:	20000000 	.word	0x20000000

08004b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004b5c:	f7ff ffe0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4904      	ldr	r1, [pc, #16]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b6e:	5ccb      	ldrb	r3, [r1, r3]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	44020c00 	.word	0x44020c00
 8004b80:	0800eac4 	.word	0x0800eac4

08004b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004b88:	f7ff ffca 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4904      	ldr	r1, [pc, #16]	@ (8004bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	44020c00 	.word	0x44020c00
 8004bac:	0800eac4 	.word	0x0800eac4

08004bb0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004bb4:	f7ff ffb4 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	0b1b      	lsrs	r3, r3, #12
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	44020c00 	.word	0x44020c00
 8004bd8:	0800eac4 	.word	0x0800eac4

08004bdc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	221f      	movs	r2, #31
 8004bea:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004bec:	4b15      	ldr	r3, [pc, #84]	@ (8004c44 <HAL_RCC_GetClockConfig+0x68>)
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f003 0203 	and.w	r2, r3, #3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004bf8:	4b12      	ldr	r3, [pc, #72]	@ (8004c44 <HAL_RCC_GetClockConfig+0x68>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c2a:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <HAL_RCC_GetClockConfig+0x6c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	601a      	str	r2, [r3, #0]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	44020c00 	.word	0x44020c00
 8004c48:	40022000 	.word	0x40022000

08004c4c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c50:	b0d6      	sub	sp, #344	@ 0x158
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c64:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004c70:	2500      	movs	r5, #0
 8004c72:	ea54 0305 	orrs.w	r3, r4, r5
 8004c76:	d00b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004c78:	4bcd      	ldr	r3, [pc, #820]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c7e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004c82:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	4ac9      	ldr	r2, [pc, #804]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f002 0801 	and.w	r8, r2, #1
 8004c9c:	f04f 0900 	mov.w	r9, #0
 8004ca0:	ea58 0309 	orrs.w	r3, r8, r9
 8004ca4:	d042      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004ca6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	d823      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004d01 	.word	0x08004d01
 8004cbc:	08004cd1 	.word	0x08004cd1
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004d01 	.word	0x08004d01
 8004cc8:	08004d01 	.word	0x08004d01
 8004ccc:	08004d01 	.word	0x08004d01
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f004 fe68 	bl	80099ac <RCCEx_PLL2_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8004ce2:	e00e      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ce4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ce8:	3330      	adds	r3, #48	@ 0x30
 8004cea:	4618      	mov	r0, r3
 8004cec:	f004 fef6 	bl	8009adc <RCCEx_PLL3_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8004cf6:	e004      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d02:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004d0a:	4ba9      	ldr	r3, [pc, #676]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d10:	f023 0107 	bic.w	r1, r3, #7
 8004d14:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	4aa5      	ldr	r2, [pc, #660]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d22:	e003      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004d28:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f002 0a02 	and.w	sl, r2, #2
 8004d38:	f04f 0b00 	mov.w	fp, #0
 8004d3c:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d40:	f000 8088 	beq.w	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004d44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4a:	2b28      	cmp	r3, #40	@ 0x28
 8004d4c:	d868      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004e29 	.word	0x08004e29
 8004d58:	08004e21 	.word	0x08004e21
 8004d5c:	08004e21 	.word	0x08004e21
 8004d60:	08004e21 	.word	0x08004e21
 8004d64:	08004e21 	.word	0x08004e21
 8004d68:	08004e21 	.word	0x08004e21
 8004d6c:	08004e21 	.word	0x08004e21
 8004d70:	08004e21 	.word	0x08004e21
 8004d74:	08004df9 	.word	0x08004df9
 8004d78:	08004e21 	.word	0x08004e21
 8004d7c:	08004e21 	.word	0x08004e21
 8004d80:	08004e21 	.word	0x08004e21
 8004d84:	08004e21 	.word	0x08004e21
 8004d88:	08004e21 	.word	0x08004e21
 8004d8c:	08004e21 	.word	0x08004e21
 8004d90:	08004e21 	.word	0x08004e21
 8004d94:	08004e0d 	.word	0x08004e0d
 8004d98:	08004e21 	.word	0x08004e21
 8004d9c:	08004e21 	.word	0x08004e21
 8004da0:	08004e21 	.word	0x08004e21
 8004da4:	08004e21 	.word	0x08004e21
 8004da8:	08004e21 	.word	0x08004e21
 8004dac:	08004e21 	.word	0x08004e21
 8004db0:	08004e21 	.word	0x08004e21
 8004db4:	08004e29 	.word	0x08004e29
 8004db8:	08004e21 	.word	0x08004e21
 8004dbc:	08004e21 	.word	0x08004e21
 8004dc0:	08004e21 	.word	0x08004e21
 8004dc4:	08004e21 	.word	0x08004e21
 8004dc8:	08004e21 	.word	0x08004e21
 8004dcc:	08004e21 	.word	0x08004e21
 8004dd0:	08004e21 	.word	0x08004e21
 8004dd4:	08004e29 	.word	0x08004e29
 8004dd8:	08004e21 	.word	0x08004e21
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e21 	.word	0x08004e21
 8004de8:	08004e21 	.word	0x08004e21
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004e29 	.word	0x08004e29
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004df8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f004 fdd4 	bl	80099ac <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8004e0a:	e00e      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e10:	3330      	adds	r3, #48	@ 0x30
 8004e12:	4618      	mov	r0, r3
 8004e14:	f004 fe62 	bl	8009adc <RCCEx_PLL3_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8004e1e:	e004      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e32:	4b5f      	ldr	r3, [pc, #380]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e38:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e42:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e44:	430b      	orrs	r3, r1
 8004e46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e4a:	e003      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004e50:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f002 0304 	and.w	r3, r2, #4
 8004e60:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004e6a:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4313      	orrs	r3, r2
 8004e72:	d04e      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004e74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e7a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e7e:	d02c      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004e80:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e84:	d825      	bhi.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8a:	d028      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e90:	d81f      	bhi.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e94:	d025      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e98:	d81b      	bhi.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e9a:	2b80      	cmp	r3, #128	@ 0x80
 8004e9c:	d00f      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004e9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ea0:	d817      	bhi.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01f      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004ea6:	2b40      	cmp	r3, #64	@ 0x40
 8004ea8:	d113      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eaa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004eae:	3308      	adds	r3, #8
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f004 fd7b 	bl	80099ac <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ebc:	e014      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ebe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ec2:	3330      	adds	r3, #48	@ 0x30
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f004 fe09 	bl	8009adc <RCCEx_PLL3_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004ed8:	e006      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004eda:	bf00      	nop
 8004edc:	e004      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e002      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ef2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ef6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004efa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f00:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f02:	430b      	orrs	r3, r1
 8004f04:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004f0e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f12:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f002 0308 	and.w	r3, r2, #8
 8004f1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004f28:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	d056      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004f32:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f38:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f3c:	d031      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004f3e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f42:	d82a      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f48:	d02d      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004f4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4e:	d824      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f54:	d029      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004f56:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f5a:	d81e      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f60:	d011      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f66:	d818      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d023      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f70:	d113      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f72:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f76:	3308      	adds	r3, #8
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f004 fd17 	bl	80099ac <RCCEx_PLL2_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8004f84:	e017      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f86:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f8a:	3330      	adds	r3, #48	@ 0x30
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f004 fda5 	bl	8009adc <RCCEx_PLL3_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8004f98:	e00d      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004fa0:	e009      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e007      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e005      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004faa:	bf00      	nop
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004fae:	bf00      	nop
 8004fb0:	44020c00 	.word	0x44020c00
        break;
 8004fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004fbe:	4bbb      	ldr	r3, [pc, #748]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fc4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004fc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fce:	4ab7      	ldr	r2, [pc, #732]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004fdc:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fe0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 0310 	and.w	r3, r2, #16
 8004fec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004ff6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	d053      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005000:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005006:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800500a:	d031      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800500c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005010:	d82a      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005016:	d02d      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800501c:	d824      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800501e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005022:	d029      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005024:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005028:	d81e      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502e:	d011      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005034:	d818      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d113      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005040:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005044:	3308      	adds	r3, #8
 8005046:	4618      	mov	r0, r3
 8005048:	f004 fcb0 	bl	80099ac <RCCEx_PLL2_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8005052:	e014      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005054:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005058:	3330      	adds	r3, #48	@ 0x30
 800505a:	4618      	mov	r0, r3
 800505c:	f004 fd3e 	bl	8009adc <RCCEx_PLL3_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8005066:	e00a      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800506e:	e006      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005070:	bf00      	nop
 8005072:	e004      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800507c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005086:	4b89      	ldr	r3, [pc, #548]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800508c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005090:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005096:	4a85      	ldr	r2, [pc, #532]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005098:	430b      	orrs	r3, r1
 800509a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80050a4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f002 0320 	and.w	r3, r2, #32
 80050b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80050be:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80050c2:	460b      	mov	r3, r1
 80050c4:	4313      	orrs	r3, r2
 80050c6:	d053      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80050c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80050d2:	d031      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80050d4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80050d8:	d82a      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050de:	d02d      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80050e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e4:	d824      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050e6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80050ea:	d029      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80050ec:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80050f0:	d81e      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f6:	d011      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050fc:	d818      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d020      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005106:	d113      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005108:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800510c:	3308      	adds	r3, #8
 800510e:	4618      	mov	r0, r3
 8005110:	f004 fc4c 	bl	80099ac <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 800511a:	e014      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800511c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005120:	3330      	adds	r3, #48	@ 0x30
 8005122:	4618      	mov	r0, r3
 8005124:	f004 fcda 	bl	8009adc <RCCEx_PLL3_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 800512e:	e00a      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005136:	e006      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005138:	bf00      	nop
 800513a:	e004      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800513c:	bf00      	nop
 800513e:	e002      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005140:	bf00      	nop
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005146:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10c      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800514e:	4b57      	ldr	r3, [pc, #348]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005154:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005158:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800515c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515e:	4a53      	ldr	r2, [pc, #332]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005160:	430b      	orrs	r3, r1
 8005162:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005166:	e003      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800516c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005170:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800517c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005186:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d053      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005190:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005196:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800519a:	d031      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800519c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80051a0:	d82a      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a6:	d02d      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80051a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ac:	d824      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051b2:	d029      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80051b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051b8:	d81e      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051be:	d011      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80051c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051c4:	d818      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d020      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ce:	d113      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80051d4:	3308      	adds	r3, #8
 80051d6:	4618      	mov	r0, r3
 80051d8:	f004 fbe8 	bl	80099ac <RCCEx_PLL2_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 80051e2:	e014      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80051e8:	3330      	adds	r3, #48	@ 0x30
 80051ea:	4618      	mov	r0, r3
 80051ec:	f004 fc76 	bl	8009adc <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 80051f6:	e00a      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80051fe:	e006      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005200:	bf00      	nop
 8005202:	e004      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800520c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005216:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800521c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005220:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005226:	4a21      	ldr	r2, [pc, #132]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005228:	430b      	orrs	r3, r1
 800522a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800522e:	e003      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005234:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005238:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005244:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005248:	2300      	movs	r3, #0
 800524a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800524e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005252:	460b      	mov	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	d055      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005258:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800525c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800525e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005262:	d033      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005264:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005268:	d82c      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800526a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800526e:	d02f      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005270:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005274:	d826      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005276:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800527a:	d02b      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800527c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005280:	d820      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005286:	d013      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800528c:	d81a      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d022      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005292:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005296:	d115      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005298:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800529c:	3308      	adds	r3, #8
 800529e:	4618      	mov	r0, r3
 80052a0:	f004 fb84 	bl	80099ac <RCCEx_PLL2_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80052aa:	e016      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80052ac:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80052b4:	3330      	adds	r3, #48	@ 0x30
 80052b6:	4618      	mov	r0, r3
 80052b8:	f004 fc10 	bl	8009adc <RCCEx_PLL3_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80052c2:	e00a      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80052ca:	e006      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052cc:	bf00      	nop
 80052ce:	e004      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052d0:	bf00      	nop
 80052d2:	e002      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052d4:	bf00      	nop
 80052d6:	e000      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10c      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80052e2:	4bbb      	ldr	r3, [pc, #748]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052e8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80052ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80052f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052f2:	4ab7      	ldr	r2, [pc, #732]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052f4:	430b      	orrs	r3, r1
 80052f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80052fa:	e003      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005300:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005304:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005310:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005314:	2300      	movs	r3, #0
 8005316:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800531a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800531e:	460b      	mov	r3, r1
 8005320:	4313      	orrs	r3, r2
 8005322:	d053      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005324:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800532a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800532e:	d031      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005330:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005334:	d82a      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800533a:	d02d      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800533c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005340:	d824      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005342:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005346:	d029      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005348:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800534c:	d81e      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800534e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005352:	d011      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005358:	d818      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d020      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800535e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005362:	d113      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005364:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005368:	3308      	adds	r3, #8
 800536a:	4618      	mov	r0, r3
 800536c:	f004 fb1e 	bl	80099ac <RCCEx_PLL2_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8005376:	e014      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005378:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800537c:	3330      	adds	r3, #48	@ 0x30
 800537e:	4618      	mov	r0, r3
 8005380:	f004 fbac 	bl	8009adc <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 800538a:	e00a      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005392:	e006      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005394:	bf00      	nop
 8005396:	e004      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005398:	bf00      	nop
 800539a:	e002      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800539c:	bf00      	nop
 800539e:	e000      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80053a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80053aa:	4b89      	ldr	r3, [pc, #548]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80053ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80053b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ba:	4a85      	ldr	r2, [pc, #532]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80053bc:	430b      	orrs	r3, r1
 80053be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053c2:	e003      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80053c8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80053cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80053d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80053e2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80053e6:	460b      	mov	r3, r1
 80053e8:	4313      	orrs	r3, r2
 80053ea:	d055      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80053ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80053f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80053f8:	d031      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80053fa:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80053fe:	d82a      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005404:	d02d      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800540a:	d824      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800540c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005410:	d029      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005412:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005416:	d81e      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800541c:	d011      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800541e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005422:	d818      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d020      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800542c:	d113      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800542e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005432:	3308      	adds	r3, #8
 8005434:	4618      	mov	r0, r3
 8005436:	f004 fab9 	bl	80099ac <RCCEx_PLL2_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8005440:	e014      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005442:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005446:	3330      	adds	r3, #48	@ 0x30
 8005448:	4618      	mov	r0, r3
 800544a:	f004 fb47 	bl	8009adc <RCCEx_PLL3_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8005454:	e00a      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800546a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10d      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005474:	4b56      	ldr	r3, [pc, #344]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005476:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800547a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800547e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005486:	4a52      	ldr	r2, [pc, #328]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005488:	430b      	orrs	r3, r1
 800548a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005494:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005498:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80054a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80054b2:	460b      	mov	r3, r1
 80054b4:	4313      	orrs	r3, r2
 80054b6:	d044      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80054b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80054bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d823      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80054c4:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	08005515 	.word	0x08005515
 80054d0:	080054e5 	.word	0x080054e5
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005515 	.word	0x08005515
 80054dc:	08005515 	.word	0x08005515
 80054e0:	08005515 	.word	0x08005515
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80054e8:	3308      	adds	r3, #8
 80054ea:	4618      	mov	r0, r3
 80054ec:	f004 fa5e 	bl	80099ac <RCCEx_PLL2_Config>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 80054f6:	e00e      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80054fc:	3330      	adds	r3, #48	@ 0x30
 80054fe:	4618      	mov	r0, r3
 8005500:	f004 faec 	bl	8009adc <RCCEx_PLL3_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 800550a:	e004      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005512:	e000      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005516:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10d      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800551e:	4b2c      	ldr	r3, [pc, #176]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005520:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005524:	f023 0107 	bic.w	r1, r3, #7
 8005528:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800552c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005530:	4a27      	ldr	r2, [pc, #156]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005532:	430b      	orrs	r3, r1
 8005534:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005538:	e003      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800553e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005542:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800554e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005552:	2300      	movs	r3, #0
 8005554:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005558:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800555c:	460b      	mov	r3, r1
 800555e:	4313      	orrs	r3, r2
 8005560:	d04f      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005562:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	2b50      	cmp	r3, #80	@ 0x50
 800556c:	d029      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800556e:	2b50      	cmp	r3, #80	@ 0x50
 8005570:	d823      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005572:	2b40      	cmp	r3, #64	@ 0x40
 8005574:	d027      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d81f      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800557a:	2b30      	cmp	r3, #48	@ 0x30
 800557c:	d025      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800557e:	2b30      	cmp	r3, #48	@ 0x30
 8005580:	d81b      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005582:	2b20      	cmp	r3, #32
 8005584:	d00f      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005586:	2b20      	cmp	r3, #32
 8005588:	d817      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d022      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800558e:	2b10      	cmp	r3, #16
 8005590:	d113      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005592:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005596:	3308      	adds	r3, #8
 8005598:	4618      	mov	r0, r3
 800559a:	f004 fa07 	bl	80099ac <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 80055a4:	e017      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055aa:	3330      	adds	r3, #48	@ 0x30
 80055ac:	4618      	mov	r0, r3
 80055ae:	f004 fa95 	bl	8009adc <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 80055b8:	e00d      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80055c0:	e009      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80055c2:	bf00      	nop
 80055c4:	e007      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80055c6:	bf00      	nop
 80055c8:	e005      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80055ca:	bf00      	nop
 80055cc:	e003      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80055ce:	bf00      	nop
 80055d0:	44020c00 	.word	0x44020c00
        break;
 80055d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80055de:	4baf      	ldr	r3, [pc, #700]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80055e4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80055e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	4aaa      	ldr	r2, [pc, #680]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055f2:	430b      	orrs	r3, r1
 80055f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80055f8:	e003      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80055fe:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005602:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800560e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005612:	2300      	movs	r3, #0
 8005614:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005618:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800561c:	460b      	mov	r3, r1
 800561e:	4313      	orrs	r3, r2
 8005620:	d055      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005622:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800562a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800562e:	d031      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005630:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005634:	d82a      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800563a:	d02d      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800563c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005640:	d824      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005642:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005646:	d029      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005648:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800564c:	d81e      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800564e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005652:	d011      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005658:	d818      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d020      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800565e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005662:	d113      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005664:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005668:	3308      	adds	r3, #8
 800566a:	4618      	mov	r0, r3
 800566c:	f004 f99e 	bl	80099ac <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005676:	e014      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005678:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800567c:	3330      	adds	r3, #48	@ 0x30
 800567e:	4618      	mov	r0, r3
 8005680:	f004 fa2c 	bl	8009adc <RCCEx_PLL3_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800568a:	e00a      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005692:	e006      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005694:	bf00      	nop
 8005696:	e004      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005698:	bf00      	nop
 800569a:	e002      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800569c:	bf00      	nop
 800569e:	e000      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80056a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10d      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80056aa:	4b7c      	ldr	r3, [pc, #496]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80056b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056bc:	4a77      	ldr	r2, [pc, #476]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056be:	430b      	orrs	r3, r1
 80056c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056c4:	e003      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80056ca:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80056da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	d03d      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80056ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056fa:	d01b      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80056fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005700:	d814      	bhi.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005706:	d017      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800570c:	d80e      	bhi.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d014      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005716:	d109      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005718:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800571c:	3330      	adds	r3, #48	@ 0x30
 800571e:	4618      	mov	r0, r3
 8005720:	f004 f9dc 	bl	8009adc <RCCEx_PLL3_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800572a:	e008      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005732:	e004      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005734:	bf00      	nop
 8005736:	e002      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005738:	bf00      	nop
 800573a:	e000      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800573c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10d      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005746:	4b55      	ldr	r3, [pc, #340]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800574c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005750:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005758:	4a50      	ldr	r2, [pc, #320]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800575a:	430b      	orrs	r3, r1
 800575c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005760:	e003      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005762:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005766:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800576a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800577a:	2300      	movs	r3, #0
 800577c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005780:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005784:	460b      	mov	r3, r1
 8005786:	4313      	orrs	r3, r2
 8005788:	d03d      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800578a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005792:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005796:	d01b      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005798:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800579c:	d814      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800579e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057a2:	d017      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80057a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057a8:	d80e      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d014      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80057ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057b2:	d109      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80057b8:	3330      	adds	r3, #48	@ 0x30
 80057ba:	4618      	mov	r0, r3
 80057bc:	f004 f98e 	bl	8009adc <RCCEx_PLL3_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80057c6:	e008      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80057ce:	e004      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80057d0:	bf00      	nop
 80057d2:	e002      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80057d4:	bf00      	nop
 80057d6:	e000      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80057d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80057e2:	4b2e      	ldr	r3, [pc, #184]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80057e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057e8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80057ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80057f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f4:	4a29      	ldr	r2, [pc, #164]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005802:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005806:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005812:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800581c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005820:	460b      	mov	r3, r1
 8005822:	4313      	orrs	r3, r2
 8005824:	d040      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005826:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800582a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800582e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005832:	d01b      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005834:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005838:	d814      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800583a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800583e:	d017      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005844:	d80e      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800584e:	d109      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005850:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005854:	3330      	adds	r3, #48	@ 0x30
 8005856:	4618      	mov	r0, r3
 8005858:	f004 f940 	bl	8009adc <RCCEx_PLL3_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005862:	e008      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800587a:	2b00      	cmp	r3, #0
 800587c:	d110      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800587e:	4b07      	ldr	r3, [pc, #28]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005884:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005888:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800588c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005890:	4a02      	ldr	r2, [pc, #8]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005892:	430b      	orrs	r3, r1
 8005894:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005898:	e006      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800589a:	bf00      	nop
 800589c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80058a4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	2100      	movs	r1, #0
 80058b2:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80058b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80058c2:	460b      	mov	r3, r1
 80058c4:	4313      	orrs	r3, r2
 80058c6:	d03d      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80058c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80058cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058d4:	d01b      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80058d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058da:	d814      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80058dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058e0:	d017      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80058e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058e6:	d80e      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d014      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80058ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058f0:	d109      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80058f6:	3330      	adds	r3, #48	@ 0x30
 80058f8:	4618      	mov	r0, r3
 80058fa:	f004 f8ef 	bl	8009adc <RCCEx_PLL3_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005904:	e008      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800590c:	e004      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005918:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10d      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005920:	4bbe      	ldr	r3, [pc, #760]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005926:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800592a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800592e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005932:	4aba      	ldr	r2, [pc, #744]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005934:	430b      	orrs	r3, r1
 8005936:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800593a:	e003      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005940:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005944:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800595a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	d035      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005964:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800596c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005970:	d015      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005972:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005976:	d80e      	bhi.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d012      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800597c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005982:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005986:	3330      	adds	r3, #48	@ 0x30
 8005988:	4618      	mov	r0, r3
 800598a:	f004 f8a7 	bl	8009adc <RCCEx_PLL3_Config>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005994:	e006      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800599c:	e002      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800599e:	bf00      	nop
 80059a0:	e000      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80059a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10d      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80059ac:	4b9b      	ldr	r3, [pc, #620]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059b2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80059b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80059ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059be:	4a97      	ldr	r2, [pc, #604]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059c0:	430b      	orrs	r3, r1
 80059c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80059c6:	e003      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80059cc:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	2100      	movs	r1, #0
 80059da:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80059de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80059e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80059ea:	460b      	mov	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80059f0:	4b8a      	ldr	r3, [pc, #552]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	4a89      	ldr	r2, [pc, #548]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059fa:	61d3      	str	r3, [r2, #28]
 80059fc:	4b87      	ldr	r3, [pc, #540]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059fe:	69d9      	ldr	r1, [r3, #28]
 8005a00:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a04:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005a08:	4a84      	ldr	r2, [pc, #528]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a24:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d055      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005a2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a36:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005a3a:	d031      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005a3c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005a40:	d82a      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a46:	d02d      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a4c:	d824      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a52:	d029      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a58:	d81e      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a5e:	d011      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a64:	d818      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d020      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6e:	d113      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a70:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a74:	3308      	adds	r3, #8
 8005a76:	4618      	mov	r0, r3
 8005a78:	f003 ff98 	bl	80099ac <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005a82:	e014      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a84:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005a88:	3330      	adds	r3, #48	@ 0x30
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f004 f826 	bl	8009adc <RCCEx_PLL3_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005a96:	e00a      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005a9e:	e006      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e004      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005aa4:	bf00      	nop
 8005aa6:	e002      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005aa8:	bf00      	nop
 8005aaa:	e000      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aae:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10d      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005ab6:	4b59      	ldr	r3, [pc, #356]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ab8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005abc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005ac0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ac8:	4a54      	ldr	r2, [pc, #336]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005aca:	430b      	orrs	r3, r1
 8005acc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ad0:	e003      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005ad6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ada:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005af4:	460b      	mov	r3, r1
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d055      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005afa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005afe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b06:	d031      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005b08:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b0c:	d82a      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b12:	d02d      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b18:	d824      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b1e:	d029      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b24:	d81e      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b2a:	d011      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b30:	d818      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d020      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3a:	d113      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005b40:	3308      	adds	r3, #8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f003 ff32 	bl	80099ac <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005b4e:	e014      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b50:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005b54:	3330      	adds	r3, #48	@ 0x30
 8005b56:	4618      	mov	r0, r3
 8005b58:	f003 ffc0 	bl	8009adc <RCCEx_PLL3_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005b62:	e00a      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005b6a:	e006      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e004      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b70:	bf00      	nop
 8005b72:	e002      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b74:	bf00      	nop
 8005b76:	e000      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005b82:	4b26      	ldr	r3, [pc, #152]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005b84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b88:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005b90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b94:	4a21      	ldr	r2, [pc, #132]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005b9c:	e003      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005ba2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005ba6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	2100      	movs	r1, #0
 8005bb0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005bbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	d057      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005bc6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005bca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bd2:	d033      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bd8:	d82c      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005bda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bde:	d02f      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005be0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005be4:	d826      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005be6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bea:	d02b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005bec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bf0:	d820      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bf6:	d013      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bfc:	d81a      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d022      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c06:	d115      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c08:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f003 fecc 	bl	80099ac <RCCEx_PLL2_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005c1a:	e016      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005c1c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c20:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005c24:	3330      	adds	r3, #48	@ 0x30
 8005c26:	4618      	mov	r0, r3
 8005c28:	f003 ff58 	bl	8009adc <RCCEx_PLL3_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005c32:	e00a      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005c3a:	e006      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c3c:	bf00      	nop
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c40:	bf00      	nop
 8005c42:	e002      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c44:	bf00      	nop
 8005c46:	e000      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005c52:	4bbb      	ldr	r3, [pc, #748]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005c60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c64:	4ab6      	ldr	r2, [pc, #728]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c6c:	e003      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005c72:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005c76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	2100      	movs	r1, #0
 8005c80:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c8c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c90:	460b      	mov	r3, r1
 8005c92:	4313      	orrs	r3, r2
 8005c94:	d055      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005c96:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c9e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005ca2:	d031      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005ca4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005ca8:	d82a      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cae:	d02d      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb4:	d824      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005cb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cba:	d029      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005cbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc0:	d81e      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cc6:	d011      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ccc:	d818      	bhi.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d020      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cd6:	d113      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005cdc:	3308      	adds	r3, #8
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f003 fe64 	bl	80099ac <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005cea:	e014      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005cf0:	3330      	adds	r3, #48	@ 0x30
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f003 fef2 	bl	8009adc <RCCEx_PLL3_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005d06:	e006      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d08:	bf00      	nop
 8005d0a:	e004      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d0c:	bf00      	nop
 8005d0e:	e002      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d16:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10d      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005d1e:	4b88      	ldr	r3, [pc, #544]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d24:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005d28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d30:	4a83      	ldr	r2, [pc, #524]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005d32:	430b      	orrs	r3, r1
 8005d34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d38:	e003      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005d3e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005d42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d58:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	d055      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005d62:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005d66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d6e:	d031      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005d70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d74:	d82a      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005d76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d7a:	d02d      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005d7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d80:	d824      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005d82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d86:	d029      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005d88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d8c:	d81e      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d92:	d011      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d98:	d818      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d020      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da2:	d113      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005da4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005da8:	3308      	adds	r3, #8
 8005daa:	4618      	mov	r0, r3
 8005dac:	f003 fdfe 	bl	80099ac <RCCEx_PLL2_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005db6:	e014      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005db8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005dbc:	3330      	adds	r3, #48	@ 0x30
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f003 fe8c 	bl	8009adc <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005dca:	e00a      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005dd2:	e006      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005dd4:	bf00      	nop
 8005dd6:	e004      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005dd8:	bf00      	nop
 8005dda:	e002      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005ddc:	bf00      	nop
 8005dde:	e000      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005dea:	4b55      	ldr	r3, [pc, #340]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005df0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005df4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005df8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dfc:	4a50      	ldr	r2, [pc, #320]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e04:	e003      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e06:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005e0a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005e0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	2100      	movs	r1, #0
 8005e18:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8005e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e24:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d055      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005e32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e3a:	d031      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e40:	d82a      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e46:	d02d      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4c:	d824      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e52:	d029      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005e54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e58:	d81e      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e5e:	d011      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e64:	d818      	bhi.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d020      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e6e:	d113      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e70:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005e74:	3308      	adds	r3, #8
 8005e76:	4618      	mov	r0, r3
 8005e78:	f003 fd98 	bl	80099ac <RCCEx_PLL2_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005e82:	e014      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e84:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005e88:	3330      	adds	r3, #48	@ 0x30
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f003 fe26 	bl	8009adc <RCCEx_PLL3_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005e96:	e00a      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005e9e:	e006      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005ea0:	bf00      	nop
 8005ea2:	e004      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eae:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10d      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005eb6:	4b22      	ldr	r3, [pc, #136]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005eb8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ebc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ec0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005ec4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ed0:	e003      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005ed6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005eda:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ee6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ef0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d055      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005efa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005efe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f06:	d035      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005f08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f0c:	d82e      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005f0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f12:	d031      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005f14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f18:	d828      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f1e:	d01b      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f24:	d822      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2e:	d009      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005f30:	e01c      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f32:	4b03      	ldr	r3, [pc, #12]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f36:	4a02      	ldr	r2, [pc, #8]	@ (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f3e:	e01c      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005f40:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005f48:	3308      	adds	r3, #8
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f003 fd2e 	bl	80099ac <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f56:	e010      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005f5c:	3330      	adds	r3, #48	@ 0x30
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f003 fdbc 	bl	8009adc <RCCEx_PLL3_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f6a:	e006      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8005f72:	e002      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005f74:	bf00      	nop
 8005f76:	e000      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005f82:	4bc2      	ldr	r3, [pc, #776]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f94:	4abd      	ldr	r2, [pc, #756]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005f96:	430b      	orrs	r3, r1
 8005f98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005fa2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005fa6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fb8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d051      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005fc2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005fc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fce:	d033      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8005fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fd4:	d82c      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8005fd6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fda:	d02d      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8005fdc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fe0:	d826      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8005fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe6:	d019      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8005fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fec:	d820      	bhi.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 8005ff2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ff6:	d007      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8005ff8:	e01a      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffa:	4ba4      	ldr	r3, [pc, #656]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffe:	4aa3      	ldr	r2, [pc, #652]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8006000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006004:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006006:	e018      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006008:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800600c:	3308      	adds	r3, #8
 800600e:	4618      	mov	r0, r3
 8006010:	f003 fccc 	bl	80099ac <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 800601a:	e00e      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800601c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006020:	3330      	adds	r3, #48	@ 0x30
 8006022:	4618      	mov	r0, r3
 8006024:	f003 fd5a 	bl	8009adc <RCCEx_PLL3_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 800602e:	e004      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006036:	e000      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 8006038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10d      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006042:	4b92      	ldr	r3, [pc, #584]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8006044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006048:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800604c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006050:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006054:	4a8d      	ldr	r2, [pc, #564]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8006056:	430b      	orrs	r3, r1
 8006058:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800605c:	e003      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006062:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006066:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006072:	673b      	str	r3, [r7, #112]	@ 0x70
 8006074:	2300      	movs	r3, #0
 8006076:	677b      	str	r3, [r7, #116]	@ 0x74
 8006078:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800607c:	460b      	mov	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	d032      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006082:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006086:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800608a:	2b05      	cmp	r3, #5
 800608c:	d80f      	bhi.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1462>
 800608e:	2b03      	cmp	r3, #3
 8006090:	d211      	bcs.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x146a>
 8006092:	2b01      	cmp	r3, #1
 8006094:	d911      	bls.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006096:	2b02      	cmp	r3, #2
 8006098:	d109      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800609a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800609e:	3308      	adds	r3, #8
 80060a0:	4618      	mov	r0, r3
 80060a2:	f003 fc83 	bl	80099ac <RCCEx_PLL2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80060ac:	e006      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80060b4:	e002      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 80060ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060bc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10d      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80060c4:	4b71      	ldr	r3, [pc, #452]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80060c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060ca:	f023 0107 	bic.w	r1, r3, #7
 80060ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80060d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80060d6:	4a6d      	ldr	r2, [pc, #436]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80060d8:	430b      	orrs	r3, r1
 80060da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80060de:	e003      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80060e4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80060e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	2100      	movs	r1, #0
 80060f2:	66b9      	str	r1, [r7, #104]	@ 0x68
 80060f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	d024      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006104:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006108:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 8006110:	2b08      	cmp	r3, #8
 8006112:	d005      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800611a:	e002      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 800611c:	bf00      	nop
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8006120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006122:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10d      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800612a:	4b58      	ldr	r3, [pc, #352]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800612c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006130:	f023 0108 	bic.w	r1, r3, #8
 8006134:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006138:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800613c:	4a53      	ldr	r2, [pc, #332]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800613e:	430b      	orrs	r3, r1
 8006140:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006144:	e003      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006146:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800614a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800614e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800615a:	663b      	str	r3, [r7, #96]	@ 0x60
 800615c:	2300      	movs	r3, #0
 800615e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006160:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	f000 80b9 	beq.w	80062de <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800616c:	4b48      	ldr	r3, [pc, #288]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	4a47      	ldr	r2, [pc, #284]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006178:	f7fb fef0 	bl	8001f5c <HAL_GetTick>
 800617c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006180:	e00b      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006182:	f7fb feeb 	bl	8001f5c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d903      	bls.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006198:	e005      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800619a:	4b3d      	ldr	r3, [pc, #244]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0ed      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 80061a6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 8093 	bne.w	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061b0:	4b36      	ldr	r3, [pc, #216]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80061b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80061be:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d023      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 80061c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80061ca:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80061ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01b      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061d6:	4b2d      	ldr	r3, [pc, #180]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80061d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061e4:	4b29      	ldr	r3, [pc, #164]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80061e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061ea:	4a28      	ldr	r2, [pc, #160]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061f4:	4b25      	ldr	r3, [pc, #148]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80061f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061fa:	4a24      	ldr	r2, [pc, #144]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80061fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006200:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006204:	4a21      	ldr	r2, [pc, #132]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8006206:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800620a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800620e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d019      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621a:	f7fb fe9f 	bl	8001f5c <HAL_GetTick>
 800621e:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006222:	e00d      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006224:	f7fb fe9a 	bl	8001f5c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006234:	429a      	cmp	r2, r3
 8006236:	d903      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
            break;
 800623e:	e006      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006240:	4b12      	ldr	r3, [pc, #72]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8006242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ea      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 800624e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006252:	2b00      	cmp	r3, #0
 8006254:	d13a      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006256:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800625a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800625e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006266:	d115      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1648>
 8006268:	4b08      	ldr	r3, [pc, #32]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006270:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800627e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006282:	4a02      	ldr	r2, [pc, #8]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8006284:	430b      	orrs	r3, r1
 8006286:	61d3      	str	r3, [r2, #28]
 8006288:	e00a      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1654>
 800628a:	bf00      	nop
 800628c:	44020c00 	.word	0x44020c00
 8006290:	44020800 	.word	0x44020800
 8006294:	4bc6      	ldr	r3, [pc, #792]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	4ac5      	ldr	r2, [pc, #788]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800629a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800629e:	61d3      	str	r3, [r2, #28]
 80062a0:	4bc3      	ldr	r3, [pc, #780]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80062a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a6:	4ac2      	ldr	r2, [pc, #776]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80062a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062b0:	4bbf      	ldr	r3, [pc, #764]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80062b2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80062b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80062ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c2:	4abb      	ldr	r2, [pc, #748]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80062c4:	430b      	orrs	r3, r1
 80062c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062ca:	e008      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062cc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80062d0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
 80062d4:	e003      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80062da:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062de:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80062ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062ec:	2300      	movs	r3, #0
 80062ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d035      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80062fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80062fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006302:	2b30      	cmp	r3, #48	@ 0x30
 8006304:	d014      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 8006306:	2b30      	cmp	r3, #48	@ 0x30
 8006308:	d80e      	bhi.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d012      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800630e:	2b20      	cmp	r3, #32
 8006310:	d80a      	bhi.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006316:	2b10      	cmp	r3, #16
 8006318:	d106      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800631a:	4ba5      	ldr	r3, [pc, #660]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800631c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631e:	4aa4      	ldr	r2, [pc, #656]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006324:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006326:	e008      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800632e:	e004      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8006330:	bf00      	nop
 8006332:	e002      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8006338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10d      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006342:	4b9b      	ldr	r3, [pc, #620]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006348:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800634c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006350:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006354:	4a96      	ldr	r2, [pc, #600]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006356:	430b      	orrs	r3, r1
 8006358:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800635c:	e003      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006362:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006366:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006372:	653b      	str	r3, [r7, #80]	@ 0x50
 8006374:	2300      	movs	r3, #0
 8006376:	657b      	str	r3, [r7, #84]	@ 0x54
 8006378:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d033      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006382:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006386:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1748>
 800638e:	2b40      	cmp	r3, #64	@ 0x40
 8006390:	d007      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1756>
 8006392:	e010      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006394:	4b86      	ldr	r3, [pc, #536]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	4a85      	ldr	r2, [pc, #532]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80063a0:	e00d      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80063a6:	3308      	adds	r3, #8
 80063a8:	4618      	mov	r0, r3
 80063aa:	f003 faff 	bl	80099ac <RCCEx_PLL2_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80063bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063be:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10d      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80063c6:	4b7a      	ldr	r3, [pc, #488]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80063c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063cc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80063d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80063d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80063d8:	4a75      	ldr	r2, [pc, #468]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80063da:	430b      	orrs	r3, r1
 80063dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063e0:	e003      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80063e6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80063ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80063f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f8:	2300      	movs	r3, #0
 80063fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d048      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006406:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800640a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800640e:	2b04      	cmp	r3, #4
 8006410:	d827      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8006412:	a201      	add	r2, pc, #4	@ (adr r2, 8006418 <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	0800642d 	.word	0x0800642d
 800641c:	0800643b 	.word	0x0800643b
 8006420:	0800644f 	.word	0x0800644f
 8006424:	0800646b 	.word	0x0800646b
 8006428:	0800646b 	.word	0x0800646b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642c:	4b60      	ldr	r3, [pc, #384]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800642e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006430:	4a5f      	ldr	r2, [pc, #380]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006436:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006438:	e018      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800643a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800643e:	3308      	adds	r3, #8
 8006440:	4618      	mov	r0, r3
 8006442:	f003 fab3 	bl	80099ac <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800644c:	e00e      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800644e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006452:	3330      	adds	r3, #48	@ 0x30
 8006454:	4618      	mov	r0, r3
 8006456:	f003 fb41 	bl	8009adc <RCCEx_PLL3_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006460:	e004      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006468:	e000      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 800646a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10d      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006474:	4b4e      	ldr	r3, [pc, #312]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800647a:	f023 0107 	bic.w	r1, r3, #7
 800647e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006482:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006486:	4a4a      	ldr	r2, [pc, #296]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006488:	430b      	orrs	r3, r1
 800648a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800648e:	e003      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006494:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006498:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80064a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80064a6:	2300      	movs	r3, #0
 80064a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064ae:	460b      	mov	r3, r1
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f000 8083 	beq.w	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80064b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80064ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d85f      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1936>
 80064c2:	a201      	add	r2, pc, #4	@ (adr r2, 80064c8 <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	0800654d 	.word	0x0800654d
 80064cc:	08006583 	.word	0x08006583
 80064d0:	08006583 	.word	0x08006583
 80064d4:	08006583 	.word	0x08006583
 80064d8:	08006583 	.word	0x08006583
 80064dc:	08006583 	.word	0x08006583
 80064e0:	08006583 	.word	0x08006583
 80064e4:	08006583 	.word	0x08006583
 80064e8:	0800655b 	.word	0x0800655b
 80064ec:	08006583 	.word	0x08006583
 80064f0:	08006583 	.word	0x08006583
 80064f4:	08006583 	.word	0x08006583
 80064f8:	08006583 	.word	0x08006583
 80064fc:	08006583 	.word	0x08006583
 8006500:	08006583 	.word	0x08006583
 8006504:	08006583 	.word	0x08006583
 8006508:	0800656f 	.word	0x0800656f
 800650c:	08006583 	.word	0x08006583
 8006510:	08006583 	.word	0x08006583
 8006514:	08006583 	.word	0x08006583
 8006518:	08006583 	.word	0x08006583
 800651c:	08006583 	.word	0x08006583
 8006520:	08006583 	.word	0x08006583
 8006524:	08006583 	.word	0x08006583
 8006528:	0800658b 	.word	0x0800658b
 800652c:	08006583 	.word	0x08006583
 8006530:	08006583 	.word	0x08006583
 8006534:	08006583 	.word	0x08006583
 8006538:	08006583 	.word	0x08006583
 800653c:	08006583 	.word	0x08006583
 8006540:	08006583 	.word	0x08006583
 8006544:	08006583 	.word	0x08006583
 8006548:	0800658b 	.word	0x0800658b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654c:	4b18      	ldr	r3, [pc, #96]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	4a17      	ldr	r2, [pc, #92]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006556:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006558:	e018      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800655a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800655e:	3308      	adds	r3, #8
 8006560:	4618      	mov	r0, r3
 8006562:	f003 fa23 	bl	80099ac <RCCEx_PLL2_Config>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800656c:	e00e      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800656e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006572:	3330      	adds	r3, #48	@ 0x30
 8006574:	4618      	mov	r0, r3
 8006576:	f003 fab1 	bl	8009adc <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 800658a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10f      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006594:	4b06      	ldr	r3, [pc, #24]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8006596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800659a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800659e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80065a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a6:	4a02      	ldr	r2, [pc, #8]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065ae:	e005      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1970>
 80065b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80065b8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80065bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80065c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80065d2:	460b      	mov	r3, r1
 80065d4:	4313      	orrs	r3, r2
 80065d6:	d04e      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80065d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80065dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e4:	d02e      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 80065e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ea:	d827      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80065ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80065ee:	d02b      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 80065f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80065f2:	d823      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80065f4:	2b80      	cmp	r3, #128	@ 0x80
 80065f6:	d017      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 80065f8:	2b80      	cmp	r3, #128	@ 0x80
 80065fa:	d81f      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 8006600:	2b40      	cmp	r3, #64	@ 0x40
 8006602:	d007      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 8006604:	e01a      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006606:	4bb0      	ldr	r3, [pc, #704]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	4aaf      	ldr	r2, [pc, #700]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800660c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006610:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006612:	e01a      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006614:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006618:	3308      	adds	r3, #8
 800661a:	4618      	mov	r0, r3
 800661c:	f003 f9c6 	bl	80099ac <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006626:	e010      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006628:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800662c:	3330      	adds	r3, #48	@ 0x30
 800662e:	4618      	mov	r0, r3
 8006630:	f003 fa54 	bl	8009adc <RCCEx_PLL3_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800663a:	e006      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006642:	e002      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8006648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006652:	4b9d      	ldr	r3, [pc, #628]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8006654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006658:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800665c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006664:	4a98      	ldr	r2, [pc, #608]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8006666:	430b      	orrs	r3, r1
 8006668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800666c:	e003      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006672:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006676:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006682:	633b      	str	r3, [r7, #48]	@ 0x30
 8006684:	2300      	movs	r3, #0
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
 8006688:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d055      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006692:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800669a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800669e:	d031      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 80066a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066a4:	d82a      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80066a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066aa:	d02d      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 80066ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b0:	d824      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80066b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066b6:	d029      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 80066b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066bc:	d81e      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80066be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c2:	d011      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 80066c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c8:	d818      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d020      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 80066ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d2:	d113      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80066d8:	3308      	adds	r3, #8
 80066da:	4618      	mov	r0, r3
 80066dc:	f003 f966 	bl	80099ac <RCCEx_PLL2_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80066e6:	e014      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80066ec:	3330      	adds	r3, #48	@ 0x30
 80066ee:	4618      	mov	r0, r3
 80066f0:	f003 f9f4 	bl	8009adc <RCCEx_PLL3_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80066fa:	e00a      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006702:	e006      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8006704:	bf00      	nop
 8006706:	e004      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8006710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006712:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10d      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800671a:	4b6b      	ldr	r3, [pc, #428]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800671c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006720:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006724:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800672c:	4a66      	ldr	r2, [pc, #408]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800672e:	430b      	orrs	r3, r1
 8006730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006736:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800673a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800673e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674c:	2300      	movs	r3, #0
 800674e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006750:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006754:	460b      	mov	r3, r1
 8006756:	4313      	orrs	r3, r2
 8006758:	d055      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800675a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800675e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006762:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006766:	d031      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 8006768:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800676c:	d82a      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800676e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006772:	d02d      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 8006774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006778:	d824      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800677a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800677e:	d029      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8006780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006784:	d81e      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8006786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800678a:	d011      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006790:	d818      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d020      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679a:	d113      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800679c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80067a0:	3308      	adds	r3, #8
 80067a2:	4618      	mov	r0, r3
 80067a4:	f003 f902 	bl	80099ac <RCCEx_PLL2_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80067ae:	e014      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80067b4:	3330      	adds	r3, #48	@ 0x30
 80067b6:	4618      	mov	r0, r3
 80067b8:	f003 f990 	bl	8009adc <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80067c2:	e00a      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80067ca:	e006      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80067cc:	bf00      	nop
 80067ce:	e004      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80067d0:	bf00      	nop
 80067d2:	e002      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80067d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80067e2:	4b39      	ldr	r3, [pc, #228]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80067e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067e8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80067ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80067f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80067f4:	4934      	ldr	r1, [pc, #208]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80067fc:	e003      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fe:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006802:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006806:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	2100      	movs	r1, #0
 8006810:	6239      	str	r1, [r7, #32]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
 8006818:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d058      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006822:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800682a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800682e:	d031      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006830:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006834:	d82a      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8006836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800683a:	d02d      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 800683c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006840:	d824      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8006842:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006846:	d029      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 8006848:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800684c:	d81e      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800684e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006852:	d011      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006858:	d818      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d020      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 800685e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006862:	d113      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006864:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006868:	3308      	adds	r3, #8
 800686a:	4618      	mov	r0, r3
 800686c:	f003 f89e 	bl	80099ac <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006876:	e014      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006878:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800687c:	3330      	adds	r3, #48	@ 0x30
 800687e:	4618      	mov	r0, r3
 8006880:	f003 f92c 	bl	8009adc <RCCEx_PLL3_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800688a:	e00a      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006892:	e006      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8006894:	bf00      	nop
 8006896:	e004      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8006898:	bf00      	nop
 800689a:	e002      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800689c:	bf00      	nop
 800689e:	e000      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 80068a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d110      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80068aa:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80068ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068b0:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80068b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80068b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068bc:	4902      	ldr	r1, [pc, #8]	@ (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80068c4:	e006      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 80068c6:	bf00      	nop
 80068c8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80068d0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	2100      	movs	r1, #0
 80068de:	61b9      	str	r1, [r7, #24]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	d03d      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80068f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80068f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d81c      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 80068fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	0800693f 	.word	0x0800693f
 8006908:	08006915 	.word	0x08006915
 800690c:	08006923 	.word	0x08006923
 8006910:	0800693f 	.word	0x0800693f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006914:	4b6f      	ldr	r3, [pc, #444]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	4a6e      	ldr	r2, [pc, #440]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800691a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800691e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006920:	e00e      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006922:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006926:	3308      	adds	r3, #8
 8006928:	4618      	mov	r0, r3
 800692a:	f003 f83f 	bl	80099ac <RCCEx_PLL2_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006934:	e004      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800693c:	e000      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 800693e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006940:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10d      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006948:	4b62      	ldr	r3, [pc, #392]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800694a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800695a:	495e      	ldr	r1, [pc, #376]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006962:	e003      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006968:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800696c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	2100      	movs	r1, #0
 8006976:	6139      	str	r1, [r7, #16]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006982:	460b      	mov	r3, r1
 8006984:	4313      	orrs	r3, r2
 8006986:	d03a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006988:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800698c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006994:	d00e      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 8006996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800699a:	d815      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d017      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 80069a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a4:	d110      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80069a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069aa:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80069ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069b0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80069b2:	e00e      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80069b8:	3308      	adds	r3, #8
 80069ba:	4618      	mov	r0, r3
 80069bc:	f002 fff6 	bl	80099ac <RCCEx_PLL2_Config>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80069c6:	e004      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80069ce:	e000      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 80069d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10d      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80069da:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80069dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80069e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80069ec:	4939      	ldr	r1, [pc, #228]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80069f4:	e003      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80069fa:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	2100      	movs	r1, #0
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a14:	460b      	mov	r3, r1
 8006a16:	4313      	orrs	r3, r2
 8006a18:	d038      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006a1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006a1e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006a22:	2b30      	cmp	r3, #48	@ 0x30
 8006a24:	d01b      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 8006a26:	2b30      	cmp	r3, #48	@ 0x30
 8006a28:	d815      	bhi.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d002      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d007      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 8006a32:	e010      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a34:	4b27      	ldr	r3, [pc, #156]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a38:	4a26      	ldr	r2, [pc, #152]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8006a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a40:	e00e      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006a46:	3330      	adds	r3, #48	@ 0x30
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f003 f847 	bl	8009adc <RCCEx_PLL3_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006a54:	e004      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8006a5c:	e000      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 8006a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a60:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10d      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006a68:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8006a6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a72:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006a76:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006a7a:	4916      	ldr	r1, [pc, #88]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006a82:	e003      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8006a88:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	2100      	movs	r1, #0
 8006a96:	6039      	str	r1, [r7, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8006aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006aae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ab2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006ab6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006aba:	4906      	ldr	r1, [pc, #24]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006ac2:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8006acc:	46bd      	mov	sp, r7
 8006ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ad2:	bf00      	nop
 8006ad4:	44020c00 	.word	0x44020c00

08006ad8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b08b      	sub	sp, #44	@ 0x2c
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006ae0:	4bae      	ldr	r3, [pc, #696]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006aea:	4bac      	ldr	r3, [pc, #688]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006af4:	4ba9      	ldr	r3, [pc, #676]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006afe:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006b00:	4ba6      	ldr	r3, [pc, #664]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b0c:	4ba3      	ldr	r3, [pc, #652]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	08db      	lsrs	r3, r3, #3
 8006b12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b24:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 8126 	beq.w	8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d053      	beq.n	8006bde <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d86f      	bhi.n	8006c1c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d003      	beq.n	8006b4a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d02b      	beq.n	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006b48:	e068      	b.n	8006c1c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b4a:	4b94      	ldr	r3, [pc, #592]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	08db      	lsrs	r3, r3, #3
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	4a92      	ldr	r2, [pc, #584]	@ (8006da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b82:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b9e:	e068      	b.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006bc0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006bdc:	e049      	b.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006dac <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfa:	ed97 6a04 	vldr	s12, [r7, #16]
 8006bfe:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006c1a:	e02a      	b.n	8006c72 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c1c:	4b5f      	ldr	r3, [pc, #380]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	08db      	lsrs	r3, r3, #3
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	4a5e      	ldr	r2, [pc, #376]	@ (8006da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c50:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c54:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006c70:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c72:	4b4a      	ldr	r3, [pc, #296]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c7e:	d121      	bne.n	8006cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006c80:	4b46      	ldr	r3, [pc, #280]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d017      	beq.n	8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c8c:	4b43      	ldr	r3, [pc, #268]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c90:	0a5b      	lsrs	r3, r3, #9
 8006c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006ca6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e006      	b.n	8006cca <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e002      	b.n	8006cca <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cca:	4b34      	ldr	r3, [pc, #208]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cd6:	d121      	bne.n	8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006cd8:	4b30      	ldr	r3, [pc, #192]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006cfe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d0a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	e006      	b.n	8006d22 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	e002      	b.n	8006d22 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d22:	4b1e      	ldr	r3, [pc, #120]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d2e:	d121      	bne.n	8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006d30:	4b1a      	ldr	r3, [pc, #104]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d017      	beq.n	8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d3c:	4b17      	ldr	r3, [pc, #92]	@ (8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	0e1b      	lsrs	r3, r3, #24
 8006d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d52:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006d56:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d62:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d6a:	e010      	b.n	8006d8e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	609a      	str	r2, [r3, #8]
}
 8006d72:	e00c      	b.n	8006d8e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
}
 8006d7a:	e008      	b.n	8006d8e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	609a      	str	r2, [r3, #8]
}
 8006d8e:	bf00      	nop
 8006d90:	372c      	adds	r7, #44	@ 0x2c
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	44020c00 	.word	0x44020c00
 8006da0:	03d09000 	.word	0x03d09000
 8006da4:	46000000 	.word	0x46000000
 8006da8:	4a742400 	.word	0x4a742400
 8006dac:	4bbebc20 	.word	0x4bbebc20

08006db0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b08b      	sub	sp, #44	@ 0x2c
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006db8:	4bae      	ldr	r3, [pc, #696]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006dc2:	4bac      	ldr	r3, [pc, #688]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006dcc:	4ba9      	ldr	r3, [pc, #676]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	0a1b      	lsrs	r3, r3, #8
 8006dd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dd6:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006dd8:	4ba6      	ldr	r3, [pc, #664]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006de4:	4ba3      	ldr	r3, [pc, #652]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de8:	08db      	lsrs	r3, r3, #3
 8006dea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8126 	beq.w	8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d053      	beq.n	8006eb6 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d86f      	bhi.n	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d02b      	beq.n	8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006e20:	e068      	b.n	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e22:	4b94      	ldr	r3, [pc, #592]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	08db      	lsrs	r3, r3, #3
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	4a92      	ldr	r2, [pc, #584]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e32:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e5a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800707c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006e76:	e068      	b.n	8006f4a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e94:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e98:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800707c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006eb4:	e049      	b.n	8006f4a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ed6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800707c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006ef2:	e02a      	b.n	8006f4a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	4a5e      	ldr	r2, [pc, #376]	@ (8007078 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	ee07 3a90 	vmov	s15, r3
 8006f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f28:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f2c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800707c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006f48:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f56:	d121      	bne.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006f58:	4b46      	ldr	r3, [pc, #280]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d017      	beq.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f64:	4b43      	ldr	r3, [pc, #268]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f68:	0a5b      	lsrs	r3, r3, #9
 8006f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006f7e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e006      	b.n	8006fa2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	e002      	b.n	8006fa2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fa2:	4b34      	ldr	r3, [pc, #208]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fae:	d121      	bne.n	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006fb0:	4b30      	ldr	r3, [pc, #192]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d017      	beq.n	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc0:	0c1b      	lsrs	r3, r3, #16
 8006fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006fd6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	605a      	str	r2, [r3, #4]
 8006fea:	e006      	b.n	8006ffa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007006:	d121      	bne.n	800704c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007008:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d017      	beq.n	8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007014:	4b17      	ldr	r3, [pc, #92]	@ (8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007018:	0e1b      	lsrs	r3, r3, #24
 800701a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007026:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800702a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800702e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007042:	e010      	b.n	8007066 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	609a      	str	r2, [r3, #8]
}
 800704a:	e00c      	b.n	8007066 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	609a      	str	r2, [r3, #8]
}
 8007052:	e008      	b.n	8007066 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	609a      	str	r2, [r3, #8]
}
 8007066:	bf00      	nop
 8007068:	372c      	adds	r7, #44	@ 0x2c
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	44020c00 	.word	0x44020c00
 8007078:	03d09000 	.word	0x03d09000
 800707c:	46000000 	.word	0x46000000
 8007080:	4a742400 	.word	0x4a742400
 8007084:	4bbebc20 	.word	0x4bbebc20

08007088 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007088:	b480      	push	{r7}
 800708a:	b08b      	sub	sp, #44	@ 0x2c
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007090:	4bae      	ldr	r3, [pc, #696]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007098:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800709a:	4bac      	ldr	r3, [pc, #688]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80070a4:	4ba9      	ldr	r3, [pc, #676]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a8:	0a1b      	lsrs	r3, r3, #8
 80070aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ae:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80070b0:	4ba6      	ldr	r3, [pc, #664]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80070bc:	4ba3      	ldr	r3, [pc, #652]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c0:	08db      	lsrs	r3, r3, #3
 80070c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
 80070cc:	ee07 3a90 	vmov	s15, r3
 80070d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8126 	beq.w	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d053      	beq.n	800718e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d86f      	bhi.n	80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d02b      	beq.n	8007150 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80070f8:	e068      	b.n	80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070fa:	4b94      	ldr	r3, [pc, #592]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	4a92      	ldr	r2, [pc, #584]	@ (8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	ee07 3a90 	vmov	s15, r3
 800711c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007132:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800714e:	e068      	b.n	8007222 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007170:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007188:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800718c:	e049      	b.n	8007222 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800735c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800719c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80071ae:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80071ca:	e02a      	b.n	8007222 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071cc:	4b5f      	ldr	r3, [pc, #380]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	4a5e      	ldr	r2, [pc, #376]	@ (8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
 80071dc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007200:	ed97 6a04 	vldr	s12, [r7, #16]
 8007204:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007210:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007220:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007222:	4b4a      	ldr	r3, [pc, #296]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800722a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800722e:	d121      	bne.n	8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007230:	4b46      	ldr	r3, [pc, #280]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800723c:	4b43      	ldr	r3, [pc, #268]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800723e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007240:	0a5b      	lsrs	r3, r3, #9
 8007242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800724e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007252:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007256:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800725a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007262:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e006      	b.n	800727a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e002      	b.n	800727a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800727a:	4b34      	ldr	r3, [pc, #208]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007286:	d121      	bne.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007288:	4b30      	ldr	r3, [pc, #192]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d017      	beq.n	80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007294:	4b2d      	ldr	r3, [pc, #180]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80072a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072aa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80072ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80072b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ba:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	e006      	b.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	e002      	b.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072d2:	4b1e      	ldr	r3, [pc, #120]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072de:	d121      	bne.n	8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80072e0:	4b1a      	ldr	r3, [pc, #104]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d017      	beq.n	800731c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072ec:	4b17      	ldr	r3, [pc, #92]	@ (800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f0:	0e1b      	lsrs	r3, r3, #24
 80072f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80072fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007302:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007306:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800730a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007312:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800731a:	e010      	b.n	800733e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	609a      	str	r2, [r3, #8]
}
 8007322:	e00c      	b.n	800733e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
}
 800732a:	e008      	b.n	800733e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	609a      	str	r2, [r3, #8]
}
 800733e:	bf00      	nop
 8007340:	372c      	adds	r7, #44	@ 0x2c
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	44020c00 	.word	0x44020c00
 8007350:	03d09000 	.word	0x03d09000
 8007354:	46000000 	.word	0x46000000
 8007358:	4a742400 	.word	0x4a742400
 800735c:	4bbebc20 	.word	0x4bbebc20

08007360 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007360:	b590      	push	{r4, r7, lr}
 8007362:	b08f      	sub	sp, #60	@ 0x3c
 8007364:	af00      	add	r7, sp, #0
 8007366:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800736a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800736e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007372:	4321      	orrs	r1, r4
 8007374:	d150      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007376:	4b26      	ldr	r3, [pc, #152]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800737c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007380:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007382:	4b23      	ldr	r3, [pc, #140]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b02      	cmp	r3, #2
 800738e:	d108      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007396:	d104      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007398:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	f002 baf6 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80073a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80073a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b0:	d108      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073b8:	d104      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80073ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073be:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c0:	f002 bae5 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80073c4:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073d0:	d119      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073d8:	d115      	bne.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80073da:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80073e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e6:	d30a      	bcc.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80073e8:	4b09      	ldr	r3, [pc, #36]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	0a1b      	lsrs	r3, r3, #8
 80073ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073f2:	4a08      	ldr	r2, [pc, #32]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80073fa:	f002 bac8 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007402:	f002 bac4 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
 800740a:	f002 bac0 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800740e:	bf00      	nop
 8007410:	44020c00 	.word	0x44020c00
 8007414:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800741c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007420:	ea50 0104 	orrs.w	r1, r0, r4
 8007424:	f001 8242 	beq.w	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 8007428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742c:	2801      	cmp	r0, #1
 800742e:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007432:	f082 82a9 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800743e:	ea50 0104 	orrs.w	r1, r0, r4
 8007442:	f001 8139 	beq.w	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 8007446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800744a:	2801      	cmp	r0, #1
 800744c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007450:	f082 829a 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007458:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800745c:	ea50 0104 	orrs.w	r1, r0, r4
 8007460:	f001 85ce 	beq.w	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 8007464:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007468:	2801      	cmp	r0, #1
 800746a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800746e:	f082 828b 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007476:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800747a:	ea50 0104 	orrs.w	r1, r0, r4
 800747e:	f001 8518 	beq.w	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 8007482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007486:	2801      	cmp	r0, #1
 8007488:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800748c:	f082 827c 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007494:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007498:	ea50 0104 	orrs.w	r1, r0, r4
 800749c:	f001 846a 	beq.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 80074a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074a4:	2801      	cmp	r0, #1
 80074a6:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80074aa:	f082 826d 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80074ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074b2:	f1a1 0420 	sub.w	r4, r1, #32
 80074b6:	ea50 0104 	orrs.w	r1, r0, r4
 80074ba:	f001 83b4 	beq.w	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 80074be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074c2:	2801      	cmp	r0, #1
 80074c4:	f171 0120 	sbcs.w	r1, r1, #32
 80074c8:	f082 825e 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80074cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074d0:	f1a1 0410 	sub.w	r4, r1, #16
 80074d4:	ea50 0104 	orrs.w	r1, r0, r4
 80074d8:	f002 8222 	beq.w	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 80074dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074e0:	2801      	cmp	r0, #1
 80074e2:	f171 0110 	sbcs.w	r1, r1, #16
 80074e6:	f082 824f 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80074ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ee:	f1a1 0408 	sub.w	r4, r1, #8
 80074f2:	ea50 0104 	orrs.w	r1, r0, r4
 80074f6:	f002 8198 	beq.w	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 80074fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074fe:	2801      	cmp	r0, #1
 8007500:	f171 0108 	sbcs.w	r1, r1, #8
 8007504:	f082 8240 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800750c:	1f0c      	subs	r4, r1, #4
 800750e:	ea50 0104 	orrs.w	r1, r0, r4
 8007512:	f001 8614 	beq.w	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 8007516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800751a:	2801      	cmp	r0, #1
 800751c:	f171 0104 	sbcs.w	r1, r1, #4
 8007520:	f082 8232 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007528:	1e8c      	subs	r4, r1, #2
 800752a:	ea50 0104 	orrs.w	r1, r0, r4
 800752e:	f002 810f 	beq.w	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007536:	2801      	cmp	r0, #1
 8007538:	f171 0102 	sbcs.w	r1, r1, #2
 800753c:	f082 8224 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007544:	1e4c      	subs	r4, r1, #1
 8007546:	ea50 0104 	orrs.w	r1, r0, r4
 800754a:	f002 809a 	beq.w	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800754e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007552:	2801      	cmp	r0, #1
 8007554:	f171 0101 	sbcs.w	r1, r1, #1
 8007558:	f082 8216 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800755c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007560:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007564:	4321      	orrs	r1, r4
 8007566:	f002 8025 	beq.w	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800756a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800756e:	4cd6      	ldr	r4, [pc, #856]	@ (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8007570:	42a0      	cmp	r0, r4
 8007572:	f171 0100 	sbcs.w	r1, r1, #0
 8007576:	f082 8207 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800757a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800757e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007582:	4321      	orrs	r1, r4
 8007584:	f001 87a5 	beq.w	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 8007588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758c:	4ccf      	ldr	r4, [pc, #828]	@ (80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800758e:	42a0      	cmp	r0, r4
 8007590:	f171 0100 	sbcs.w	r1, r1, #0
 8007594:	f082 81f8 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800759c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80075a0:	4321      	orrs	r1, r4
 80075a2:	f001 871d 	beq.w	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 80075a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075aa:	4cc9      	ldr	r4, [pc, #804]	@ (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	f171 0100 	sbcs.w	r1, r1, #0
 80075b2:	f082 81e9 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80075b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ba:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80075be:	4321      	orrs	r1, r4
 80075c0:	f001 8666 	beq.w	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 80075c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075c8:	4cc2      	ldr	r4, [pc, #776]	@ (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80075ca:	42a0      	cmp	r0, r4
 80075cc:	f171 0100 	sbcs.w	r1, r1, #0
 80075d0:	f082 81da 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80075d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075d8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80075dc:	4321      	orrs	r1, r4
 80075de:	f001 85de 	beq.w	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 80075e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075e6:	4cbc      	ldr	r4, [pc, #752]	@ (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80075e8:	42a0      	cmp	r0, r4
 80075ea:	f171 0100 	sbcs.w	r1, r1, #0
 80075ee:	f082 81cb 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80075f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075f6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80075fa:	4321      	orrs	r1, r4
 80075fc:	f002 814a 	beq.w	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 8007600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007604:	4cb5      	ldr	r4, [pc, #724]	@ (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007606:	42a0      	cmp	r0, r4
 8007608:	f171 0100 	sbcs.w	r1, r1, #0
 800760c:	f082 81bc 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007614:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007618:	4321      	orrs	r1, r4
 800761a:	f000 826b 	beq.w	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800761e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007622:	4caf      	ldr	r4, [pc, #700]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007624:	42a0      	cmp	r0, r4
 8007626:	f171 0100 	sbcs.w	r1, r1, #0
 800762a:	f082 81ad 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800762e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007632:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007636:	4321      	orrs	r1, r4
 8007638:	f000 87e9 	beq.w	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 800763c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007640:	4ca8      	ldr	r4, [pc, #672]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007642:	42a0      	cmp	r0, r4
 8007644:	f171 0100 	sbcs.w	r1, r1, #0
 8007648:	f082 819e 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800764c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007650:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007654:	4321      	orrs	r1, r4
 8007656:	f000 81ce 	beq.w	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800765a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800765e:	4ca2      	ldr	r4, [pc, #648]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007660:	42a0      	cmp	r0, r4
 8007662:	f171 0100 	sbcs.w	r1, r1, #0
 8007666:	f082 818f 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800766a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800766e:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007672:	4321      	orrs	r1, r4
 8007674:	f000 8140 	beq.w	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800767c:	4c9b      	ldr	r4, [pc, #620]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800767e:	42a0      	cmp	r0, r4
 8007680:	f171 0100 	sbcs.w	r1, r1, #0
 8007684:	f082 8180 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800768c:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007690:	4321      	orrs	r1, r4
 8007692:	f001 8229 	beq.w	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 8007696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800769a:	4c95      	ldr	r4, [pc, #596]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800769c:	42a0      	cmp	r0, r4
 800769e:	f171 0100 	sbcs.w	r1, r1, #0
 80076a2:	f082 8171 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80076a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076aa:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80076ae:	4321      	orrs	r1, r4
 80076b0:	f001 8173 	beq.w	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 80076b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076b8:	4c8e      	ldr	r4, [pc, #568]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80076ba:	42a0      	cmp	r0, r4
 80076bc:	f171 0100 	sbcs.w	r1, r1, #0
 80076c0:	f082 8162 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80076c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076c8:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80076cc:	4321      	orrs	r1, r4
 80076ce:	f001 8130 	beq.w	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80076d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076d6:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80076da:	f171 0100 	sbcs.w	r1, r1, #0
 80076de:	f082 8153 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80076e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e6:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80076ea:	4321      	orrs	r1, r4
 80076ec:	f001 8093 	beq.w	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 80076f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076f4:	f248 0401 	movw	r4, #32769	@ 0x8001
 80076f8:	42a0      	cmp	r0, r4
 80076fa:	f171 0100 	sbcs.w	r1, r1, #0
 80076fe:	f082 8143 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007706:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800770a:	4321      	orrs	r1, r4
 800770c:	f001 8040 	beq.w	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 8007710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007714:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007718:	42a0      	cmp	r0, r4
 800771a:	f171 0100 	sbcs.w	r1, r1, #0
 800771e:	f082 8133 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007726:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800772a:	4321      	orrs	r1, r4
 800772c:	f000 87ed 	beq.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8007730:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007734:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007738:	42a0      	cmp	r0, r4
 800773a:	f171 0100 	sbcs.w	r1, r1, #0
 800773e:	f082 8123 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007742:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007746:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800774a:	4321      	orrs	r1, r4
 800774c:	f000 86f9 	beq.w	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007754:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007758:	42a0      	cmp	r0, r4
 800775a:	f171 0100 	sbcs.w	r1, r1, #0
 800775e:	f082 8113 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007766:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800776a:	4321      	orrs	r1, r4
 800776c:	f000 8683 	beq.w	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007774:	f640 0401 	movw	r4, #2049	@ 0x801
 8007778:	42a0      	cmp	r0, r4
 800777a:	f171 0100 	sbcs.w	r1, r1, #0
 800777e:	f082 8103 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007786:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800778a:	4321      	orrs	r1, r4
 800778c:	f000 860d 	beq.w	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 8007790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007794:	f240 4401 	movw	r4, #1025	@ 0x401
 8007798:	42a0      	cmp	r0, r4
 800779a:	f171 0100 	sbcs.w	r1, r1, #0
 800779e:	f082 80f3 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80077a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a6:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80077aa:	4321      	orrs	r1, r4
 80077ac:	f000 858b 	beq.w	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 80077b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077b4:	f240 2401 	movw	r4, #513	@ 0x201
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	f171 0100 	sbcs.w	r1, r1, #0
 80077be:	f082 80e3 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80077c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077c6:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80077ca:	4321      	orrs	r1, r4
 80077cc:	f000 8510 	beq.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80077d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077d4:	f240 1401 	movw	r4, #257	@ 0x101
 80077d8:	42a0      	cmp	r0, r4
 80077da:	f171 0100 	sbcs.w	r1, r1, #0
 80077de:	f082 80d3 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80077e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077e6:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80077ea:	4321      	orrs	r1, r4
 80077ec:	f000 8495 	beq.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80077f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077f4:	2881      	cmp	r0, #129	@ 0x81
 80077f6:	f171 0100 	sbcs.w	r1, r1, #0
 80077fa:	f082 80c5 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80077fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007802:	2821      	cmp	r0, #33	@ 0x21
 8007804:	f171 0100 	sbcs.w	r1, r1, #0
 8007808:	d254      	bcs.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800780a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800780e:	4301      	orrs	r1, r0
 8007810:	f002 80ba 	beq.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007818:	1e42      	subs	r2, r0, #1
 800781a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800781e:	2a20      	cmp	r2, #32
 8007820:	f173 0100 	sbcs.w	r1, r3, #0
 8007824:	f082 80b0 	bcs.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007828:	2a1f      	cmp	r2, #31
 800782a:	f202 80ad 	bhi.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800782e:	a101      	add	r1, pc, #4	@ (adr r1, 8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8007830:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007834:	08007b39 	.word	0x08007b39
 8007838:	08007c19 	.word	0x08007c19
 800783c:	08009989 	.word	0x08009989
 8007840:	08007cd9 	.word	0x08007cd9
 8007844:	08009989 	.word	0x08009989
 8007848:	08009989 	.word	0x08009989
 800784c:	08009989 	.word	0x08009989
 8007850:	08007da9 	.word	0x08007da9
 8007854:	08009989 	.word	0x08009989
 8007858:	08009989 	.word	0x08009989
 800785c:	08009989 	.word	0x08009989
 8007860:	08009989 	.word	0x08009989
 8007864:	08009989 	.word	0x08009989
 8007868:	08009989 	.word	0x08009989
 800786c:	08009989 	.word	0x08009989
 8007870:	08007e8b 	.word	0x08007e8b
 8007874:	08009989 	.word	0x08009989
 8007878:	08009989 	.word	0x08009989
 800787c:	08009989 	.word	0x08009989
 8007880:	08009989 	.word	0x08009989
 8007884:	08009989 	.word	0x08009989
 8007888:	08009989 	.word	0x08009989
 800788c:	08009989 	.word	0x08009989
 8007890:	08009989 	.word	0x08009989
 8007894:	08009989 	.word	0x08009989
 8007898:	08009989 	.word	0x08009989
 800789c:	08009989 	.word	0x08009989
 80078a0:	08009989 	.word	0x08009989
 80078a4:	08009989 	.word	0x08009989
 80078a8:	08009989 	.word	0x08009989
 80078ac:	08009989 	.word	0x08009989
 80078b0:	08007f61 	.word	0x08007f61
 80078b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80078bc:	430b      	orrs	r3, r1
 80078be:	f000 83ba 	beq.w	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 80078c2:	f002 b861 	b.w	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80078c6:	bf00      	nop
 80078c8:	80000001 	.word	0x80000001
 80078cc:	40000001 	.word	0x40000001
 80078d0:	20000001 	.word	0x20000001
 80078d4:	10000001 	.word	0x10000001
 80078d8:	08000001 	.word	0x08000001
 80078dc:	04000001 	.word	0x04000001
 80078e0:	00400001 	.word	0x00400001
 80078e4:	00200001 	.word	0x00200001
 80078e8:	00100001 	.word	0x00100001
 80078ec:	00080001 	.word	0x00080001
 80078f0:	00040001 	.word	0x00040001
 80078f4:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80078f8:	4b9f      	ldr	r3, [pc, #636]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80078fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078fe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007902:	633b      	str	r3, [r7, #48]	@ 0x30
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800790a:	d036      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007912:	d86b      	bhi.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007916:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800791a:	d02b      	beq.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007922:	d863      	bhi.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800792a:	d01b      	beq.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007932:	d85b      	bhi.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007940:	d008      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 8007942:	e053      	b.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007944:	f107 0320 	add.w	r3, r7, #32
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff f8c5 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007952:	e04e      	b.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	4618      	mov	r0, r3
 800795a:	f7ff fa29 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007962:	e046      	b.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007964:	f107 0308 	add.w	r3, r7, #8
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fb8d 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007972:	e03e      	b.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007974:	4b81      	ldr	r3, [pc, #516]	@ (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007976:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007978:	e03b      	b.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800797a:	4b7f      	ldr	r3, [pc, #508]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800797c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007980:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007984:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007986:	4b7c      	ldr	r3, [pc, #496]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d10c      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007998:	4b77      	ldr	r3, [pc, #476]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	08db      	lsrs	r3, r3, #3
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	4a77      	ldr	r2, [pc, #476]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079a4:	fa22 f303 	lsr.w	r3, r2, r3
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079aa:	e01e      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ac:	4b72      	ldr	r3, [pc, #456]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b8:	d106      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80079ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c0:	d102      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80079c2:	4b70      	ldr	r3, [pc, #448]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80079c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c6:	e010      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079c8:	4b6b      	ldr	r3, [pc, #428]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079d4:	d106      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079dc:	d102      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80079de:	4b6a      	ldr	r3, [pc, #424]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e2:	e002      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80079e8:	e003      	b.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80079ea:	e002      	b.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079f0:	bf00      	nop
          }
        }
        break;
 80079f2:	f001 bfcc 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80079f6:	4b60      	ldr	r3, [pc, #384]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80079f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079fc:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a08:	d036      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a10:	d86b      	bhi.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007a18:	d02b      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007a20:	d863      	bhi.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a28:	d01b      	beq.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a30:	d85b      	bhi.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007a3e:	d008      	beq.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 8007a40:	e053      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x78a>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a42:	f107 0320 	add.w	r3, r7, #32
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff f846 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a50:	e04e      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a52:	f107 0314 	add.w	r3, r7, #20
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff f9aa 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a60:	e046      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fb0e 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a70:	e03e      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a72:	4b42      	ldr	r3, [pc, #264]	@ (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a76:	e03b      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a78:	4b3f      	ldr	r3, [pc, #252]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a7e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a84:	4b3c      	ldr	r3, [pc, #240]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d10c      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8007a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d109      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a96:	4b38      	ldr	r3, [pc, #224]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	08db      	lsrs	r3, r3, #3
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	4a37      	ldr	r2, [pc, #220]	@ (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa8:	e01e      	b.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007aaa:	4b33      	ldr	r3, [pc, #204]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab6:	d106      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007abe:	d102      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ac0:	4b30      	ldr	r3, [pc, #192]	@ (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac4:	e010      	b.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ad2:	d106      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ada:	d102      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007adc:	4b2a      	ldr	r3, [pc, #168]	@ (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae0:	e002      	b.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007ae6:	e003      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 8007ae8:	e002      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007aee:	bf00      	nop
          }
        }
        break;
 8007af0:	f001 bf4d 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007af4:	4b20      	ldr	r3, [pc, #128]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007af6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b06:	f107 0320 	add.w	r3, r7, #32
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe ffe4 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b14:	f001 bf3b 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1a:	2b40      	cmp	r3, #64	@ 0x40
 8007b1c:	d108      	bne.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1e:	f107 0314 	add.w	r3, r7, #20
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff f944 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b2c:	f001 bf2f 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b34:	f001 bf2b 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b38:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d104      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b4a:	f7fd f81b 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8007b4e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b50:	f001 bf1d 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007b54:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b60:	d114      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d111      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff f91f 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b76:	e04d      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 8007b78:	44020c00 	.word	0x44020c00
 8007b7c:	00bb8000 	.word	0x00bb8000
 8007b80:	03d09000 	.word	0x03d09000
 8007b84:	003d0900 	.word	0x003d0900
 8007b88:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007b8c:	4ba0      	ldr	r3, [pc, #640]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b98:	d10a      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d107      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ba0:	f107 0308 	add.w	r3, r7, #8
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff fa6f 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bae:	e031      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007bb0:	4b97      	ldr	r3, [pc, #604]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d10c      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d109      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bc2:	4b93      	ldr	r3, [pc, #588]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	08db      	lsrs	r3, r3, #3
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	4a91      	ldr	r2, [pc, #580]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007bce:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd4:	e01e      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be2:	d105      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d102      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 8007bea:	4b8b      	ldr	r3, [pc, #556]	@ (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bee:	e011      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007bf0:	4b87      	ldr	r3, [pc, #540]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d106      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	2b05      	cmp	r3, #5
 8007c02:	d103      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 8007c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c0a:	e003      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c10:	f001 bebd 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007c14:	f001 bebb 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007c18:	4b7d      	ldr	r3, [pc, #500]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c2a:	f7fc ff95 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8007c2e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c30:	f001 bead 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007c34:	4b76      	ldr	r3, [pc, #472]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c40:	d10a      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d107      	bne.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff f8af 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c56:	e03d      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d108      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5e:	f107 0308 	add.w	r3, r7, #8
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fa10 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c6c:	f001 be8f 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007c70:	4b67      	ldr	r3, [pc, #412]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d10c      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	2b18      	cmp	r3, #24
 8007c80:	d109      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c82:	4b63      	ldr	r3, [pc, #396]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	08db      	lsrs	r3, r3, #3
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	4a61      	ldr	r2, [pc, #388]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c94:	e01e      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007c96:	4b5e      	ldr	r3, [pc, #376]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ca2:	d105      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d102      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 8007caa:	4b5b      	ldr	r3, [pc, #364]	@ (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cae:	e011      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007cb0:	4b57      	ldr	r3, [pc, #348]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	2b28      	cmp	r3, #40	@ 0x28
 8007cc2:	d103      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 8007cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cca:	e003      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cd0:	f001 be5d 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007cd4:	f001 be5b 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cde:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007ce2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d104      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cea:	f7fc ff35 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8007cee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cf0:	f001 be4d 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007cf4:	4b46      	ldr	r3, [pc, #280]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d00:	d10a      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	2b40      	cmp	r3, #64	@ 0x40
 8007d06:	d107      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d08:	f107 0314 	add.w	r3, r7, #20
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff f84f 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d16:	e045      	b.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007d18:	4b3d      	ldr	r3, [pc, #244]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d24:	d10a      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	2b80      	cmp	r3, #128	@ 0x80
 8007d2a:	d107      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d2c:	f107 0308 	add.w	r3, r7, #8
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff f9a9 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3a:	e033      	b.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007d3c:	4b34      	ldr	r3, [pc, #208]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d10c      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d4c:	d109      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d4e:	4b30      	ldr	r3, [pc, #192]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	08db      	lsrs	r3, r3, #3
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	4a2e      	ldr	r2, [pc, #184]	@ (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d60:	e020      	b.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007d62:	4b2b      	ldr	r3, [pc, #172]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d6e:	d106      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d76:	d102      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 8007d78:	4b27      	ldr	r3, [pc, #156]	@ (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7c:	e012      	b.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d7e:	4b24      	ldr	r3, [pc, #144]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007d92:	d103      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 8007d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9a:	e003      	b.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007da0:	f001 bdf5 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007da4:	f001 bdf3 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007da8:	4b19      	ldr	r3, [pc, #100]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007dae:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007db2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007dba:	f7fc fecd 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8007dbe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007dc0:	f001 bde5 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007dc4:	4b12      	ldr	r3, [pc, #72]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dd0:	d10b      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dd8:	d107      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dda:	f107 0314 	add.w	r3, r7, #20
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe ffe6 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de8:	e04d      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007dea:	4b09      	ldr	r3, [pc, #36]	@ (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df6:	d111      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dfe:	d10d      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e00:	f107 0308 	add.w	r3, r7, #8
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff f93f 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0e:	e03a      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8007e10:	44020c00 	.word	0x44020c00
 8007e14:	03d09000 	.word	0x03d09000
 8007e18:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007e1c:	4ba0      	ldr	r3, [pc, #640]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d10d      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e2e:	d109      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e30:	4b9b      	ldr	r3, [pc, #620]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	4a9a      	ldr	r2, [pc, #616]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e42:	e020      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007e44:	4b96      	ldr	r3, [pc, #600]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e50:	d106      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e58:	d102      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 8007e5a:	4b93      	ldr	r3, [pc, #588]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5e:	e012      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007e60:	4b8f      	ldr	r3, [pc, #572]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d107      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e74:	d103      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 8007e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e7c:	e003      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e82:	f001 bd84 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007e86:	f001 bd82 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e8a:	4b85      	ldr	r3, [pc, #532]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e90:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007e94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fc fe5c 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ea2:	f001 bd74 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007ea6:	4b7e      	ldr	r3, [pc, #504]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eb2:	d10b      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eba:	d107      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ebc:	f107 0314 	add.w	r3, r7, #20
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe ff75 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eca:	e047      	b.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007ecc:	4b74      	ldr	r3, [pc, #464]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed8:	d10b      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee0:	d107      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ee2:	f107 0308 	add.w	r3, r7, #8
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff f8ce 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef0:	e034      	b.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007ef2:	4b6b      	ldr	r3, [pc, #428]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d10d      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f04:	d109      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f06:	4b66      	ldr	r3, [pc, #408]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	08db      	lsrs	r3, r3, #3
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	4a64      	ldr	r2, [pc, #400]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007f12:	fa22 f303 	lsr.w	r3, r2, r3
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f18:	e020      	b.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007f1a:	4b61      	ldr	r3, [pc, #388]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f26:	d106      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f2e:	d102      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 8007f30:	4b5d      	ldr	r3, [pc, #372]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f34:	e012      	b.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f36:	4b5a      	ldr	r3, [pc, #360]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d107      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f4a:	d103      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 8007f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f52:	e003      	b.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f58:	f001 bd19 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007f5c:	f001 bd17 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007f60:	4b4f      	ldr	r3, [pc, #316]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f66:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007f6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f72:	f7fc fdf1 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8007f76:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f78:	f001 bd09 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007f7c:	4b48      	ldr	r3, [pc, #288]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f88:	d10b      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f92:	f107 0314 	add.w	r3, r7, #20
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe ff0a 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa0:	e047      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fae:	d10b      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb6:	d107      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff f863 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc6:	e034      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007fc8:	4b35      	ldr	r3, [pc, #212]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d10d      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007fda:	d109      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fdc:	4b30      	ldr	r3, [pc, #192]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	08db      	lsrs	r3, r3, #3
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fee:	e020      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ffc:	d106      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008004:	d102      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 8008006:	4b28      	ldr	r3, [pc, #160]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
 800800a:	e012      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800800c:	4b24      	ldr	r3, [pc, #144]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800800e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d107      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 800801a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008020:	d103      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008026:	637b      	str	r3, [r7, #52]	@ 0x34
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800802e:	f001 bcae 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008032:	f001 bcac 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008036:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800803c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008040:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008048:	f7fc fd86 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 800804c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800804e:	f001 bc9e 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008052:	4b13      	ldr	r3, [pc, #76]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800805a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800805e:	d10b      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008066:	d107      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008068:	f107 0314 	add.w	r3, r7, #20
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe fe9f 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
 8008076:	e04e      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008078:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008084:	d112      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800808c:	d10e      	bne.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fff8 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
 800809c:	e03b      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800809e:	bf00      	nop
 80080a0:	44020c00 	.word	0x44020c00
 80080a4:	03d09000 	.word	0x03d09000
 80080a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80080ac:	4ba0      	ldr	r3, [pc, #640]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d10d      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80080be:	d109      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080c0:	4b9b      	ldr	r3, [pc, #620]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	08db      	lsrs	r3, r3, #3
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	4a9a      	ldr	r2, [pc, #616]	@ (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80080cc:	fa22 f303 	lsr.w	r3, r2, r3
 80080d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080d2:	e020      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80080d4:	4b96      	ldr	r3, [pc, #600]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e0:	d106      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e8:	d102      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 80080ea:	4b93      	ldr	r3, [pc, #588]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 80080ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ee:	e012      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80080f0:	4b8f      	ldr	r3, [pc, #572]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80080f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d107      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008104:	d103      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 8008106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800810a:	637b      	str	r3, [r7, #52]	@ 0x34
 800810c:	e003      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008112:	f001 bc3c 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008116:	f001 bc3a 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800811a:	4b85      	ldr	r3, [pc, #532]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800811c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008120:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008124:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800812c:	f7fc fd14 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8008130:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008132:	f001 bc2c 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008136:	4b7e      	ldr	r3, [pc, #504]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800813e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008142:	d10b      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8008144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008146:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800814a:	d107      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe fe2d 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
 800815a:	e047      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800815c:	4b74      	ldr	r3, [pc, #464]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008168:	d10b      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008170:	d107      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe ff86 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008180:	e034      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008182:	4b6b      	ldr	r3, [pc, #428]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d10d      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008194:	d109      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008196:	4b66      	ldr	r3, [pc, #408]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	08db      	lsrs	r3, r3, #3
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	4a64      	ldr	r2, [pc, #400]	@ (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80081a2:	fa22 f303 	lsr.w	r3, r2, r3
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a8:	e020      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80081aa:	4b61      	ldr	r3, [pc, #388]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081b6:	d106      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 80081c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c4:	e012      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80081c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80081c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d107      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80081da:	d103      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 80081dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e2:	e003      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081e8:	f001 bbd1 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80081ec:	f001 bbcf 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80081f0:	4b4f      	ldr	r3, [pc, #316]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80081f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081f6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80081fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d104      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008202:	f7fc fca9 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8008206:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008208:	f001 bbc1 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800820c:	4b48      	ldr	r3, [pc, #288]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008218:	d10b      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008220:	d107      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008222:	f107 0314 	add.w	r3, r7, #20
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe fdc2 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008230:	e047      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008232:	4b3f      	ldr	r3, [pc, #252]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800823a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800823e:	d10b      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008246:	d107      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe ff1b 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	637b      	str	r3, [r7, #52]	@ 0x34
 8008256:	e034      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008258:	4b35      	ldr	r3, [pc, #212]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b02      	cmp	r3, #2
 8008262:	d10d      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800826a:	d109      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800826c:	4b30      	ldr	r3, [pc, #192]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	08db      	lsrs	r3, r3, #3
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	4a2f      	ldr	r2, [pc, #188]	@ (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8008278:	fa22 f303 	lsr.w	r3, r2, r3
 800827c:	637b      	str	r3, [r7, #52]	@ 0x34
 800827e:	e020      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008280:	4b2b      	ldr	r3, [pc, #172]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800828c:	d106      	bne.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008294:	d102      	bne.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 8008296:	4b28      	ldr	r3, [pc, #160]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8008298:	637b      	str	r3, [r7, #52]	@ 0x34
 800829a:	e012      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800829c:	4b24      	ldr	r3, [pc, #144]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800829e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d107      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80082b0:	d103      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 80082b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b8:	e003      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082be:	f001 bb66 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80082c2:	f001 bb64 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80082c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80082c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082cc:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80082d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d104      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082d8:	f7fc fc3e 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 80082dc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80082de:	f001 bb56 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80082e2:	4b13      	ldr	r3, [pc, #76]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082ee:	d10b      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082f6:	d107      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082f8:	f107 0314 	add.w	r3, r7, #20
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fd57 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
 8008306:	e04e      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008308:	4b09      	ldr	r3, [pc, #36]	@ (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008314:	d112      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800831c:	d10e      	bne.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe feb0 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
 800832c:	e03b      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 800832e:	bf00      	nop
 8008330:	44020c00 	.word	0x44020c00
 8008334:	03d09000 	.word	0x03d09000
 8008338:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800833c:	4b9f      	ldr	r3, [pc, #636]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b02      	cmp	r3, #2
 8008346:	d10d      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800834e:	d109      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008350:	4b9a      	ldr	r3, [pc, #616]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	08db      	lsrs	r3, r3, #3
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	4a99      	ldr	r2, [pc, #612]	@ (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
 8008362:	e020      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008364:	4b95      	ldr	r3, [pc, #596]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800836c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008370:	d106      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008378:	d102      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 800837a:	4b92      	ldr	r3, [pc, #584]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
 800837e:	e012      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008380:	4b8e      	ldr	r3, [pc, #568]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b02      	cmp	r3, #2
 800838c:	d107      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008394:	d103      	bne.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 8008396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800839a:	637b      	str	r3, [r7, #52]	@ 0x34
 800839c:	e003      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083a2:	f001 baf4 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80083a6:	f001 baf2 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80083aa:	4b84      	ldr	r3, [pc, #528]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80083ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80083b0:	f003 0307 	and.w	r3, r3, #7
 80083b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083bc:	f7fc fbcc 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 80083c0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80083c2:	f001 bae4 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80083c6:	4b7d      	ldr	r3, [pc, #500]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083d2:	d10a      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d107      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083da:	f107 0314 	add.w	r3, r7, #20
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fce6 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e8:	e043      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80083ea:	4b74      	ldr	r3, [pc, #464]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f6:	d10a      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d107      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083fe:	f107 0308 	add.w	r3, r7, #8
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fe40 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	e031      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800840e:	4b6b      	ldr	r3, [pc, #428]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b02      	cmp	r3, #2
 8008418:	d10c      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	2b03      	cmp	r3, #3
 800841e:	d109      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008420:	4b66      	ldr	r3, [pc, #408]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	08db      	lsrs	r3, r3, #3
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	4a65      	ldr	r2, [pc, #404]	@ (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800842c:	fa22 f303 	lsr.w	r3, r2, r3
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
 8008432:	e01e      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008434:	4b61      	ldr	r3, [pc, #388]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800843c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008440:	d105      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	2b04      	cmp	r3, #4
 8008446:	d102      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 8008448:	4b5e      	ldr	r3, [pc, #376]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
 800844c:	e011      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800844e:	4b5b      	ldr	r3, [pc, #364]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b02      	cmp	r3, #2
 800845a:	d106      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	2b05      	cmp	r3, #5
 8008460:	d103      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
 8008468:	e003      	b.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800846e:	f001 ba8e 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008472:	f001 ba8c 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008476:	4b51      	ldr	r3, [pc, #324]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008478:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800847c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008480:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	2b00      	cmp	r3, #0
 8008486:	d104      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008488:	f7fc fb66 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 800848c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800848e:	f001 ba7e 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008492:	4b4a      	ldr	r3, [pc, #296]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800849a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800849e:	d10a      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	2b10      	cmp	r3, #16
 80084a4:	d107      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a6:	f107 0314 	add.w	r3, r7, #20
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fc80 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b4:	e043      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80084b6:	4b41      	ldr	r3, [pc, #260]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c2:	d10a      	bne.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d107      	bne.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ca:	f107 0308 	add.w	r3, r7, #8
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fdda 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d8:	e031      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80084da:	4b38      	ldr	r3, [pc, #224]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d10c      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	2b30      	cmp	r3, #48	@ 0x30
 80084ea:	d109      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084ec:	4b33      	ldr	r3, [pc, #204]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	08db      	lsrs	r3, r3, #3
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	4a32      	ldr	r2, [pc, #200]	@ (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80084f8:	fa22 f303 	lsr.w	r3, r2, r3
 80084fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fe:	e01e      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008500:	4b2e      	ldr	r3, [pc, #184]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800850c:	d105      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	2b40      	cmp	r3, #64	@ 0x40
 8008512:	d102      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 8008514:	4b2b      	ldr	r3, [pc, #172]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
 8008518:	e011      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800851a:	4b28      	ldr	r3, [pc, #160]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800851c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b02      	cmp	r3, #2
 8008526:	d106      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	2b50      	cmp	r3, #80	@ 0x50
 800852c:	d103      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 800852e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008532:	637b      	str	r3, [r7, #52]	@ 0x34
 8008534:	e003      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800853a:	f001 ba28 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800853e:	f001 ba26 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008542:	4b1e      	ldr	r3, [pc, #120]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008548:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800854c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008554:	f7fc fb2c 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 8008558:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800855a:	f001 ba18 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008564:	d108      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008566:	f107 0314 	add.w	r3, r7, #20
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fc20 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008574:	f001 ba0b 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800857e:	d108      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008580:	f107 0308 	add.w	r3, r7, #8
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fd7f 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800858e:	f001 b9fe 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008592:	4b0a      	ldr	r3, [pc, #40]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b02      	cmp	r3, #2
 800859c:	d114      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 800859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085a4:	d110      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085a6:	4b05      	ldr	r3, [pc, #20]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	08db      	lsrs	r3, r3, #3
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	4a03      	ldr	r2, [pc, #12]	@ (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80085b2:	fa22 f303 	lsr.w	r3, r2, r3
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b8:	e027      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 80085ba:	bf00      	nop
 80085bc:	44020c00 	.word	0x44020c00
 80085c0:	03d09000 	.word	0x03d09000
 80085c4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80085c8:	4ba0      	ldr	r3, [pc, #640]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085d4:	d106      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085dc:	d102      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 80085de:	4b9c      	ldr	r3, [pc, #624]	@ (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 80085e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e2:	e012      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80085e4:	4b99      	ldr	r3, [pc, #612]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80085e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d107      	bne.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80085f8:	d103      	bne.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 80085fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008600:	e003      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008606:	f001 b9c2 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800860a:	f001 b9c0 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800860e:	4b8f      	ldr	r3, [pc, #572]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008620:	f7fc fa7e 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8008624:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008626:	f001 b9b2 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	2b01      	cmp	r3, #1
 800862e:	d104      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 8008630:	f7fc f94a 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8008634:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008636:	f001 b9aa 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800863a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863c:	2b02      	cmp	r3, #2
 800863e:	d108      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fbb3 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800864e:	f001 b99e 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008652:	4b7e      	ldr	r3, [pc, #504]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800865e:	d105      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	2b03      	cmp	r3, #3
 8008664:	d102      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 8008666:	4b7b      	ldr	r3, [pc, #492]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 8008668:	637b      	str	r3, [r7, #52]	@ 0x34
 800866a:	e023      	b.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800866c:	4b77      	ldr	r3, [pc, #476]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0302 	and.w	r3, r3, #2
 8008674:	2b02      	cmp	r3, #2
 8008676:	d10c      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	2b04      	cmp	r3, #4
 800867c:	d109      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800867e:	4b73      	ldr	r3, [pc, #460]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	08db      	lsrs	r3, r3, #3
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	4a73      	ldr	r2, [pc, #460]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800868a:	fa22 f303 	lsr.w	r3, r2, r3
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008690:	e010      	b.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008692:	4b6e      	ldr	r3, [pc, #440]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800869a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800869e:	d105      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 80086a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	d102      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 80086a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086aa:	e003      	b.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086b0:	f001 b96d 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80086b4:	f001 b96b 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80086b8:	4b64      	ldr	r3, [pc, #400]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80086ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80086c4:	4b61      	ldr	r3, [pc, #388]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80086c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d106      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 80086d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086de:	e012      	b.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80086e0:	4b5a      	ldr	r3, [pc, #360]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80086e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086ee:	d106      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 80086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d103      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 80086f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80086fc:	e003      	b.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008702:	f001 b944 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008706:	f001 b942 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800870a:	4b50      	ldr	r3, [pc, #320]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800870c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008714:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800871c:	f7fc fa1c 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8008720:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008722:	f001 b934 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800872c:	d108      	bne.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800872e:	f107 0308 	add.w	r3, r7, #8
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fca8 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800873c:	f001 b927 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008740:	4b42      	ldr	r3, [pc, #264]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b02      	cmp	r3, #2
 800874a:	d10d      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008752:	d109      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008754:	4b3d      	ldr	r3, [pc, #244]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	08db      	lsrs	r3, r3, #3
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	4a3e      	ldr	r2, [pc, #248]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8008760:	fa22 f303 	lsr.w	r3, r2, r3
 8008764:	637b      	str	r3, [r7, #52]	@ 0x34
 8008766:	e011      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008768:	4b38      	ldr	r3, [pc, #224]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008774:	d106      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800877c:	d102      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 800877e:	4b34      	ldr	r3, [pc, #208]	@ (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8008780:	637b      	str	r3, [r7, #52]	@ 0x34
 8008782:	e003      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008788:	f001 b901 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800878c:	f001 b8ff 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008790:	4b2e      	ldr	r3, [pc, #184]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008796:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800879a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087a2:	f7fc f9d9 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 80087a6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80087a8:	f001 b8f1 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087b2:	d108      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087b4:	f107 0308 	add.w	r3, r7, #8
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fc65 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c2:	f001 b8e4 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80087c6:	4b21      	ldr	r3, [pc, #132]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d10d      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087d8:	d109      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087da:	4b1c      	ldr	r3, [pc, #112]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	08db      	lsrs	r3, r3, #3
 80087e0:	f003 0303 	and.w	r3, r3, #3
 80087e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 80087e6:	fa22 f303 	lsr.w	r3, r2, r3
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ec:	e011      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80087ee:	4b17      	ldr	r3, [pc, #92]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087fa:	d106      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008802:	d102      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 8008804:	4b12      	ldr	r3, [pc, #72]	@ (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
 8008808:	e003      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800880e:	f001 b8be 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008812:	f001 b8bc 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008816:	4b0d      	ldr	r3, [pc, #52]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8008818:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800881c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008820:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008828:	f7fc f9c2 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 800882c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800882e:	f001 b8ae 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008838:	d110      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883a:	f107 0308 	add.w	r3, r7, #8
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fc22 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008848:	f001 b8a1 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800884c:	44020c00 	.word	0x44020c00
 8008850:	003d0900 	.word	0x003d0900
 8008854:	017d7840 	.word	0x017d7840
 8008858:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800885c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b02      	cmp	r3, #2
 8008866:	d10d      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800886e:	d109      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008870:	4b99      	ldr	r3, [pc, #612]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	08db      	lsrs	r3, r3, #3
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	4a98      	ldr	r2, [pc, #608]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800887c:	fa22 f303 	lsr.w	r3, r2, r3
 8008880:	637b      	str	r3, [r7, #52]	@ 0x34
 8008882:	e011      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008884:	4b94      	ldr	r3, [pc, #592]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800888c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008890:	d106      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008898:	d102      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 800889a:	4b91      	ldr	r3, [pc, #580]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
 800889e:	e003      	b.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088a4:	f001 b873 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80088a8:	f001 b871 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80088ac:	4b8a      	ldr	r3, [pc, #552]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80088ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088b2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80088b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80088be:	f7fc f977 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 80088c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80088c4:	f001 b863 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ce:	d108      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d0:	f107 0308 	add.w	r3, r7, #8
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fbd7 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088de:	f001 b856 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80088e2:	4b7d      	ldr	r3, [pc, #500]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d10d      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088f4:	d109      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088f6:	4b78      	ldr	r3, [pc, #480]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	08db      	lsrs	r3, r3, #3
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	4a76      	ldr	r2, [pc, #472]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8008902:	fa22 f303 	lsr.w	r3, r2, r3
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
 8008908:	e011      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800890a:	4b73      	ldr	r3, [pc, #460]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008916:	d106      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800891e:	d102      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 8008920:	4b6f      	ldr	r3, [pc, #444]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
 8008924:	e003      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800892a:	f001 b830 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800892e:	f001 b82e 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008932:	4b69      	ldr	r3, [pc, #420]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008934:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008938:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800893c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008944:	f7fc f908 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8008948:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800894a:	f001 b820 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008954:	d108      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008956:	f107 0308 	add.w	r3, r7, #8
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fb94 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008964:	f001 b813 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008968:	4b5b      	ldr	r3, [pc, #364]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b02      	cmp	r3, #2
 8008972:	d10e      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800897a:	d10a      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800897c:	4b56      	ldr	r3, [pc, #344]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	08db      	lsrs	r3, r3, #3
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	4a55      	ldr	r2, [pc, #340]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8008988:	fa22 f303 	lsr.w	r3, r2, r3
 800898c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800898e:	f000 bffe 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008996:	f000 bffa 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800899a:	4b4f      	ldr	r3, [pc, #316]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800899c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80089a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80089ac:	d056      	beq.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80089b4:	f200 808b 	bhi.w	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80089b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089be:	d03e      	beq.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c6:	f200 8082 	bhi.w	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089d0:	d027      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089d8:	d879      	bhi.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80089da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e0:	d017      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e8:	d871      	bhi.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 80089ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 80089f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f6:	d004      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 80089f8:	e069      	b.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x176e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80089fa:	f7fc f8d9 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 80089fe:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008a00:	e068      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a02:	f107 0314 	add.w	r3, r7, #20
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe f9d2 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a10:	e060      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a12:	f107 0308 	add.w	r3, r7, #8
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fb36 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a20:	e058      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a22:	4b2d      	ldr	r3, [pc, #180]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d103      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 8008a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a36:	e04d      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a3c:	e04a      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008a3e:	4b26      	ldr	r3, [pc, #152]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a4c:	d103      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 8008a4e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a52:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a54:	e03e      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a5a:	e03b      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a62:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a68:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d10c      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 8008a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a7a:	4b17      	ldr	r3, [pc, #92]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	08db      	lsrs	r3, r3, #3
 8008a80:	f003 0303 	and.w	r3, r3, #3
 8008a84:	4a15      	ldr	r2, [pc, #84]	@ (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8008a86:	fa22 f303 	lsr.w	r3, r2, r3
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8c:	e01e      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a8e:	4b12      	ldr	r3, [pc, #72]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a9a:	d106      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa2:	d102      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8008aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa8:	e010      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ab2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab6:	d106      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008abe:	d102      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ac0:	4b08      	ldr	r3, [pc, #32]	@ (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 8008ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ac4:	e002      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008aca:	e003      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 8008acc:	e002      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ad2:	bf00      	nop
          }
        }
        break;
 8008ad4:	f000 bf5b 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008ad8:	44020c00 	.word	0x44020c00
 8008adc:	03d09000 	.word	0x03d09000
 8008ae0:	003d0900 	.word	0x003d0900
 8008ae4:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ae8:	4b9e      	ldr	r3, [pc, #632]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008aea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008aee:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008afa:	d056      	beq.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008b02:	f200 808b 	bhi.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b0c:	d03e      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b14:	f200 8082 	bhi.w	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b1e:	d027      	beq.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 8008b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b26:	d879      	bhi.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b2e:	d017      	beq.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b36:	d871      	bhi.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d004      	beq.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b44:	d004      	beq.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8008b46:	e069      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008b48:	f7fc f806 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8008b4c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008b4e:	e068      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b50:	f107 0314 	add.w	r3, r7, #20
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe f92b 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b5e:	e060      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b60:	f107 0308 	add.w	r3, r7, #8
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fa8f 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b6e:	e058      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b70:	4b7c      	ldr	r3, [pc, #496]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d103      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 8008b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b84:	e04d      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b8a:	e04a      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b8c:	4b75      	ldr	r3, [pc, #468]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b9a:	d103      	bne.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 8008b9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008ba0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ba2:	e03e      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ba8:	e03b      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008baa:	4b6e      	ldr	r3, [pc, #440]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bb0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bb6:	4b6b      	ldr	r3, [pc, #428]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d10c      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 8008bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d109      	bne.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bc8:	4b66      	ldr	r3, [pc, #408]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	4a65      	ldr	r2, [pc, #404]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bda:	e01e      	b.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bdc:	4b61      	ldr	r3, [pc, #388]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be8:	d106      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 8008bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf0:	d102      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bf2:	4b5e      	ldr	r3, [pc, #376]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf6:	e010      	b.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c04:	d106      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 8008c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c0c:	d102      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c0e:	4b58      	ldr	r3, [pc, #352]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c12:	e002      	b.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008c18:	e003      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 8008c1a:	e002      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c20:	bf00      	nop
          }
        }
        break;
 8008c22:	f000 beb4 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008c26:	4b4f      	ldr	r3, [pc, #316]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008c28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c2c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c38:	d056      	beq.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c40:	f200 808b 	bhi.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8008c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c4a:	d03e      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c52:	f200 8082 	bhi.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c5c:	d027      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c64:	d879      	bhi.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c6c:	d017      	beq.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c74:	d871      	bhi.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c82:	d004      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008c84:	e069      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008c86:	f7fb ff93 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 8008c8a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c8c:	e068      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe f88c 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c9c:	e060      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9e:	f107 0308 	add.w	r3, r7, #8
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe f9f0 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cac:	e058      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008cae:	4b2d      	ldr	r3, [pc, #180]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d103      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 8008cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008cc2:	e04d      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cc8:	e04a      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008cca:	4b26      	ldr	r3, [pc, #152]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cd8:	d103      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 8008cda:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008cde:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ce0:	e03e      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ce6:	e03b      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d10c      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 8008d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d06:	4b17      	ldr	r3, [pc, #92]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	4a15      	ldr	r2, [pc, #84]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8008d12:	fa22 f303 	lsr.w	r3, r2, r3
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d18:	e01e      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d26:	d106      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 8008d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d2e:	d102      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d30:	4b0e      	ldr	r3, [pc, #56]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d34:	e010      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d36:	4b0b      	ldr	r3, [pc, #44]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 8008d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d4a:	d102      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d4c:	4b08      	ldr	r3, [pc, #32]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 8008d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d50:	e002      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d56:	e003      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 8008d58:	e002      	b.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d5e:	bf00      	nop
          }
        }
        break;
 8008d60:	f000 be15 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008d64:	44020c00 	.word	0x44020c00
 8008d68:	03d09000 	.word	0x03d09000
 8008d6c:	003d0900 	.word	0x003d0900
 8008d70:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008d74:	4b9e      	ldr	r3, [pc, #632]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008d76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d7a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d82:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d86:	d056      	beq.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d8e:	f200 808b 	bhi.w	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d98:	d03e      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008da0:	f200 8082 	bhi.w	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008daa:	d027      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008db2:	d879      	bhi.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dba:	d017      	beq.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dc2:	d871      	bhi.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d004      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dd0:	d004      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8008dd2:	e069      	b.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008dd4:	f7fb feec 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 8008dd8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008dda:	e068      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ddc:	f107 0314 	add.w	r3, r7, #20
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fd ffe5 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dea:	e060      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dec:	f107 0308 	add.w	r3, r7, #8
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe f949 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dfa:	e058      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dfc:	4b7c      	ldr	r3, [pc, #496]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d103      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 8008e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e10:	e04d      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e16:	e04a      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008e18:	4b75      	ldr	r3, [pc, #468]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e26:	d103      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 8008e28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008e2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e2e:	e03e      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e34:	e03b      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e36:	4b6e      	ldr	r3, [pc, #440]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e3c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e42:	4b6b      	ldr	r3, [pc, #428]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d10c      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 8008e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d109      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e54:	4b66      	ldr	r3, [pc, #408]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	08db      	lsrs	r3, r3, #3
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	4a65      	ldr	r2, [pc, #404]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8008e60:	fa22 f303 	lsr.w	r3, r2, r3
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e66:	e01e      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e68:	4b61      	ldr	r3, [pc, #388]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e74:	d106      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 8008e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7c:	d102      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e7e:	4b5e      	ldr	r3, [pc, #376]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e82:	e010      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e84:	4b5a      	ldr	r3, [pc, #360]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e90:	d106      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 8008e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e98:	d102      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e9a:	4b58      	ldr	r3, [pc, #352]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 8008e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9e:	e002      	b.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ea4:	e003      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 8008ea6:	e002      	b.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008eac:	bf00      	nop
          }
        }
        break;
 8008eae:	f000 bd6e 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008eb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008eb8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ec4:	d056      	beq.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ecc:	f200 808b 	bhi.w	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ed6:	d03e      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ede:	f200 8082 	bhi.w	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ee8:	d027      	beq.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ef0:	d879      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ef8:	d017      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 8008efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f00:	d871      	bhi.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d004      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f0e:	d004      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8008f10:	e069      	b.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008f12:	f7fb fe4d 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 8008f16:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008f18:	e068      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1a:	f107 0314 	add.w	r3, r7, #20
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fd ff46 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f28:	e060      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2a:	f107 0308 	add.w	r3, r7, #8
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe f8aa 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f38:	e058      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d103      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 8008f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f4e:	e04d      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f54:	e04a      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f56:	4b26      	ldr	r3, [pc, #152]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f64:	d103      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 8008f66:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f6c:	e03e      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f72:	e03b      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f74:	4b1e      	ldr	r3, [pc, #120]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f7a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f80:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d10c      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f92:	4b17      	ldr	r3, [pc, #92]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	08db      	lsrs	r3, r3, #3
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	4a15      	ldr	r2, [pc, #84]	@ (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8008f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa4:	e01e      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fa6:	4b12      	ldr	r3, [pc, #72]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb2:	d106      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 8008fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fba:	d102      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8008fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc0:	e010      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fce:	d106      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 8008fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fd8:	4b08      	ldr	r3, [pc, #32]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fdc:	e002      	b.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008fe2:	e003      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 8008fe4:	e002      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fea:	bf00      	nop
          }
        }
        break;
 8008fec:	f000 bccf 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8008ff0:	44020c00 	.word	0x44020c00
 8008ff4:	03d09000 	.word	0x03d09000
 8008ff8:	003d0900 	.word	0x003d0900
 8008ffc:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009000:	4b9e      	ldr	r3, [pc, #632]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009002:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009006:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800900a:	633b      	str	r3, [r7, #48]	@ 0x30
 800900c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009012:	d056      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800901a:	f200 808b 	bhi.w	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800901e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009024:	d03e      	beq.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800902c:	f200 8082 	bhi.w	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009036:	d027      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 8009038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800903e:	d879      	bhi.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009046:	d017      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 8009048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800904e:	d871      	bhi.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 8009050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009052:	2b00      	cmp	r3, #0
 8009054:	d004      	beq.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800905c:	d004      	beq.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800905e:	e069      	b.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009060:	f7fb fda6 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 8009064:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009066:	e068      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009068:	f107 0314 	add.w	r3, r7, #20
 800906c:	4618      	mov	r0, r3
 800906e:	f7fd fe9f 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009076:	e060      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009078:	f107 0308 	add.w	r3, r7, #8
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe f803 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009086:	e058      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009088:	4b7c      	ldr	r3, [pc, #496]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800908a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b02      	cmp	r3, #2
 8009094:	d103      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 8009096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800909c:	e04d      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090a2:	e04a      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80090a4:	4b75      	ldr	r3, [pc, #468]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80090a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090b2:	d103      	bne.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 80090b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090ba:	e03e      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090c0:	e03b      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090c2:	4b6e      	ldr	r3, [pc, #440]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80090c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090c8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80090cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090ce:	4b6b      	ldr	r3, [pc, #428]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d10c      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d109      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090e0:	4b66      	ldr	r3, [pc, #408]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	08db      	lsrs	r3, r3, #3
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	4a65      	ldr	r2, [pc, #404]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 80090ec:	fa22 f303 	lsr.w	r3, r2, r3
 80090f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f2:	e01e      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090f4:	4b61      	ldr	r3, [pc, #388]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009100:	d106      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009108:	d102      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800910a:	4b5e      	ldr	r3, [pc, #376]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800910c:	637b      	str	r3, [r7, #52]	@ 0x34
 800910e:	e010      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009110:	4b5a      	ldr	r3, [pc, #360]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800911c:	d106      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 800911e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009124:	d102      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009126:	4b58      	ldr	r3, [pc, #352]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
 800912a:	e002      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009130:	e003      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 8009132:	e002      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009138:	bf00      	nop
          }
        }
        break;
 800913a:	f000 bc28 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800913e:	4b4f      	ldr	r3, [pc, #316]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009148:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800914a:	4b4c      	ldr	r3, [pc, #304]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009156:	d106      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	2b00      	cmp	r3, #0
 800915c:	d103      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 800915e:	4b4a      	ldr	r3, [pc, #296]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009162:	f000 bc14 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800916c:	d108      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800916e:	f107 0320 	add.w	r3, r7, #32
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fcb0 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800917c:	f000 bc07 	b.w	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009186:	d107      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd fe0f 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009196:	e3fa      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800919c:	e3f7      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800919e:	4b37      	ldr	r3, [pc, #220]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80091a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d861      	bhi.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 80091b0:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091dd 	.word	0x080091dd
 80091c0:	080091ed 	.word	0x080091ed
 80091c4:	080091fd 	.word	0x080091fd
 80091c8:	08009203 	.word	0x08009203
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091cc:	f107 0320 	add.w	r3, r7, #32
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fd fc81 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091da:	e04e      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091dc:	f107 0314 	add.w	r3, r7, #20
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fd fde5 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091ea:	e046      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ec:	f107 0308 	add.w	r3, r7, #8
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fd ff49 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091fa:	e03e      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80091fc:	4b23      	ldr	r3, [pc, #140]	@ (800928c <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 80091fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009200:	e03b      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009202:	4b1e      	ldr	r3, [pc, #120]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009208:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800920c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800920e:	4b1b      	ldr	r3, [pc, #108]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b02      	cmp	r3, #2
 8009218:	d10c      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009220:	4b16      	ldr	r3, [pc, #88]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	08db      	lsrs	r3, r3, #3
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	4a15      	ldr	r2, [pc, #84]	@ (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
 8009232:	e01e      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009234:	4b11      	ldr	r3, [pc, #68]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800923c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009240:	d106      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 8009242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009248:	d102      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800924a:	4b0e      	ldr	r3, [pc, #56]	@ (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
 800924e:	e010      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009250:	4b0a      	ldr	r3, [pc, #40]	@ (800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800925c:	d106      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 800925e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009264:	d102      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009266:	4b08      	ldr	r3, [pc, #32]	@ (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8009268:	637b      	str	r3, [r7, #52]	@ 0x34
 800926a:	e002      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009270:	e003      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 8009272:	e002      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009278:	bf00      	nop
          }
        }
        break;
 800927a:	e388      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800927c:	44020c00 	.word	0x44020c00
 8009280:	03d09000 	.word	0x03d09000
 8009284:	003d0900 	.word	0x003d0900
 8009288:	017d7840 	.word	0x017d7840
 800928c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009290:	4ba9      	ldr	r3, [pc, #676]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8009292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009296:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800929a:	633b      	str	r3, [r7, #48]	@ 0x30
 800929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929e:	2b20      	cmp	r3, #32
 80092a0:	f200 809a 	bhi.w	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 80092a4:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	08009331 	.word	0x08009331
 80092b0:	080093d9 	.word	0x080093d9
 80092b4:	080093d9 	.word	0x080093d9
 80092b8:	080093d9 	.word	0x080093d9
 80092bc:	080093d9 	.word	0x080093d9
 80092c0:	080093d9 	.word	0x080093d9
 80092c4:	080093d9 	.word	0x080093d9
 80092c8:	080093d9 	.word	0x080093d9
 80092cc:	08009341 	.word	0x08009341
 80092d0:	080093d9 	.word	0x080093d9
 80092d4:	080093d9 	.word	0x080093d9
 80092d8:	080093d9 	.word	0x080093d9
 80092dc:	080093d9 	.word	0x080093d9
 80092e0:	080093d9 	.word	0x080093d9
 80092e4:	080093d9 	.word	0x080093d9
 80092e8:	080093d9 	.word	0x080093d9
 80092ec:	08009351 	.word	0x08009351
 80092f0:	080093d9 	.word	0x080093d9
 80092f4:	080093d9 	.word	0x080093d9
 80092f8:	080093d9 	.word	0x080093d9
 80092fc:	080093d9 	.word	0x080093d9
 8009300:	080093d9 	.word	0x080093d9
 8009304:	080093d9 	.word	0x080093d9
 8009308:	080093d9 	.word	0x080093d9
 800930c:	08009361 	.word	0x08009361
 8009310:	080093d9 	.word	0x080093d9
 8009314:	080093d9 	.word	0x080093d9
 8009318:	080093d9 	.word	0x080093d9
 800931c:	080093d9 	.word	0x080093d9
 8009320:	080093d9 	.word	0x080093d9
 8009324:	080093d9 	.word	0x080093d9
 8009328:	080093d9 	.word	0x080093d9
 800932c:	08009367 	.word	0x08009367
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009330:	f107 0320 	add.w	r3, r7, #32
 8009334:	4618      	mov	r0, r3
 8009336:	f7fd fbcf 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933e:	e04e      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009340:	f107 0314 	add.w	r3, r7, #20
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd fd33 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800934e:	e046      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009350:	f107 0308 	add.w	r3, r7, #8
 8009354:	4618      	mov	r0, r3
 8009356:	f7fd fe97 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800935e:	e03e      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009360:	4b76      	ldr	r3, [pc, #472]	@ (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009364:	e03b      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009366:	4b74      	ldr	r3, [pc, #464]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8009368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800936c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009370:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009372:	4b71      	ldr	r3, [pc, #452]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b02      	cmp	r3, #2
 800937c:	d10c      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 800937e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d109      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009384:	4b6c      	ldr	r3, [pc, #432]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	08db      	lsrs	r3, r3, #3
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	4a6c      	ldr	r2, [pc, #432]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	637b      	str	r3, [r7, #52]	@ 0x34
 8009396:	e01e      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009398:	4b67      	ldr	r3, [pc, #412]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a4:	d106      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 80093a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ac:	d102      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093ae:	4b65      	ldr	r3, [pc, #404]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b2:	e010      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093b4:	4b60      	ldr	r3, [pc, #384]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093c0:	d106      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 80093c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c8:	d102      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093ca:	4b5f      	ldr	r3, [pc, #380]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ce:	e002      	b.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093d4:	e003      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 80093d6:	e002      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093dc:	bf00      	nop
          }
        }
        break;
 80093de:	e2d6      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80093e0:	4b55      	ldr	r3, [pc, #340]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80093e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80093ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f2:	d031      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093fa:	d866      	bhi.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 80093fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009400:	d027      	beq.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	2bc0      	cmp	r3, #192	@ 0xc0
 8009406:	d860      	bhi.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	2b80      	cmp	r3, #128	@ 0x80
 800940c:	d019      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	2b80      	cmp	r3, #128	@ 0x80
 8009412:	d85a      	bhi.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 800941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941c:	2b40      	cmp	r3, #64	@ 0x40
 800941e:	d008      	beq.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 8009420:	e053      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009422:	f107 0320 	add.w	r3, r7, #32
 8009426:	4618      	mov	r0, r3
 8009428:	f7fd fb56 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009430:	e04e      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009432:	f107 0314 	add.w	r3, r7, #20
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd fcba 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009440:	e046      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009442:	f107 0308 	add.w	r3, r7, #8
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd fe1e 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009450:	e03e      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009452:	4b3a      	ldr	r3, [pc, #232]	@ (800953c <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009456:	e03b      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009458:	4b37      	ldr	r3, [pc, #220]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800945a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800945e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009462:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009464:	4b34      	ldr	r3, [pc, #208]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b02      	cmp	r3, #2
 800946e:	d10c      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d109      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009476:	4b30      	ldr	r3, [pc, #192]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	08db      	lsrs	r3, r3, #3
 800947c:	f003 0303 	and.w	r3, r3, #3
 8009480:	4a2f      	ldr	r2, [pc, #188]	@ (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8009482:	fa22 f303 	lsr.w	r3, r2, r3
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
 8009488:	e01e      	b.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800948a:	4b2b      	ldr	r3, [pc, #172]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009496:	d106      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800949e:	d102      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80094a0:	4b28      	ldr	r3, [pc, #160]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a4:	e010      	b.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094a6:	4b24      	ldr	r3, [pc, #144]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094b2:	d106      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 80094b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094ba:	d102      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094bc:	4b22      	ldr	r3, [pc, #136]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 80094be:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c0:	e002      	b.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80094c6:	e003      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 80094c8:	e002      	b.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094ce:	bf00      	nop
          }
        }
        break;
 80094d0:	e25d      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80094d2:	4b19      	ldr	r3, [pc, #100]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80094d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094d8:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80094dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d103      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80094e4:	f7fb fb4e 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 80094e8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80094ea:	e250      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80094ec:	4b12      	ldr	r3, [pc, #72]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094f8:	d10b      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009500:	d107      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009502:	f107 0314 	add.w	r3, r7, #20
 8009506:	4618      	mov	r0, r3
 8009508:	f7fd fc52 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009510:	e04f      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009512:	4b09      	ldr	r3, [pc, #36]	@ (8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800951a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800951e:	d115      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009526:	d111      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009528:	f107 0308 	add.w	r3, r7, #8
 800952c:	4618      	mov	r0, r3
 800952e:	f7fd fdab 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
 8009536:	e03c      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 8009538:	44020c00 	.word	0x44020c00
 800953c:	00bb8000 	.word	0x00bb8000
 8009540:	03d09000 	.word	0x03d09000
 8009544:	003d0900 	.word	0x003d0900
 8009548:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800954c:	4b94      	ldr	r3, [pc, #592]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b02      	cmp	r3, #2
 8009556:	d10d      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800955e:	d109      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009560:	4b8f      	ldr	r3, [pc, #572]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	08db      	lsrs	r3, r3, #3
 8009566:	f003 0303 	and.w	r3, r3, #3
 800956a:	4a8e      	ldr	r2, [pc, #568]	@ (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800956c:	fa22 f303 	lsr.w	r3, r2, r3
 8009570:	637b      	str	r3, [r7, #52]	@ 0x34
 8009572:	e01e      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009574:	4b8a      	ldr	r3, [pc, #552]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800957c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009580:	d106      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009588:	d102      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 800958a:	4b87      	ldr	r3, [pc, #540]	@ (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
 800958e:	e010      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009590:	4b83      	ldr	r3, [pc, #524]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800959c:	d106      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80095a4:	d102      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 80095a6:	4b81      	ldr	r3, [pc, #516]	@ (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 80095a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095aa:	e002      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095b0:	e1ed      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80095b2:	e1ec      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80095b4:	4b7a      	ldr	r3, [pc, #488]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80095b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095ba:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80095be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80095c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d103      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095c6:	f7fb faf3 	bl	8004bb0 <HAL_RCC_GetPCLK3Freq>
 80095ca:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80095cc:	e1df      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80095ce:	4b74      	ldr	r3, [pc, #464]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095da:	d10b      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095e2:	d107      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e4:	f107 0314 	add.w	r3, r7, #20
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fd fbe1 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f2:	e045      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80095f4:	4b6a      	ldr	r3, [pc, #424]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009600:	d10b      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009608:	d107      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800960a:	f107 0308 	add.w	r3, r7, #8
 800960e:	4618      	mov	r0, r3
 8009610:	f7fd fd3a 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
 8009618:	e032      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800961a:	4b61      	ldr	r3, [pc, #388]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b02      	cmp	r3, #2
 8009624:	d10d      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800962c:	d109      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800962e:	4b5c      	ldr	r3, [pc, #368]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	08db      	lsrs	r3, r3, #3
 8009634:	f003 0303 	and.w	r3, r3, #3
 8009638:	4a5a      	ldr	r2, [pc, #360]	@ (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800963a:	fa22 f303 	lsr.w	r3, r2, r3
 800963e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009640:	e01e      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009642:	4b57      	ldr	r3, [pc, #348]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800964a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800964e:	d106      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009656:	d102      	bne.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 8009658:	4b53      	ldr	r3, [pc, #332]	@ (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
 800965c:	e010      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800965e:	4b50      	ldr	r3, [pc, #320]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800966a:	d106      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009672:	d102      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 8009674:	4b4d      	ldr	r3, [pc, #308]	@ (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
 8009678:	e002      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800967e:	e186      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8009680:	e185      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009682:	4b47      	ldr	r3, [pc, #284]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009688:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800968c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	2b00      	cmp	r3, #0
 8009692:	d103      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009694:	f7fb fa76 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8009698:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800969a:	e178      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800969c:	4b40      	ldr	r3, [pc, #256]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a8:	d10b      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096b0:	d107      	bne.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fd fb7a 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c0:	e045      	b.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80096c2:	4b37      	ldr	r3, [pc, #220]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096ce:	d10b      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d6:	d107      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d8:	f107 0308 	add.w	r3, r7, #8
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fd fcd3 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e6:	e032      	b.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80096e8:	4b2d      	ldr	r3, [pc, #180]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d10d      	bne.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80096fa:	d109      	bne.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096fc:	4b28      	ldr	r3, [pc, #160]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	08db      	lsrs	r3, r3, #3
 8009702:	f003 0303 	and.w	r3, r3, #3
 8009706:	4a27      	ldr	r2, [pc, #156]	@ (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8009708:	fa22 f303 	lsr.w	r3, r2, r3
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
 800970e:	e01e      	b.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009710:	4b23      	ldr	r3, [pc, #140]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800971c:	d106      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009724:	d102      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 8009726:	4b20      	ldr	r3, [pc, #128]	@ (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
 800972a:	e010      	b.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800972c:	4b1c      	ldr	r3, [pc, #112]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009738:	d106      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 800973a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009740:	d102      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 8009742:	4b1a      	ldr	r3, [pc, #104]	@ (80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8009744:	637b      	str	r3, [r7, #52]	@ 0x34
 8009746:	e002      	b.n	800974e <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800974c:	e11f      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800974e:	e11e      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009750:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8009752:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	633b      	str	r3, [r7, #48]	@ 0x30
 800975c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975e:	2b03      	cmp	r3, #3
 8009760:	d85f      	bhi.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 8009762:	a201      	add	r2, pc, #4	@ (adr r2, 8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	08009779 	.word	0x08009779
 800976c:	08009781 	.word	0x08009781
 8009770:	08009791 	.word	0x08009791
 8009774:	080097b1 	.word	0x080097b1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009778:	f7fb f9d2 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 800977c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800977e:	e053      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009780:	f107 0320 	add.w	r3, r7, #32
 8009784:	4618      	mov	r0, r3
 8009786:	f7fd f9a7 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800978a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800978e:	e04b      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009790:	f107 0314 	add.w	r3, r7, #20
 8009794:	4618      	mov	r0, r3
 8009796:	f7fd fb0b 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800979e:	e043      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 80097a0:	44020c00 	.word	0x44020c00
 80097a4:	03d09000 	.word	0x03d09000
 80097a8:	003d0900 	.word	0x003d0900
 80097ac:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097b0:	4b79      	ldr	r3, [pc, #484]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80097b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097b6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097bc:	4b76      	ldr	r3, [pc, #472]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d10c      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097ce:	4b72      	ldr	r3, [pc, #456]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	08db      	lsrs	r3, r3, #3
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	4a70      	ldr	r2, [pc, #448]	@ (800999c <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 80097da:	fa22 f303 	lsr.w	r3, r2, r3
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e0:	e01e      	b.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097e2:	4b6d      	ldr	r3, [pc, #436]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ee:	d106      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 80097f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f6:	d102      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097f8:	4b69      	ldr	r3, [pc, #420]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fc:	e010      	b.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097fe:	4b66      	ldr	r3, [pc, #408]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009806:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800980a:	d106      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 800980c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009812:	d102      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009814:	4b63      	ldr	r3, [pc, #396]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
 8009818:	e002      	b.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800981e:	e003      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8009820:	e002      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009826:	bf00      	nop
          }
        }
        break;
 8009828:	e0b1      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800982a:	4b5b      	ldr	r3, [pc, #364]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800982c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009830:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009834:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009836:	4b58      	ldr	r3, [pc, #352]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800983c:	f003 0302 	and.w	r3, r3, #2
 8009840:	2b02      	cmp	r3, #2
 8009842:	d106      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	2b00      	cmp	r3, #0
 8009848:	d103      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 800984a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800984e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009850:	e01f      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009852:	4b51      	ldr	r3, [pc, #324]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800985c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009860:	d106      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	2b40      	cmp	r3, #64	@ 0x40
 8009866:	d103      	bne.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 8009868:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
 800986e:	e010      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009870:	4b49      	ldr	r3, [pc, #292]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800987c:	d106      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	2b80      	cmp	r3, #128	@ 0x80
 8009882:	d103      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 8009884:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
 800988a:	e002      	b.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009890:	e07d      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8009892:	e07c      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009894:	4b40      	ldr	r3, [pc, #256]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800989a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80098a0:	4b3d      	ldr	r3, [pc, #244]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ac:	d105      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80098ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 80098b4:	4b3c      	ldr	r3, [pc, #240]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 80098b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b8:	e031      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80098ba:	4b37      	ldr	r3, [pc, #220]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098c6:	d10a      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 80098c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d107      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ce:	f107 0320 	add.w	r3, r7, #32
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fd f900 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
 80098dc:	e01f      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80098de:	4b2e      	ldr	r3, [pc, #184]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80098e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d106      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 80098ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ee:	2b20      	cmp	r3, #32
 80098f0:	d103      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 80098f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f8:	e011      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80098fa:	4b27      	ldr	r3, [pc, #156]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 80098fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009908:	d106      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	2b30      	cmp	r3, #48	@ 0x30
 800990e:	d103      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 8009910:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
 8009916:	e002      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800991c:	e037      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800991e:	e036      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009920:	4b1d      	ldr	r3, [pc, #116]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009926:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800992a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	2b10      	cmp	r3, #16
 8009930:	d107      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009932:	f107 0320 	add.w	r3, r7, #32
 8009936:	4618      	mov	r0, r3
 8009938:	f7fd f8ce 	bl	8006ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009940:	e025      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009942:	4b15      	ldr	r3, [pc, #84]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800994a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800994e:	d10a      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 8009950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009952:	2b20      	cmp	r3, #32
 8009954:	d107      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	4618      	mov	r0, r3
 800995c:	f7fd fb94 	bl	8007088 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	637b      	str	r3, [r7, #52]	@ 0x34
 8009964:	e00f      	b.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009966:	4b0c      	ldr	r3, [pc, #48]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800996e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009972:	d105      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	2b30      	cmp	r3, #48	@ 0x30
 8009978:	d102      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 800997a:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 800997c:	637b      	str	r3, [r7, #52]	@ 0x34
 800997e:	e002      	b.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009984:	e003      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8009986:	e002      	b.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800998c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800998e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009990:	4618      	mov	r0, r3
 8009992:	373c      	adds	r7, #60	@ 0x3c
 8009994:	46bd      	mov	sp, r7
 8009996:	bd90      	pop	{r4, r7, pc}
 8009998:	44020c00 	.word	0x44020c00
 800999c:	03d09000 	.word	0x03d09000
 80099a0:	003d0900 	.word	0x003d0900
 80099a4:	017d7840 	.word	0x017d7840
 80099a8:	02dc6c00 	.word	0x02dc6c00

080099ac <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80099b4:	4b48      	ldr	r3, [pc, #288]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a47      	ldr	r2, [pc, #284]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 80099ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80099c0:	f7f8 facc 	bl	8001f5c <HAL_GetTick>
 80099c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099c6:	e008      	b.n	80099da <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099c8:	f7f8 fac8 	bl	8001f5c <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d901      	bls.n	80099da <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e07a      	b.n	8009ad0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099da:	4b3f      	ldr	r3, [pc, #252]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1f0      	bne.n	80099c8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80099e6:	4b3c      	ldr	r3, [pc, #240]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 80099e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80099ee:	f023 0303 	bic.w	r3, r3, #3
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6811      	ldr	r1, [r2, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6852      	ldr	r2, [r2, #4]
 80099fa:	0212      	lsls	r2, r2, #8
 80099fc:	430a      	orrs	r2, r1
 80099fe:	4936      	ldr	r1, [pc, #216]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	025b      	lsls	r3, r3, #9
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	431a      	orrs	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	041b      	lsls	r3, r3, #16
 8009a22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a26:	431a      	orrs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	061b      	lsls	r3, r3, #24
 8009a30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a34:	4928      	ldr	r1, [pc, #160]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009a3a:	4b27      	ldr	r3, [pc, #156]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3e:	f023 020c 	bic.w	r2, r3, #12
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	4924      	ldr	r1, [pc, #144]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009a4c:	4b22      	ldr	r3, [pc, #136]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a50:	f023 0220 	bic.w	r2, r3, #32
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	491f      	ldr	r1, [pc, #124]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	491c      	ldr	r1, [pc, #112]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a70:	4a19      	ldr	r2, [pc, #100]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a72:	f023 0310 	bic.w	r3, r3, #16
 8009a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009a78:	4b17      	ldr	r3, [pc, #92]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a80:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6a12      	ldr	r2, [r2, #32]
 8009a88:	00d2      	lsls	r2, r2, #3
 8009a8a:	4913      	ldr	r1, [pc, #76]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009a90:	4b11      	ldr	r3, [pc, #68]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a94:	4a10      	ldr	r2, [pc, #64]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a96:	f043 0310 	orr.w	r3, r3, #16
 8009a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009aa6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009aa8:	f7f8 fa58 	bl	8001f5c <HAL_GetTick>
 8009aac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009aae:	e008      	b.n	8009ac2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ab0:	f7f8 fa54 	bl	8001f5c <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d901      	bls.n	8009ac2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e006      	b.n	8009ad0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ac2:	4b05      	ldr	r3, [pc, #20]	@ (8009ad8 <RCCEx_PLL2_Config+0x12c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0f0      	beq.n	8009ab0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009ace:	2300      	movs	r3, #0

}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	44020c00 	.word	0x44020c00

08009adc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009ae4:	4b48      	ldr	r3, [pc, #288]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a47      	ldr	r2, [pc, #284]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009af0:	f7f8 fa34 	bl	8001f5c <HAL_GetTick>
 8009af4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009af6:	e008      	b.n	8009b0a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009af8:	f7f8 fa30 	bl	8001f5c <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d901      	bls.n	8009b0a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e07a      	b.n	8009c00 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1f0      	bne.n	8009af8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009b16:	4b3c      	ldr	r3, [pc, #240]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b1e:	f023 0303 	bic.w	r3, r3, #3
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6811      	ldr	r1, [r2, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6852      	ldr	r2, [r2, #4]
 8009b2a:	0212      	lsls	r2, r2, #8
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	4936      	ldr	r1, [pc, #216]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	630b      	str	r3, [r1, #48]	@ 0x30
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	025b      	lsls	r3, r3, #9
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	041b      	lsls	r3, r3, #16
 8009b52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b56:	431a      	orrs	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	061b      	lsls	r3, r3, #24
 8009b60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b64:	4928      	ldr	r1, [pc, #160]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b6a:	4b27      	ldr	r3, [pc, #156]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6e:	f023 020c 	bic.w	r2, r3, #12
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	4924      	ldr	r1, [pc, #144]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009b7c:	4b22      	ldr	r3, [pc, #136]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b80:	f023 0220 	bic.w	r2, r3, #32
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	491f      	ldr	r1, [pc, #124]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b96:	491c      	ldr	r1, [pc, #112]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba0:	4a19      	ldr	r2, [pc, #100]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009ba2:	f023 0310 	bic.w	r3, r3, #16
 8009ba6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009ba8:	4b17      	ldr	r3, [pc, #92]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bb0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	6a12      	ldr	r2, [r2, #32]
 8009bb8:	00d2      	lsls	r2, r2, #3
 8009bba:	4913      	ldr	r1, [pc, #76]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009bc0:	4b11      	ldr	r3, [pc, #68]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc4:	4a10      	ldr	r2, [pc, #64]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009bc6:	f043 0310 	orr.w	r3, r3, #16
 8009bca:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bd8:	f7f8 f9c0 	bl	8001f5c <HAL_GetTick>
 8009bdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bde:	e008      	b.n	8009bf2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009be0:	f7f8 f9bc 	bl	8001f5c <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d901      	bls.n	8009bf2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e006      	b.n	8009c00 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bf2:	4b05      	ldr	r3, [pc, #20]	@ (8009c08 <RCCEx_PLL3_Config+0x12c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0f0      	beq.n	8009be0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	44020c00 	.word	0x44020c00

08009c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e049      	b.n	8009cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7f7 f9dc 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3304      	adds	r3, #4
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	f000 fcee 	bl	800a62c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d001      	beq.n	8009cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e07c      	b.n	8009dce <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f042 0201 	orr.w	r2, r2, #1
 8009cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8009ddc <HAL_TIM_Base_Start_IT+0x120>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d04a      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a39      	ldr	r2, [pc, #228]	@ (8009de0 <HAL_TIM_Base_Start_IT+0x124>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d045      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d08:	d040      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d12:	d03b      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a32      	ldr	r2, [pc, #200]	@ (8009de4 <HAL_TIM_Base_Start_IT+0x128>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d036      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a31      	ldr	r2, [pc, #196]	@ (8009de8 <HAL_TIM_Base_Start_IT+0x12c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d031      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8009dec <HAL_TIM_Base_Start_IT+0x130>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d02c      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a2e      	ldr	r2, [pc, #184]	@ (8009df0 <HAL_TIM_Base_Start_IT+0x134>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d027      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a2c      	ldr	r2, [pc, #176]	@ (8009df4 <HAL_TIM_Base_Start_IT+0x138>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d022      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8009df8 <HAL_TIM_Base_Start_IT+0x13c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d01d      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a29      	ldr	r2, [pc, #164]	@ (8009dfc <HAL_TIM_Base_Start_IT+0x140>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d018      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a28      	ldr	r2, [pc, #160]	@ (8009e00 <HAL_TIM_Base_Start_IT+0x144>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d013      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a26      	ldr	r2, [pc, #152]	@ (8009e04 <HAL_TIM_Base_Start_IT+0x148>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00e      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a25      	ldr	r2, [pc, #148]	@ (8009e08 <HAL_TIM_Base_Start_IT+0x14c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d009      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a23      	ldr	r2, [pc, #140]	@ (8009e0c <HAL_TIM_Base_Start_IT+0x150>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d004      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0xd0>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a22      	ldr	r2, [pc, #136]	@ (8009e10 <HAL_TIM_Base_Start_IT+0x154>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d115      	bne.n	8009db8 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689a      	ldr	r2, [r3, #8]
 8009d92:	4b20      	ldr	r3, [pc, #128]	@ (8009e14 <HAL_TIM_Base_Start_IT+0x158>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b06      	cmp	r3, #6
 8009d9c:	d015      	beq.n	8009dca <HAL_TIM_Base_Start_IT+0x10e>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da4:	d011      	beq.n	8009dca <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f042 0201 	orr.w	r2, r2, #1
 8009db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db6:	e008      	b.n	8009dca <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f042 0201 	orr.w	r2, r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	e000      	b.n	8009dcc <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	40012c00 	.word	0x40012c00
 8009de0:	50012c00 	.word	0x50012c00
 8009de4:	40000400 	.word	0x40000400
 8009de8:	50000400 	.word	0x50000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	50000800 	.word	0x50000800
 8009df4:	40000c00 	.word	0x40000c00
 8009df8:	50000c00 	.word	0x50000c00
 8009dfc:	40013400 	.word	0x40013400
 8009e00:	50013400 	.word	0x50013400
 8009e04:	40001800 	.word	0x40001800
 8009e08:	50001800 	.word	0x50001800
 8009e0c:	40014000 	.word	0x40014000
 8009e10:	50014000 	.word	0x50014000
 8009e14:	00010007 	.word	0x00010007

08009e18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e049      	b.n	8009ebe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f841 	bl	8009ec6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3304      	adds	r3, #4
 8009e54:	4619      	mov	r1, r3
 8009e56:	4610      	mov	r0, r2
 8009e58:	f000 fbe8 	bl	800a62c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d020      	beq.n	8009f3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d01b      	beq.n	8009f3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f06f 0202 	mvn.w	r2, #2
 8009f0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fb63 	bl	800a5f0 <HAL_TIM_IC_CaptureCallback>
 8009f2a:	e005      	b.n	8009f38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fb55 	bl	800a5dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fb66 	bl	800a604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 0304 	and.w	r3, r3, #4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d020      	beq.n	8009f8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d01b      	beq.n	8009f8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f06f 0204 	mvn.w	r2, #4
 8009f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fb3d 	bl	800a5f0 <HAL_TIM_IC_CaptureCallback>
 8009f76:	e005      	b.n	8009f84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 fb2f 	bl	800a5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb40 	bl	800a604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f003 0308 	and.w	r3, r3, #8
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d020      	beq.n	8009fd6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f003 0308 	and.w	r3, r3, #8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d01b      	beq.n	8009fd6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f06f 0208 	mvn.w	r2, #8
 8009fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2204      	movs	r2, #4
 8009fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	69db      	ldr	r3, [r3, #28]
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fb17 	bl	800a5f0 <HAL_TIM_IC_CaptureCallback>
 8009fc2:	e005      	b.n	8009fd0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fb09 	bl	800a5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fb1a 	bl	800a604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d020      	beq.n	800a022 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d01b      	beq.n	800a022 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f06f 0210 	mvn.w	r2, #16
 8009ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2208      	movs	r2, #8
 8009ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 faf1 	bl	800a5f0 <HAL_TIM_IC_CaptureCallback>
 800a00e:	e005      	b.n	800a01c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fae3 	bl	800a5dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 faf4 	bl	800a604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00c      	beq.n	800a046 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d007      	beq.n	800a046 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f06f 0201 	mvn.w	r2, #1
 800a03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7f6 ff25 	bl	8000e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d104      	bne.n	800a05a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00c      	beq.n	800a074 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a06c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 f952 	bl	800b318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a084:	2b00      	cmp	r3, #0
 800a086:	d007      	beq.n	800a098 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 f94a 	bl	800b32c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d007      	beq.n	800a0bc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 faae 	bl	800a618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f003 0320 	and.w	r3, r3, #32
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00c      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d007      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0220 	mvn.w	r2, #32
 800a0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 f912 	bl	800b304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00c      	beq.n	800a104 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 f91e 	bl	800b340 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00c      	beq.n	800a128 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 f916 	bl	800b354 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00c      	beq.n	800a14c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 f90e 	bl	800b368 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00c      	beq.n	800a170 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d007      	beq.n	800a170 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 f906 	bl	800b37c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a170:	bf00      	nop
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a192:	2302      	movs	r3, #2
 800a194:	e0ff      	b.n	800a396 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b14      	cmp	r3, #20
 800a1a2:	f200 80f0 	bhi.w	800a386 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a1a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ac:	0800a201 	.word	0x0800a201
 800a1b0:	0800a387 	.word	0x0800a387
 800a1b4:	0800a387 	.word	0x0800a387
 800a1b8:	0800a387 	.word	0x0800a387
 800a1bc:	0800a241 	.word	0x0800a241
 800a1c0:	0800a387 	.word	0x0800a387
 800a1c4:	0800a387 	.word	0x0800a387
 800a1c8:	0800a387 	.word	0x0800a387
 800a1cc:	0800a283 	.word	0x0800a283
 800a1d0:	0800a387 	.word	0x0800a387
 800a1d4:	0800a387 	.word	0x0800a387
 800a1d8:	0800a387 	.word	0x0800a387
 800a1dc:	0800a2c3 	.word	0x0800a2c3
 800a1e0:	0800a387 	.word	0x0800a387
 800a1e4:	0800a387 	.word	0x0800a387
 800a1e8:	0800a387 	.word	0x0800a387
 800a1ec:	0800a305 	.word	0x0800a305
 800a1f0:	0800a387 	.word	0x0800a387
 800a1f4:	0800a387 	.word	0x0800a387
 800a1f8:	0800a387 	.word	0x0800a387
 800a1fc:	0800a345 	.word	0x0800a345
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68b9      	ldr	r1, [r7, #8]
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fb3a 	bl	800a880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	699a      	ldr	r2, [r3, #24]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0208 	orr.w	r2, r2, #8
 800a21a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	699a      	ldr	r2, [r3, #24]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 0204 	bic.w	r2, r2, #4
 800a22a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6999      	ldr	r1, [r3, #24]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	691a      	ldr	r2, [r3, #16]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	619a      	str	r2, [r3, #24]
      break;
 800a23e:	e0a5      	b.n	800a38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fbdc 	bl	800aa04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a25a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a26a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6999      	ldr	r1, [r3, #24]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	021a      	lsls	r2, r3, #8
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	430a      	orrs	r2, r1
 800a27e:	619a      	str	r2, [r3, #24]
      break;
 800a280:	e084      	b.n	800a38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fc6b 	bl	800ab64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69da      	ldr	r2, [r3, #28]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f042 0208 	orr.w	r2, r2, #8
 800a29c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69da      	ldr	r2, [r3, #28]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0204 	bic.w	r2, r2, #4
 800a2ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69d9      	ldr	r1, [r3, #28]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	691a      	ldr	r2, [r3, #16]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	61da      	str	r2, [r3, #28]
      break;
 800a2c0:	e064      	b.n	800a38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fcf9 	bl	800acc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69da      	ldr	r2, [r3, #28]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69da      	ldr	r2, [r3, #28]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	69d9      	ldr	r1, [r3, #28]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	021a      	lsls	r2, r3, #8
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	61da      	str	r2, [r3, #28]
      break;
 800a302:	e043      	b.n	800a38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fd88 	bl	800ae20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f042 0208 	orr.w	r2, r2, #8
 800a31e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0204 	bic.w	r2, r2, #4
 800a32e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a342:	e023      	b.n	800a38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fdea 	bl	800af24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a35e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a36e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	021a      	lsls	r2, r3, #8
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a384:	e002      	b.n	800a38c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	75fb      	strb	r3, [r7, #23]
      break;
 800a38a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a394:	7dfb      	ldrb	r3, [r7, #23]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop

0800a3a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d101      	bne.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	e0fe      	b.n	800a5ba <HAL_TIM_ConfigClockSource+0x21a>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a3da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a3de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3f8:	f000 80c9 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a3fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a400:	f200 80ce 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a404:	4a6f      	ldr	r2, [pc, #444]	@ (800a5c4 <HAL_TIM_ConfigClockSource+0x224>)
 800a406:	4293      	cmp	r3, r2
 800a408:	f000 80c1 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a40c:	4a6d      	ldr	r2, [pc, #436]	@ (800a5c4 <HAL_TIM_ConfigClockSource+0x224>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	f200 80c6 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a414:	4a6c      	ldr	r2, [pc, #432]	@ (800a5c8 <HAL_TIM_ConfigClockSource+0x228>)
 800a416:	4293      	cmp	r3, r2
 800a418:	f000 80b9 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a41c:	4a6a      	ldr	r2, [pc, #424]	@ (800a5c8 <HAL_TIM_ConfigClockSource+0x228>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	f200 80be 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a424:	4a69      	ldr	r2, [pc, #420]	@ (800a5cc <HAL_TIM_ConfigClockSource+0x22c>)
 800a426:	4293      	cmp	r3, r2
 800a428:	f000 80b1 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a42c:	4a67      	ldr	r2, [pc, #412]	@ (800a5cc <HAL_TIM_ConfigClockSource+0x22c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	f200 80b6 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a434:	4a66      	ldr	r2, [pc, #408]	@ (800a5d0 <HAL_TIM_ConfigClockSource+0x230>)
 800a436:	4293      	cmp	r3, r2
 800a438:	f000 80a9 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a43c:	4a64      	ldr	r2, [pc, #400]	@ (800a5d0 <HAL_TIM_ConfigClockSource+0x230>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	f200 80ae 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a444:	4a63      	ldr	r2, [pc, #396]	@ (800a5d4 <HAL_TIM_ConfigClockSource+0x234>)
 800a446:	4293      	cmp	r3, r2
 800a448:	f000 80a1 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a44c:	4a61      	ldr	r2, [pc, #388]	@ (800a5d4 <HAL_TIM_ConfigClockSource+0x234>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	f200 80a6 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a454:	4a60      	ldr	r2, [pc, #384]	@ (800a5d8 <HAL_TIM_ConfigClockSource+0x238>)
 800a456:	4293      	cmp	r3, r2
 800a458:	f000 8099 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a45c:	4a5e      	ldr	r2, [pc, #376]	@ (800a5d8 <HAL_TIM_ConfigClockSource+0x238>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	f200 809e 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a464:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a468:	f000 8091 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a46c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a470:	f200 8096 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a478:	f000 8089 	beq.w	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a47c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a480:	f200 808e 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a488:	d03e      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0x168>
 800a48a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a48e:	f200 8087 	bhi.w	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a496:	f000 8086 	beq.w	800a5a6 <HAL_TIM_ConfigClockSource+0x206>
 800a49a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49e:	d87f      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a4a0:	2b70      	cmp	r3, #112	@ 0x70
 800a4a2:	d01a      	beq.n	800a4da <HAL_TIM_ConfigClockSource+0x13a>
 800a4a4:	2b70      	cmp	r3, #112	@ 0x70
 800a4a6:	d87b      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a4a8:	2b60      	cmp	r3, #96	@ 0x60
 800a4aa:	d050      	beq.n	800a54e <HAL_TIM_ConfigClockSource+0x1ae>
 800a4ac:	2b60      	cmp	r3, #96	@ 0x60
 800a4ae:	d877      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a4b0:	2b50      	cmp	r3, #80	@ 0x50
 800a4b2:	d03c      	beq.n	800a52e <HAL_TIM_ConfigClockSource+0x18e>
 800a4b4:	2b50      	cmp	r3, #80	@ 0x50
 800a4b6:	d873      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a4b8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ba:	d058      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x1ce>
 800a4bc:	2b40      	cmp	r3, #64	@ 0x40
 800a4be:	d86f      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a4c0:	2b30      	cmp	r3, #48	@ 0x30
 800a4c2:	d064      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a4c4:	2b30      	cmp	r3, #48	@ 0x30
 800a4c6:	d86b      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a4c8:	2b20      	cmp	r3, #32
 800a4ca:	d060      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a4cc:	2b20      	cmp	r3, #32
 800a4ce:	d867      	bhi.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d05c      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a4d4:	2b10      	cmp	r3, #16
 800a4d6:	d05a      	beq.n	800a58e <HAL_TIM_ConfigClockSource+0x1ee>
 800a4d8:	e062      	b.n	800a5a0 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4ea:	f000 fe1b 	bl	800b124 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a4fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	609a      	str	r2, [r3, #8]
      break;
 800a506:	e04f      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a518:	f000 fe04 	bl	800b124 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a52a:	609a      	str	r2, [r3, #8]
      break;
 800a52c:	e03c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a53a:	461a      	mov	r2, r3
 800a53c:	f000 fd76 	bl	800b02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2150      	movs	r1, #80	@ 0x50
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fdcf 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a54c:	e02c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a55a:	461a      	mov	r2, r3
 800a55c:	f000 fd95 	bl	800b08a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2160      	movs	r1, #96	@ 0x60
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fdbf 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a56c:	e01c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a57a:	461a      	mov	r2, r3
 800a57c:	f000 fd56 	bl	800b02c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2140      	movs	r1, #64	@ 0x40
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fdaf 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a58c:	e00c      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4619      	mov	r1, r3
 800a598:	4610      	mov	r0, r2
 800a59a:	f000 fda6 	bl	800b0ea <TIM_ITRx_SetConfig>
      break;
 800a59e:	e003      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a4:	e000      	b.n	800a5a8 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800a5a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	00100070 	.word	0x00100070
 800a5c8:	00100060 	.word	0x00100060
 800a5cc:	00100050 	.word	0x00100050
 800a5d0:	00100040 	.word	0x00100040
 800a5d4:	00100030 	.word	0x00100030
 800a5d8:	00100020 	.word	0x00100020

0800a5dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a7a      	ldr	r2, [pc, #488]	@ (800a828 <TIM_Base_SetConfig+0x1fc>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d02b      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a79      	ldr	r2, [pc, #484]	@ (800a82c <TIM_Base_SetConfig+0x200>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d027      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a652:	d023      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a65a:	d01f      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a74      	ldr	r2, [pc, #464]	@ (800a830 <TIM_Base_SetConfig+0x204>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d01b      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a73      	ldr	r2, [pc, #460]	@ (800a834 <TIM_Base_SetConfig+0x208>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d017      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a72      	ldr	r2, [pc, #456]	@ (800a838 <TIM_Base_SetConfig+0x20c>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d013      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a71      	ldr	r2, [pc, #452]	@ (800a83c <TIM_Base_SetConfig+0x210>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d00f      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a70      	ldr	r2, [pc, #448]	@ (800a840 <TIM_Base_SetConfig+0x214>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d00b      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a6f      	ldr	r2, [pc, #444]	@ (800a844 <TIM_Base_SetConfig+0x218>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d007      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a6e      	ldr	r2, [pc, #440]	@ (800a848 <TIM_Base_SetConfig+0x21c>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_Base_SetConfig+0x70>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a6d      	ldr	r2, [pc, #436]	@ (800a84c <TIM_Base_SetConfig+0x220>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d108      	bne.n	800a6ae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a5d      	ldr	r2, [pc, #372]	@ (800a828 <TIM_Base_SetConfig+0x1fc>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d05b      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a5c      	ldr	r2, [pc, #368]	@ (800a82c <TIM_Base_SetConfig+0x200>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d057      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6c4:	d053      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6cc:	d04f      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a57      	ldr	r2, [pc, #348]	@ (800a830 <TIM_Base_SetConfig+0x204>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d04b      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a56      	ldr	r2, [pc, #344]	@ (800a834 <TIM_Base_SetConfig+0x208>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d047      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a55      	ldr	r2, [pc, #340]	@ (800a838 <TIM_Base_SetConfig+0x20c>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d043      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a54      	ldr	r2, [pc, #336]	@ (800a83c <TIM_Base_SetConfig+0x210>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d03f      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a53      	ldr	r2, [pc, #332]	@ (800a840 <TIM_Base_SetConfig+0x214>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d03b      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a52      	ldr	r2, [pc, #328]	@ (800a844 <TIM_Base_SetConfig+0x218>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d037      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a51      	ldr	r2, [pc, #324]	@ (800a848 <TIM_Base_SetConfig+0x21c>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d033      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a50      	ldr	r2, [pc, #320]	@ (800a84c <TIM_Base_SetConfig+0x220>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d02f      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a4f      	ldr	r2, [pc, #316]	@ (800a850 <TIM_Base_SetConfig+0x224>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d02b      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a4e      	ldr	r2, [pc, #312]	@ (800a854 <TIM_Base_SetConfig+0x228>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d027      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a4d      	ldr	r2, [pc, #308]	@ (800a858 <TIM_Base_SetConfig+0x22c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d023      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a4c      	ldr	r2, [pc, #304]	@ (800a85c <TIM_Base_SetConfig+0x230>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d01f      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a4b      	ldr	r2, [pc, #300]	@ (800a860 <TIM_Base_SetConfig+0x234>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d01b      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a4a      	ldr	r2, [pc, #296]	@ (800a864 <TIM_Base_SetConfig+0x238>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d017      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a49      	ldr	r2, [pc, #292]	@ (800a868 <TIM_Base_SetConfig+0x23c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a48      	ldr	r2, [pc, #288]	@ (800a86c <TIM_Base_SetConfig+0x240>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00f      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a47      	ldr	r2, [pc, #284]	@ (800a870 <TIM_Base_SetConfig+0x244>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00b      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a46      	ldr	r2, [pc, #280]	@ (800a874 <TIM_Base_SetConfig+0x248>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d007      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a45      	ldr	r2, [pc, #276]	@ (800a878 <TIM_Base_SetConfig+0x24c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d003      	beq.n	800a76e <TIM_Base_SetConfig+0x142>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a44      	ldr	r2, [pc, #272]	@ (800a87c <TIM_Base_SetConfig+0x250>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d108      	bne.n	800a780 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a20      	ldr	r2, [pc, #128]	@ (800a828 <TIM_Base_SetConfig+0x1fc>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d023      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a82c <TIM_Base_SetConfig+0x200>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d01f      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a24      	ldr	r2, [pc, #144]	@ (800a848 <TIM_Base_SetConfig+0x21c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d01b      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a23      	ldr	r2, [pc, #140]	@ (800a84c <TIM_Base_SetConfig+0x220>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d017      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a28      	ldr	r2, [pc, #160]	@ (800a868 <TIM_Base_SetConfig+0x23c>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d013      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a27      	ldr	r2, [pc, #156]	@ (800a86c <TIM_Base_SetConfig+0x240>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00f      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a26      	ldr	r2, [pc, #152]	@ (800a870 <TIM_Base_SetConfig+0x244>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d00b      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a25      	ldr	r2, [pc, #148]	@ (800a874 <TIM_Base_SetConfig+0x248>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d007      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a24      	ldr	r2, [pc, #144]	@ (800a878 <TIM_Base_SetConfig+0x24c>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d003      	beq.n	800a7f4 <TIM_Base_SetConfig+0x1c8>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a23      	ldr	r2, [pc, #140]	@ (800a87c <TIM_Base_SetConfig+0x250>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d103      	bne.n	800a7fc <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	691a      	ldr	r2, [r3, #16]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d105      	bne.n	800a81a <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f023 0201 	bic.w	r2, r3, #1
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	611a      	str	r2, [r3, #16]
  }
}
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	40012c00 	.word	0x40012c00
 800a82c:	50012c00 	.word	0x50012c00
 800a830:	40000400 	.word	0x40000400
 800a834:	50000400 	.word	0x50000400
 800a838:	40000800 	.word	0x40000800
 800a83c:	50000800 	.word	0x50000800
 800a840:	40000c00 	.word	0x40000c00
 800a844:	50000c00 	.word	0x50000c00
 800a848:	40013400 	.word	0x40013400
 800a84c:	50013400 	.word	0x50013400
 800a850:	40001800 	.word	0x40001800
 800a854:	50001800 	.word	0x50001800
 800a858:	40001c00 	.word	0x40001c00
 800a85c:	50001c00 	.word	0x50001c00
 800a860:	40002000 	.word	0x40002000
 800a864:	50002000 	.word	0x50002000
 800a868:	40014000 	.word	0x40014000
 800a86c:	50014000 	.word	0x50014000
 800a870:	40014400 	.word	0x40014400
 800a874:	50014400 	.word	0x50014400
 800a878:	40014800 	.word	0x40014800
 800a87c:	50014800 	.word	0x50014800

0800a880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	f023 0201 	bic.w	r2, r3, #1
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f023 0302 	bic.w	r3, r3, #2
 800a8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a40      	ldr	r2, [pc, #256]	@ (800a9dc <TIM_OC1_SetConfig+0x15c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d023      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a3f      	ldr	r2, [pc, #252]	@ (800a9e0 <TIM_OC1_SetConfig+0x160>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d01f      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a3e      	ldr	r2, [pc, #248]	@ (800a9e4 <TIM_OC1_SetConfig+0x164>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d01b      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a3d      	ldr	r2, [pc, #244]	@ (800a9e8 <TIM_OC1_SetConfig+0x168>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d017      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a3c      	ldr	r2, [pc, #240]	@ (800a9ec <TIM_OC1_SetConfig+0x16c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d013      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a3b      	ldr	r2, [pc, #236]	@ (800a9f0 <TIM_OC1_SetConfig+0x170>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00f      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a3a      	ldr	r2, [pc, #232]	@ (800a9f4 <TIM_OC1_SetConfig+0x174>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00b      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a39      	ldr	r2, [pc, #228]	@ (800a9f8 <TIM_OC1_SetConfig+0x178>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d007      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a38      	ldr	r2, [pc, #224]	@ (800a9fc <TIM_OC1_SetConfig+0x17c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <TIM_OC1_SetConfig+0xa8>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a37      	ldr	r2, [pc, #220]	@ (800aa00 <TIM_OC1_SetConfig+0x180>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d10c      	bne.n	800a942 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f023 0308 	bic.w	r3, r3, #8
 800a92e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	4313      	orrs	r3, r2
 800a938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f023 0304 	bic.w	r3, r3, #4
 800a940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a25      	ldr	r2, [pc, #148]	@ (800a9dc <TIM_OC1_SetConfig+0x15c>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d023      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a24      	ldr	r2, [pc, #144]	@ (800a9e0 <TIM_OC1_SetConfig+0x160>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d01f      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a23      	ldr	r2, [pc, #140]	@ (800a9e4 <TIM_OC1_SetConfig+0x164>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d01b      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a22      	ldr	r2, [pc, #136]	@ (800a9e8 <TIM_OC1_SetConfig+0x168>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d017      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a21      	ldr	r2, [pc, #132]	@ (800a9ec <TIM_OC1_SetConfig+0x16c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d013      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a20      	ldr	r2, [pc, #128]	@ (800a9f0 <TIM_OC1_SetConfig+0x170>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00f      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a1f      	ldr	r2, [pc, #124]	@ (800a9f4 <TIM_OC1_SetConfig+0x174>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00b      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a1e      	ldr	r2, [pc, #120]	@ (800a9f8 <TIM_OC1_SetConfig+0x178>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d007      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a1d      	ldr	r2, [pc, #116]	@ (800a9fc <TIM_OC1_SetConfig+0x17c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <TIM_OC1_SetConfig+0x112>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a1c      	ldr	r2, [pc, #112]	@ (800aa00 <TIM_OC1_SetConfig+0x180>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d111      	bne.n	800a9b6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	621a      	str	r2, [r3, #32]
}
 800a9d0:	bf00      	nop
 800a9d2:	371c      	adds	r7, #28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	40012c00 	.word	0x40012c00
 800a9e0:	50012c00 	.word	0x50012c00
 800a9e4:	40013400 	.word	0x40013400
 800a9e8:	50013400 	.word	0x50013400
 800a9ec:	40014000 	.word	0x40014000
 800a9f0:	50014000 	.word	0x50014000
 800a9f4:	40014400 	.word	0x40014400
 800a9f8:	50014400 	.word	0x50014400
 800a9fc:	40014800 	.word	0x40014800
 800aa00:	50014800 	.word	0x50014800

0800aa04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	f023 0210 	bic.w	r2, r3, #16
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	021b      	lsls	r3, r3, #8
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f023 0320 	bic.w	r3, r3, #32
 800aa52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	011b      	lsls	r3, r3, #4
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a36      	ldr	r2, [pc, #216]	@ (800ab3c <TIM_OC2_SetConfig+0x138>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d00b      	beq.n	800aa80 <TIM_OC2_SetConfig+0x7c>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a35      	ldr	r2, [pc, #212]	@ (800ab40 <TIM_OC2_SetConfig+0x13c>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d007      	beq.n	800aa80 <TIM_OC2_SetConfig+0x7c>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a34      	ldr	r2, [pc, #208]	@ (800ab44 <TIM_OC2_SetConfig+0x140>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d003      	beq.n	800aa80 <TIM_OC2_SetConfig+0x7c>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a33      	ldr	r2, [pc, #204]	@ (800ab48 <TIM_OC2_SetConfig+0x144>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10d      	bne.n	800aa9c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a27      	ldr	r2, [pc, #156]	@ (800ab3c <TIM_OC2_SetConfig+0x138>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d023      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a26      	ldr	r2, [pc, #152]	@ (800ab40 <TIM_OC2_SetConfig+0x13c>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d01f      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a25      	ldr	r2, [pc, #148]	@ (800ab44 <TIM_OC2_SetConfig+0x140>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d01b      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a24      	ldr	r2, [pc, #144]	@ (800ab48 <TIM_OC2_SetConfig+0x144>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d017      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a23      	ldr	r2, [pc, #140]	@ (800ab4c <TIM_OC2_SetConfig+0x148>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d013      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a22      	ldr	r2, [pc, #136]	@ (800ab50 <TIM_OC2_SetConfig+0x14c>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00f      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a21      	ldr	r2, [pc, #132]	@ (800ab54 <TIM_OC2_SetConfig+0x150>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00b      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a20      	ldr	r2, [pc, #128]	@ (800ab58 <TIM_OC2_SetConfig+0x154>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d007      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a1f      	ldr	r2, [pc, #124]	@ (800ab5c <TIM_OC2_SetConfig+0x158>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_OC2_SetConfig+0xe8>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a1e      	ldr	r2, [pc, #120]	@ (800ab60 <TIM_OC2_SetConfig+0x15c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d113      	bne.n	800ab14 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aaf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aafa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	621a      	str	r2, [r3, #32]
}
 800ab2e:	bf00      	nop
 800ab30:	371c      	adds	r7, #28
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	40012c00 	.word	0x40012c00
 800ab40:	50012c00 	.word	0x50012c00
 800ab44:	40013400 	.word	0x40013400
 800ab48:	50013400 	.word	0x50013400
 800ab4c:	40014000 	.word	0x40014000
 800ab50:	50014000 	.word	0x50014000
 800ab54:	40014400 	.word	0x40014400
 800ab58:	50014400 	.word	0x50014400
 800ab5c:	40014800 	.word	0x40014800
 800ab60:	50014800 	.word	0x50014800

0800ab64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0303 	bic.w	r3, r3, #3
 800ab9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	4313      	orrs	r3, r2
 800abbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a35      	ldr	r2, [pc, #212]	@ (800ac98 <TIM_OC3_SetConfig+0x134>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00b      	beq.n	800abde <TIM_OC3_SetConfig+0x7a>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a34      	ldr	r2, [pc, #208]	@ (800ac9c <TIM_OC3_SetConfig+0x138>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d007      	beq.n	800abde <TIM_OC3_SetConfig+0x7a>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a33      	ldr	r2, [pc, #204]	@ (800aca0 <TIM_OC3_SetConfig+0x13c>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d003      	beq.n	800abde <TIM_OC3_SetConfig+0x7a>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a32      	ldr	r2, [pc, #200]	@ (800aca4 <TIM_OC3_SetConfig+0x140>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d10d      	bne.n	800abfa <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800abe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	021b      	lsls	r3, r3, #8
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	4313      	orrs	r3, r2
 800abf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800abf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a26      	ldr	r2, [pc, #152]	@ (800ac98 <TIM_OC3_SetConfig+0x134>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d023      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a25      	ldr	r2, [pc, #148]	@ (800ac9c <TIM_OC3_SetConfig+0x138>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d01f      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a24      	ldr	r2, [pc, #144]	@ (800aca0 <TIM_OC3_SetConfig+0x13c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d01b      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a23      	ldr	r2, [pc, #140]	@ (800aca4 <TIM_OC3_SetConfig+0x140>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d017      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a22      	ldr	r2, [pc, #136]	@ (800aca8 <TIM_OC3_SetConfig+0x144>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d013      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a21      	ldr	r2, [pc, #132]	@ (800acac <TIM_OC3_SetConfig+0x148>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d00f      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a20      	ldr	r2, [pc, #128]	@ (800acb0 <TIM_OC3_SetConfig+0x14c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00b      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a1f      	ldr	r2, [pc, #124]	@ (800acb4 <TIM_OC3_SetConfig+0x150>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d007      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a1e      	ldr	r2, [pc, #120]	@ (800acb8 <TIM_OC3_SetConfig+0x154>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d003      	beq.n	800ac4a <TIM_OC3_SetConfig+0xe6>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a1d      	ldr	r2, [pc, #116]	@ (800acbc <TIM_OC3_SetConfig+0x158>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d113      	bne.n	800ac72 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	011b      	lsls	r3, r3, #4
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	621a      	str	r2, [r3, #32]
}
 800ac8c:	bf00      	nop
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	40012c00 	.word	0x40012c00
 800ac9c:	50012c00 	.word	0x50012c00
 800aca0:	40013400 	.word	0x40013400
 800aca4:	50013400 	.word	0x50013400
 800aca8:	40014000 	.word	0x40014000
 800acac:	50014000 	.word	0x50014000
 800acb0:	40014400 	.word	0x40014400
 800acb4:	50014400 	.word	0x50014400
 800acb8:	40014800 	.word	0x40014800
 800acbc:	50014800 	.word	0x50014800

0800acc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	021b      	lsls	r3, r3, #8
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	031b      	lsls	r3, r3, #12
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a36      	ldr	r2, [pc, #216]	@ (800adf8 <TIM_OC4_SetConfig+0x138>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00b      	beq.n	800ad3c <TIM_OC4_SetConfig+0x7c>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a35      	ldr	r2, [pc, #212]	@ (800adfc <TIM_OC4_SetConfig+0x13c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d007      	beq.n	800ad3c <TIM_OC4_SetConfig+0x7c>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a34      	ldr	r2, [pc, #208]	@ (800ae00 <TIM_OC4_SetConfig+0x140>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d003      	beq.n	800ad3c <TIM_OC4_SetConfig+0x7c>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a33      	ldr	r2, [pc, #204]	@ (800ae04 <TIM_OC4_SetConfig+0x144>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d10d      	bne.n	800ad58 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ad42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	031b      	lsls	r3, r3, #12
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a27      	ldr	r2, [pc, #156]	@ (800adf8 <TIM_OC4_SetConfig+0x138>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d023      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a26      	ldr	r2, [pc, #152]	@ (800adfc <TIM_OC4_SetConfig+0x13c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d01f      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a25      	ldr	r2, [pc, #148]	@ (800ae00 <TIM_OC4_SetConfig+0x140>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d01b      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a24      	ldr	r2, [pc, #144]	@ (800ae04 <TIM_OC4_SetConfig+0x144>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d017      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a23      	ldr	r2, [pc, #140]	@ (800ae08 <TIM_OC4_SetConfig+0x148>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d013      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a22      	ldr	r2, [pc, #136]	@ (800ae0c <TIM_OC4_SetConfig+0x14c>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d00f      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a21      	ldr	r2, [pc, #132]	@ (800ae10 <TIM_OC4_SetConfig+0x150>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d00b      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a20      	ldr	r2, [pc, #128]	@ (800ae14 <TIM_OC4_SetConfig+0x154>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d007      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a1f      	ldr	r2, [pc, #124]	@ (800ae18 <TIM_OC4_SetConfig+0x158>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d003      	beq.n	800ada8 <TIM_OC4_SetConfig+0xe8>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a1e      	ldr	r2, [pc, #120]	@ (800ae1c <TIM_OC4_SetConfig+0x15c>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d113      	bne.n	800add0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800adb6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	019b      	lsls	r3, r3, #6
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	019b      	lsls	r3, r3, #6
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	621a      	str	r2, [r3, #32]
}
 800adea:	bf00      	nop
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	40012c00 	.word	0x40012c00
 800adfc:	50012c00 	.word	0x50012c00
 800ae00:	40013400 	.word	0x40013400
 800ae04:	50013400 	.word	0x50013400
 800ae08:	40014000 	.word	0x40014000
 800ae0c:	50014000 	.word	0x50014000
 800ae10:	40014400 	.word	0x40014400
 800ae14:	50014400 	.word	0x50014400
 800ae18:	40014800 	.word	0x40014800
 800ae1c:	50014800 	.word	0x50014800

0800ae20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ae64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	041b      	lsls	r3, r3, #16
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a21      	ldr	r2, [pc, #132]	@ (800aefc <TIM_OC5_SetConfig+0xdc>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d023      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a20      	ldr	r2, [pc, #128]	@ (800af00 <TIM_OC5_SetConfig+0xe0>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d01f      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a1f      	ldr	r2, [pc, #124]	@ (800af04 <TIM_OC5_SetConfig+0xe4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d01b      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a1e      	ldr	r2, [pc, #120]	@ (800af08 <TIM_OC5_SetConfig+0xe8>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d017      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a1d      	ldr	r2, [pc, #116]	@ (800af0c <TIM_OC5_SetConfig+0xec>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d013      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a1c      	ldr	r2, [pc, #112]	@ (800af10 <TIM_OC5_SetConfig+0xf0>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00f      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a1b      	ldr	r2, [pc, #108]	@ (800af14 <TIM_OC5_SetConfig+0xf4>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d00b      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a1a      	ldr	r2, [pc, #104]	@ (800af18 <TIM_OC5_SetConfig+0xf8>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d007      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a19      	ldr	r2, [pc, #100]	@ (800af1c <TIM_OC5_SetConfig+0xfc>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d003      	beq.n	800aec2 <TIM_OC5_SetConfig+0xa2>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a18      	ldr	r2, [pc, #96]	@ (800af20 <TIM_OC5_SetConfig+0x100>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d109      	bne.n	800aed6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aec8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	021b      	lsls	r3, r3, #8
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	621a      	str	r2, [r3, #32]
}
 800aef0:	bf00      	nop
 800aef2:	371c      	adds	r7, #28
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	40012c00 	.word	0x40012c00
 800af00:	50012c00 	.word	0x50012c00
 800af04:	40013400 	.word	0x40013400
 800af08:	50013400 	.word	0x50013400
 800af0c:	40014000 	.word	0x40014000
 800af10:	50014000 	.word	0x50014000
 800af14:	40014400 	.word	0x40014400
 800af18:	50014400 	.word	0x50014400
 800af1c:	40014800 	.word	0x40014800
 800af20:	50014800 	.word	0x50014800

0800af24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	4313      	orrs	r3, r2
 800af62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	051b      	lsls	r3, r3, #20
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	4313      	orrs	r3, r2
 800af76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a22      	ldr	r2, [pc, #136]	@ (800b004 <TIM_OC6_SetConfig+0xe0>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d023      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a21      	ldr	r2, [pc, #132]	@ (800b008 <TIM_OC6_SetConfig+0xe4>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d01f      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a20      	ldr	r2, [pc, #128]	@ (800b00c <TIM_OC6_SetConfig+0xe8>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d01b      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a1f      	ldr	r2, [pc, #124]	@ (800b010 <TIM_OC6_SetConfig+0xec>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d017      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a1e      	ldr	r2, [pc, #120]	@ (800b014 <TIM_OC6_SetConfig+0xf0>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d013      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a1d      	ldr	r2, [pc, #116]	@ (800b018 <TIM_OC6_SetConfig+0xf4>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d00f      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a1c      	ldr	r2, [pc, #112]	@ (800b01c <TIM_OC6_SetConfig+0xf8>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d00b      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a1b      	ldr	r2, [pc, #108]	@ (800b020 <TIM_OC6_SetConfig+0xfc>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d007      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a1a      	ldr	r2, [pc, #104]	@ (800b024 <TIM_OC6_SetConfig+0x100>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d003      	beq.n	800afc8 <TIM_OC6_SetConfig+0xa4>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a19      	ldr	r2, [pc, #100]	@ (800b028 <TIM_OC6_SetConfig+0x104>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d109      	bne.n	800afdc <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	029b      	lsls	r3, r3, #10
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	621a      	str	r2, [r3, #32]
}
 800aff6:	bf00      	nop
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40012c00 	.word	0x40012c00
 800b008:	50012c00 	.word	0x50012c00
 800b00c:	40013400 	.word	0x40013400
 800b010:	50013400 	.word	0x50013400
 800b014:	40014000 	.word	0x40014000
 800b018:	50014000 	.word	0x50014000
 800b01c:	40014400 	.word	0x40014400
 800b020:	50014400 	.word	0x50014400
 800b024:	40014800 	.word	0x40014800
 800b028:	50014800 	.word	0x50014800

0800b02c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6a1b      	ldr	r3, [r3, #32]
 800b03c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	f023 0201 	bic.w	r2, r3, #1
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	011b      	lsls	r3, r3, #4
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	4313      	orrs	r3, r2
 800b060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f023 030a 	bic.w	r3, r3, #10
 800b068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	4313      	orrs	r3, r2
 800b070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	621a      	str	r2, [r3, #32]
}
 800b07e:	bf00      	nop
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b087      	sub	sp, #28
 800b08e:	af00      	add	r7, sp, #0
 800b090:	60f8      	str	r0, [r7, #12]
 800b092:	60b9      	str	r1, [r7, #8]
 800b094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	f023 0210 	bic.w	r2, r3, #16
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b0b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	031b      	lsls	r3, r3, #12
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b0c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	621a      	str	r2, [r3, #32]
}
 800b0de:	bf00      	nop
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b085      	sub	sp, #20
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	f043 0307 	orr.w	r3, r3, #7
 800b110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	609a      	str	r2, [r3, #8]
}
 800b118:	bf00      	nop
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b13e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	021a      	lsls	r2, r3, #8
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	431a      	orrs	r2, r3
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	4313      	orrs	r3, r2
 800b150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	609a      	str	r2, [r3, #8]
}
 800b158:	bf00      	nop
 800b15a:	371c      	adds	r7, #28
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b174:	2b01      	cmp	r3, #1
 800b176:	d101      	bne.n	800b17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b178:	2302      	movs	r3, #2
 800b17a:	e0a1      	b.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a4a      	ldr	r2, [pc, #296]	@ (800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00e      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a49      	ldr	r2, [pc, #292]	@ (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d009      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a47      	ldr	r2, [pc, #284]	@ (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d004      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a46      	ldr	r2, [pc, #280]	@ (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d108      	bne.n	800b1d6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b1ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b1dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a34      	ldr	r2, [pc, #208]	@ (800b2cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d04a      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a33      	ldr	r2, [pc, #204]	@ (800b2d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d045      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b210:	d040      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b21a:	d03b      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a2e      	ldr	r2, [pc, #184]	@ (800b2dc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d036      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a2d      	ldr	r2, [pc, #180]	@ (800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d031      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a2b      	ldr	r2, [pc, #172]	@ (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d02c      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a2a      	ldr	r2, [pc, #168]	@ (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d027      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a28      	ldr	r2, [pc, #160]	@ (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d022      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a27      	ldr	r2, [pc, #156]	@ (800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d01d      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1d      	ldr	r2, [pc, #116]	@ (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d018      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a1c      	ldr	r2, [pc, #112]	@ (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d013      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a20      	ldr	r2, [pc, #128]	@ (800b2f4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00e      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a1f      	ldr	r2, [pc, #124]	@ (800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d009      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a1d      	ldr	r2, [pc, #116]	@ (800b2fc <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d004      	beq.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a1c      	ldr	r2, [pc, #112]	@ (800b300 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d10c      	bne.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b29a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	40012c00 	.word	0x40012c00
 800b2d0:	50012c00 	.word	0x50012c00
 800b2d4:	40013400 	.word	0x40013400
 800b2d8:	50013400 	.word	0x50013400
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	50000400 	.word	0x50000400
 800b2e4:	40000800 	.word	0x40000800
 800b2e8:	50000800 	.word	0x50000800
 800b2ec:	40000c00 	.word	0x40000c00
 800b2f0:	50000c00 	.word	0x50000c00
 800b2f4:	40001800 	.word	0x40001800
 800b2f8:	50001800 	.word	0x50001800
 800b2fc:	40014000 	.word	0x40014000
 800b300:	50014000 	.word	0x50014000

0800b304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e042      	b.n	800b428 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d106      	bne.n	800b3ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7f5 ff21 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2224      	movs	r2, #36	@ 0x24
 800b3be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0201 	bic.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fd24 	bl	800be28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fb33 	bl	800ba4c <UART_SetConfig>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d101      	bne.n	800b3f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e01b      	b.n	800b428 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b3fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689a      	ldr	r2, [r3, #8]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b40e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f042 0201 	orr.w	r2, r2, #1
 800b41e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fda3 	bl	800bf6c <UART_CheckIdleState>
 800b426:	4603      	mov	r3, r0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b0ae      	sub	sp, #184	@ 0xb8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b45a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b45e:	4013      	ands	r3, r2
 800b460:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800b464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d11b      	bne.n	800b4a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b46c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b470:	f003 0320 	and.w	r3, r3, #32
 800b474:	2b00      	cmp	r3, #0
 800b476:	d015      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b478:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b47c:	f003 0320 	and.w	r3, r3, #32
 800b480:	2b00      	cmp	r3, #0
 800b482:	d105      	bne.n	800b490 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d009      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 82ac 	beq.w	800b9f2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	4798      	blx	r3
      }
      return;
 800b4a2:	e2a6      	b.n	800b9f2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 80fd 	beq.w	800b6a8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b4b2:	4b7a      	ldr	r3, [pc, #488]	@ (800b69c <HAL_UART_IRQHandler+0x26c>)
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d106      	bne.n	800b4c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b4ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b4be:	4b78      	ldr	r3, [pc, #480]	@ (800b6a0 <HAL_UART_IRQHandler+0x270>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 80f0 	beq.w	800b6a8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d011      	beq.n	800b4f8 <HAL_UART_IRQHandler+0xc8>
 800b4d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00b      	beq.n	800b4f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ee:	f043 0201 	orr.w	r2, r3, #1
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4fc:	f003 0302 	and.w	r3, r3, #2
 800b500:	2b00      	cmp	r3, #0
 800b502:	d011      	beq.n	800b528 <HAL_UART_IRQHandler+0xf8>
 800b504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00b      	beq.n	800b528 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2202      	movs	r2, #2
 800b516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51e:	f043 0204 	orr.w	r2, r3, #4
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b528:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	2b00      	cmp	r3, #0
 800b532:	d011      	beq.n	800b558 <HAL_UART_IRQHandler+0x128>
 800b534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2204      	movs	r2, #4
 800b546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b54e:	f043 0202 	orr.w	r2, r3, #2
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b55c:	f003 0308 	and.w	r3, r3, #8
 800b560:	2b00      	cmp	r3, #0
 800b562:	d017      	beq.n	800b594 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b568:	f003 0320 	and.w	r3, r3, #32
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d105      	bne.n	800b57c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b574:	4b49      	ldr	r3, [pc, #292]	@ (800b69c <HAL_UART_IRQHandler+0x26c>)
 800b576:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00b      	beq.n	800b594 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2208      	movs	r2, #8
 800b582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b58a:	f043 0208 	orr.w	r2, r3, #8
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d012      	beq.n	800b5c6 <HAL_UART_IRQHandler+0x196>
 800b5a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b5a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00c      	beq.n	800b5c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5bc:	f043 0220 	orr.w	r2, r3, #32
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8212 	beq.w	800b9f6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5d6:	f003 0320 	and.w	r3, r3, #32
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d013      	beq.n	800b606 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d105      	bne.n	800b5f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d007      	beq.n	800b606 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b60c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b61a:	2b40      	cmp	r3, #64	@ 0x40
 800b61c:	d005      	beq.n	800b62a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b61e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b626:	2b00      	cmp	r3, #0
 800b628:	d02e      	beq.n	800b688 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fdb5 	bl	800c19a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b63a:	2b40      	cmp	r3, #64	@ 0x40
 800b63c:	d120      	bne.n	800b680 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b644:	2b00      	cmp	r3, #0
 800b646:	d017      	beq.n	800b678 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b64e:	4a15      	ldr	r2, [pc, #84]	@ (800b6a4 <HAL_UART_IRQHandler+0x274>)
 800b650:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b658:	4618      	mov	r0, r3
 800b65a:	f7f6 ff8f 	bl	800257c <HAL_DMA_Abort_IT>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d019      	beq.n	800b698 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b672:	4610      	mov	r0, r2
 800b674:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b676:	e00f      	b.n	800b698 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 f9d1 	bl	800ba20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b67e:	e00b      	b.n	800b698 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f9cd 	bl	800ba20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b686:	e007      	b.n	800b698 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f9c9 	bl	800ba20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b696:	e1ae      	b.n	800b9f6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b698:	bf00      	nop
    return;
 800b69a:	e1ac      	b.n	800b9f6 <HAL_UART_IRQHandler+0x5c6>
 800b69c:	10000001 	.word	0x10000001
 800b6a0:	04000120 	.word	0x04000120
 800b6a4:	0800c267 	.word	0x0800c267

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	f040 8142 	bne.w	800b936 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b6b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6b6:	f003 0310 	and.w	r3, r3, #16
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f000 813b 	beq.w	800b936 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b6c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b6c4:	f003 0310 	and.w	r3, r3, #16
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 8134 	beq.w	800b936 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2210      	movs	r2, #16
 800b6d4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e0:	2b40      	cmp	r3, #64	@ 0x40
 800b6e2:	f040 80aa 	bne.w	800b83a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6f0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800b6f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 8084 	beq.w	800b806 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b704:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b708:	429a      	cmp	r2, r3
 800b70a:	d27c      	bcs.n	800b806 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b712:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b71c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b71e:	2b81      	cmp	r3, #129	@ 0x81
 800b720:	d060      	beq.n	800b7e4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b730:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b732:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b748:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b74c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b750:	e841 2300 	strex	r3, r2, [r1]
 800b754:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e2      	bne.n	800b722 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3308      	adds	r3, #8
 800b762:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b766:	e853 3f00 	ldrex	r3, [r3]
 800b76a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b76c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b76e:	f023 0301 	bic.w	r3, r3, #1
 800b772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3308      	adds	r3, #8
 800b77c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b780:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b782:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b786:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b788:	e841 2300 	strex	r3, r2, [r1]
 800b78c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b78e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e3      	bne.n	800b75c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2220      	movs	r2, #32
 800b798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7b2:	f023 0310 	bic.w	r3, r3, #16
 800b7b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7cc:	e841 2300 	strex	r3, r2, [r1]
 800b7d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1e4      	bne.n	800b7a2 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7f6 fe50 	bl	8002484 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f918 	bl	800ba34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b804:	e0f9      	b.n	800b9fa <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b80c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b810:	429a      	cmp	r2, r3
 800b812:	f040 80f2 	bne.w	800b9fa <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b81c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b81e:	2b81      	cmp	r3, #129	@ 0x81
 800b820:	f040 80eb 	bne.w	800b9fa <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f8fe 	bl	800ba34 <HAL_UARTEx_RxEventCallback>
      return;
 800b838:	e0df      	b.n	800b9fa <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b846:	b29b      	uxth	r3, r3
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b854:	b29b      	uxth	r3, r3
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 80d1 	beq.w	800b9fe <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800b85c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 80cc 	beq.w	800b9fe <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86e:	e853 3f00 	ldrex	r3, [r3]
 800b872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b87a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b888:	647b      	str	r3, [r7, #68]	@ 0x44
 800b88a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b88e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e4      	bne.n	800b866 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8b2:	f023 0301 	bic.w	r3, r3, #1
 800b8b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3308      	adds	r3, #8
 800b8c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b8c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8cc:	e841 2300 	strex	r3, r2, [r1]
 800b8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1e1      	bne.n	800b89c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2220      	movs	r2, #32
 800b8dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f023 0310 	bic.w	r3, r3, #16
 800b900:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b90e:	61fb      	str	r3, [r7, #28]
 800b910:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	69b9      	ldr	r1, [r7, #24]
 800b914:	69fa      	ldr	r2, [r7, #28]
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	617b      	str	r3, [r7, #20]
   return(result);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e4      	bne.n	800b8ec <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2202      	movs	r2, #2
 800b926:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b928:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f880 	bl	800ba34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b934:	e063      	b.n	800b9fe <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b93a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00e      	beq.n	800b960 <HAL_UART_IRQHandler+0x530>
 800b942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d008      	beq.n	800b960 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b956:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fcc1 	bl	800c2e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b95e:	e051      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d014      	beq.n	800b996 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b96c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b974:	2b00      	cmp	r3, #0
 800b976:	d105      	bne.n	800b984 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b97c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d008      	beq.n	800b996 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d03a      	beq.n	800ba02 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	4798      	blx	r3
    }
    return;
 800b994:	e035      	b.n	800ba02 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d009      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x586>
 800b9a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b9a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fc6b 	bl	800c28a <UART_EndTransmit_IT>
    return;
 800b9b4:	e026      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b9b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d009      	beq.n	800b9d6 <HAL_UART_IRQHandler+0x5a6>
 800b9c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b9c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fc9a 	bl	800c308 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9d4:	e016      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d010      	beq.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
 800b9e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	da0c      	bge.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fc82 	bl	800c2f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9f0:	e008      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
      return;
 800b9f2:	bf00      	nop
 800b9f4:	e006      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
    return;
 800b9f6:	bf00      	nop
 800b9f8:	e004      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
      return;
 800b9fa:	bf00      	nop
 800b9fc:	e002      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
      return;
 800b9fe:	bf00      	nop
 800ba00:	e000      	b.n	800ba04 <HAL_UART_IRQHandler+0x5d4>
    return;
 800ba02:	bf00      	nop
  }
}
 800ba04:	37b8      	adds	r7, #184	@ 0xb8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop

0800ba0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba50:	b094      	sub	sp, #80	@ 0x50
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	4b78      	ldr	r3, [pc, #480]	@ (800bc44 <UART_SetConfig+0x1f8>)
 800ba62:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	431a      	orrs	r2, r3
 800ba6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	431a      	orrs	r2, r3
 800ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba76:	69db      	ldr	r3, [r3, #28]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4971      	ldr	r1, [pc, #452]	@ (800bc48 <UART_SetConfig+0x1fc>)
 800ba84:	4019      	ands	r1, r3
 800ba86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba8c:	430b      	orrs	r3, r1
 800ba8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ba9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9c:	68d9      	ldr	r1, [r3, #12]
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	ea40 0301 	orr.w	r3, r0, r1
 800baa6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800baa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800baae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b64      	ldr	r3, [pc, #400]	@ (800bc44 <UART_SetConfig+0x1f8>)
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d009      	beq.n	800bacc <UART_SetConfig+0x80>
 800bab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	4b63      	ldr	r3, [pc, #396]	@ (800bc4c <UART_SetConfig+0x200>)
 800babe:	429a      	cmp	r2, r3
 800bac0:	d004      	beq.n	800bacc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac4:	6a1a      	ldr	r2, [r3, #32]
 800bac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bac8:	4313      	orrs	r3, r2
 800baca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bad6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae0:	430b      	orrs	r3, r1
 800bae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baea:	f023 000f 	bic.w	r0, r3, #15
 800baee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800baf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	ea40 0301 	orr.w	r3, r0, r1
 800bafa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	4b53      	ldr	r3, [pc, #332]	@ (800bc50 <UART_SetConfig+0x204>)
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d102      	bne.n	800bb0c <UART_SetConfig+0xc0>
 800bb06:	2301      	movs	r3, #1
 800bb08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb0a:	e066      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	4b50      	ldr	r3, [pc, #320]	@ (800bc54 <UART_SetConfig+0x208>)
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d102      	bne.n	800bb1c <UART_SetConfig+0xd0>
 800bb16:	2302      	movs	r3, #2
 800bb18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb1a:	e05e      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	4b4d      	ldr	r3, [pc, #308]	@ (800bc58 <UART_SetConfig+0x20c>)
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d102      	bne.n	800bb2c <UART_SetConfig+0xe0>
 800bb26:	2304      	movs	r3, #4
 800bb28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb2a:	e056      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4b4a      	ldr	r3, [pc, #296]	@ (800bc5c <UART_SetConfig+0x210>)
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d102      	bne.n	800bb3c <UART_SetConfig+0xf0>
 800bb36:	2308      	movs	r3, #8
 800bb38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb3a:	e04e      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	4b47      	ldr	r3, [pc, #284]	@ (800bc60 <UART_SetConfig+0x214>)
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d102      	bne.n	800bb4c <UART_SetConfig+0x100>
 800bb46:	2310      	movs	r3, #16
 800bb48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb4a:	e046      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	4b44      	ldr	r3, [pc, #272]	@ (800bc64 <UART_SetConfig+0x218>)
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d102      	bne.n	800bb5c <UART_SetConfig+0x110>
 800bb56:	2320      	movs	r3, #32
 800bb58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb5a:	e03e      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	4b41      	ldr	r3, [pc, #260]	@ (800bc68 <UART_SetConfig+0x21c>)
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d102      	bne.n	800bb6c <UART_SetConfig+0x120>
 800bb66:	2340      	movs	r3, #64	@ 0x40
 800bb68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb6a:	e036      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	4b3e      	ldr	r3, [pc, #248]	@ (800bc6c <UART_SetConfig+0x220>)
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d102      	bne.n	800bb7c <UART_SetConfig+0x130>
 800bb76:	2380      	movs	r3, #128	@ 0x80
 800bb78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb7a:	e02e      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	4b3b      	ldr	r3, [pc, #236]	@ (800bc70 <UART_SetConfig+0x224>)
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d103      	bne.n	800bb8e <UART_SetConfig+0x142>
 800bb86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb8c:	e025      	b.n	800bbda <UART_SetConfig+0x18e>
 800bb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4b38      	ldr	r3, [pc, #224]	@ (800bc74 <UART_SetConfig+0x228>)
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d103      	bne.n	800bba0 <UART_SetConfig+0x154>
 800bb98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb9e:	e01c      	b.n	800bbda <UART_SetConfig+0x18e>
 800bba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	4b34      	ldr	r3, [pc, #208]	@ (800bc78 <UART_SetConfig+0x22c>)
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d103      	bne.n	800bbb2 <UART_SetConfig+0x166>
 800bbaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbb0:	e013      	b.n	800bbda <UART_SetConfig+0x18e>
 800bbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b31      	ldr	r3, [pc, #196]	@ (800bc7c <UART_SetConfig+0x230>)
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d103      	bne.n	800bbc4 <UART_SetConfig+0x178>
 800bbbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bbc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbc2:	e00a      	b.n	800bbda <UART_SetConfig+0x18e>
 800bbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	4b1e      	ldr	r3, [pc, #120]	@ (800bc44 <UART_SetConfig+0x1f8>)
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d103      	bne.n	800bbd6 <UART_SetConfig+0x18a>
 800bbce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bbd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbd4:	e001      	b.n	800bbda <UART_SetConfig+0x18e>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	4b19      	ldr	r3, [pc, #100]	@ (800bc44 <UART_SetConfig+0x1f8>)
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d005      	beq.n	800bbf0 <UART_SetConfig+0x1a4>
 800bbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	4b18      	ldr	r3, [pc, #96]	@ (800bc4c <UART_SetConfig+0x200>)
 800bbea:	429a      	cmp	r2, r3
 800bbec:	f040 8094 	bne.w	800bd18 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bbf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	623b      	str	r3, [r7, #32]
 800bbf6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bbfc:	f7fb fbb0 	bl	8007360 <HAL_RCCEx_GetPeriphCLKFreq>
 800bc00:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 80f7 	beq.w	800bdf8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc0e:	4a1c      	ldr	r2, [pc, #112]	@ (800bc80 <UART_SetConfig+0x234>)
 800bc10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc14:	461a      	mov	r2, r3
 800bc16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc18:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc1c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	4613      	mov	r3, r2
 800bc24:	005b      	lsls	r3, r3, #1
 800bc26:	4413      	add	r3, r2
 800bc28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d305      	bcc.n	800bc3a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d924      	bls.n	800bc84 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bc40:	e069      	b.n	800bd16 <UART_SetConfig+0x2ca>
 800bc42:	bf00      	nop
 800bc44:	44002400 	.word	0x44002400
 800bc48:	cfff69f3 	.word	0xcfff69f3
 800bc4c:	54002400 	.word	0x54002400
 800bc50:	40013800 	.word	0x40013800
 800bc54:	40004400 	.word	0x40004400
 800bc58:	40004800 	.word	0x40004800
 800bc5c:	40004c00 	.word	0x40004c00
 800bc60:	40005000 	.word	0x40005000
 800bc64:	40006400 	.word	0x40006400
 800bc68:	40007800 	.word	0x40007800
 800bc6c:	40007c00 	.word	0x40007c00
 800bc70:	40008000 	.word	0x40008000
 800bc74:	40006800 	.word	0x40006800
 800bc78:	40006c00 	.word	0x40006c00
 800bc7c:	40008400 	.word	0x40008400
 800bc80:	0800eacc 	.word	0x0800eacc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc86:	2200      	movs	r2, #0
 800bc88:	61bb      	str	r3, [r7, #24]
 800bc8a:	61fa      	str	r2, [r7, #28]
 800bc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc90:	4a64      	ldr	r2, [pc, #400]	@ (800be24 <UART_SetConfig+0x3d8>)
 800bc92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2200      	movs	r2, #0
 800bc9a:	613b      	str	r3, [r7, #16]
 800bc9c:	617a      	str	r2, [r7, #20]
 800bc9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bca2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bca6:	f7f4 faf3 	bl	8000290 <__aeabi_uldivmod>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4610      	mov	r0, r2
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f04f 0200 	mov.w	r2, #0
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	020b      	lsls	r3, r1, #8
 800bcbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bcc0:	0202      	lsls	r2, r0, #8
 800bcc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcc4:	6849      	ldr	r1, [r1, #4]
 800bcc6:	0849      	lsrs	r1, r1, #1
 800bcc8:	2000      	movs	r0, #0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4605      	mov	r5, r0
 800bcce:	eb12 0804 	adds.w	r8, r2, r4
 800bcd2:	eb43 0905 	adc.w	r9, r3, r5
 800bcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	60fa      	str	r2, [r7, #12]
 800bce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bce4:	4640      	mov	r0, r8
 800bce6:	4649      	mov	r1, r9
 800bce8:	f7f4 fad2 	bl	8000290 <__aeabi_uldivmod>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bcfa:	d308      	bcc.n	800bd0e <UART_SetConfig+0x2c2>
 800bcfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd02:	d204      	bcs.n	800bd0e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800bd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd0a:	60da      	str	r2, [r3, #12]
 800bd0c:	e003      	b.n	800bd16 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bd14:	e070      	b.n	800bdf8 <UART_SetConfig+0x3ac>
 800bd16:	e06f      	b.n	800bdf8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd20:	d13c      	bne.n	800bd9c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd24:	2200      	movs	r2, #0
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	607a      	str	r2, [r7, #4]
 800bd2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd2e:	f7fb fb17 	bl	8007360 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd32:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d05e      	beq.n	800bdf8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd3e:	4a39      	ldr	r2, [pc, #228]	@ (800be24 <UART_SetConfig+0x3d8>)
 800bd40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd44:	461a      	mov	r2, r3
 800bd46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd48:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd4c:	005a      	lsls	r2, r3, #1
 800bd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	441a      	add	r2, r3
 800bd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd62:	2b0f      	cmp	r3, #15
 800bd64:	d916      	bls.n	800bd94 <UART_SetConfig+0x348>
 800bd66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd6c:	d212      	bcs.n	800bd94 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	f023 030f 	bic.w	r3, r3, #15
 800bd76:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	f003 0307 	and.w	r3, r3, #7
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bd86:	4313      	orrs	r3, r2
 800bd88:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bd90:	60da      	str	r2, [r3, #12]
 800bd92:	e031      	b.n	800bdf8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd9a:	e02d      	b.n	800bdf8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd9e:	2200      	movs	r2, #0
 800bda0:	469a      	mov	sl, r3
 800bda2:	4693      	mov	fp, r2
 800bda4:	4650      	mov	r0, sl
 800bda6:	4659      	mov	r1, fp
 800bda8:	f7fb fada 	bl	8007360 <HAL_RCCEx_GetPeriphCLKFreq>
 800bdac:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bdae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d021      	beq.n	800bdf8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb8:	4a1a      	ldr	r2, [pc, #104]	@ (800be24 <UART_SetConfig+0x3d8>)
 800bdba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdc2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	085b      	lsrs	r3, r3, #1
 800bdcc:	441a      	add	r2, r3
 800bdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdda:	2b0f      	cmp	r3, #15
 800bddc:	d909      	bls.n	800bdf2 <UART_SetConfig+0x3a6>
 800bdde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bde4:	d205      	bcs.n	800bdf2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60da      	str	r2, [r3, #12]
 800bdf0:	e002      	b.n	800bdf8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be02:	2201      	movs	r2, #1
 800be04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0a:	2200      	movs	r2, #0
 800be0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be10:	2200      	movs	r2, #0
 800be12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3750      	adds	r7, #80	@ 0x50
 800be1c:	46bd      	mov	sp, r7
 800be1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be22:	bf00      	nop
 800be24:	0800eacc 	.word	0x0800eacc

0800be28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be34:	f003 0308 	and.w	r3, r3, #8
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00a      	beq.n	800be96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	430a      	orrs	r2, r1
 800beb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bebc:	f003 0310 	and.w	r3, r3, #16
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00a      	beq.n	800beda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bede:	f003 0320 	and.w	r3, r3, #32
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00a      	beq.n	800befc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	430a      	orrs	r2, r1
 800befa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d01a      	beq.n	800bf3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf26:	d10a      	bne.n	800bf3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	605a      	str	r2, [r3, #4]
  }
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b098      	sub	sp, #96	@ 0x60
 800bf70:	af02      	add	r7, sp, #8
 800bf72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf7c:	f7f5 ffee 	bl	8001f5c <HAL_GetTick>
 800bf80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 0308 	and.w	r3, r3, #8
 800bf8c:	2b08      	cmp	r3, #8
 800bf8e:	d12f      	bne.n	800bff0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f88e 	bl	800c0c0 <UART_WaitOnFlagUntilTimeout>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d022      	beq.n	800bff0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e6      	bne.n	800bfaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e063      	b.n	800c0b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0304 	and.w	r3, r3, #4
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	d149      	bne.n	800c092 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bffe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c006:	2200      	movs	r2, #0
 800c008:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f857 	bl	800c0c0 <UART_WaitOnFlagUntilTimeout>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d03c      	beq.n	800c092 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	623b      	str	r3, [r7, #32]
   return(result);
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c02c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c036:	633b      	str	r3, [r7, #48]	@ 0x30
 800c038:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c03c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e6      	bne.n	800c018 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3308      	adds	r3, #8
 800c050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	60fb      	str	r3, [r7, #12]
   return(result);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f023 0301 	bic.w	r3, r3, #1
 800c060:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c06a:	61fa      	str	r2, [r7, #28]
 800c06c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	69b9      	ldr	r1, [r7, #24]
 800c070:	69fa      	ldr	r2, [r7, #28]
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	617b      	str	r3, [r7, #20]
   return(result);
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e5      	bne.n	800c04a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e012      	b.n	800c0b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2220      	movs	r2, #32
 800c096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2220      	movs	r2, #32
 800c09e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3758      	adds	r7, #88	@ 0x58
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	603b      	str	r3, [r7, #0]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0d0:	e04f      	b.n	800c172 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d8:	d04b      	beq.n	800c172 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0da:	f7f5 ff3f 	bl	8001f5c <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d302      	bcc.n	800c0f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e04e      	b.n	800c192 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 0304 	and.w	r3, r3, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d037      	beq.n	800c172 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2b80      	cmp	r3, #128	@ 0x80
 800c106:	d034      	beq.n	800c172 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b40      	cmp	r3, #64	@ 0x40
 800c10c:	d031      	beq.n	800c172 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	69db      	ldr	r3, [r3, #28]
 800c114:	f003 0308 	and.w	r3, r3, #8
 800c118:	2b08      	cmp	r3, #8
 800c11a:	d110      	bne.n	800c13e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2208      	movs	r2, #8
 800c122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f838 	bl	800c19a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2208      	movs	r2, #8
 800c12e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	e029      	b.n	800c192 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	69db      	ldr	r3, [r3, #28]
 800c144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c14c:	d111      	bne.n	800c172 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 f81e 	bl	800c19a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2220      	movs	r2, #32
 800c162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e00f      	b.n	800c192 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	69da      	ldr	r2, [r3, #28]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	4013      	ands	r3, r2
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	429a      	cmp	r2, r3
 800c180:	bf0c      	ite	eq
 800c182:	2301      	moveq	r3, #1
 800c184:	2300      	movne	r3, #0
 800c186:	b2db      	uxtb	r3, r3
 800c188:	461a      	mov	r2, r3
 800c18a:	79fb      	ldrb	r3, [r7, #7]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d0a0      	beq.n	800c0d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b095      	sub	sp, #84	@ 0x54
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1aa:	e853 3f00 	ldrex	r3, [r3]
 800c1ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1c8:	e841 2300 	strex	r3, r2, [r1]
 800c1cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d1e6      	bne.n	800c1a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3308      	adds	r3, #8
 800c1da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	e853 3f00 	ldrex	r3, [r3]
 800c1e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1ea:	f023 0301 	bic.w	r3, r3, #1
 800c1ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c200:	e841 2300 	strex	r3, r2, [r1]
 800c204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e3      	bne.n	800c1d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c210:	2b01      	cmp	r3, #1
 800c212:	d118      	bne.n	800c246 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	e853 3f00 	ldrex	r3, [r3]
 800c220:	60bb      	str	r3, [r7, #8]
   return(result);
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	f023 0310 	bic.w	r3, r3, #16
 800c228:	647b      	str	r3, [r7, #68]	@ 0x44
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c232:	61bb      	str	r3, [r7, #24]
 800c234:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c236:	6979      	ldr	r1, [r7, #20]
 800c238:	69ba      	ldr	r2, [r7, #24]
 800c23a:	e841 2300 	strex	r3, r2, [r1]
 800c23e:	613b      	str	r3, [r7, #16]
   return(result);
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1e6      	bne.n	800c214 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2220      	movs	r2, #32
 800c24a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c25a:	bf00      	nop
 800c25c:	3754      	adds	r7, #84	@ 0x54
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b084      	sub	sp, #16
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f7ff fbcf 	bl	800ba20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c282:	bf00      	nop
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b088      	sub	sp, #32
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	e853 3f00 	ldrex	r3, [r3]
 800c29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2a6:	61fb      	str	r3, [r7, #28]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	61bb      	str	r3, [r7, #24]
 800c2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	6979      	ldr	r1, [r7, #20]
 800c2b6:	69ba      	ldr	r2, [r7, #24]
 800c2b8:	e841 2300 	strex	r3, r2, [r1]
 800c2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e6      	bne.n	800c292 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff fb9a 	bl	800ba0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2d8:	bf00      	nop
 800c2da:	3720      	adds	r7, #32
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d101      	bne.n	800c332 <HAL_UARTEx_DisableFifoMode+0x16>
 800c32e:	2302      	movs	r3, #2
 800c330:	e027      	b.n	800c382 <HAL_UARTEx_DisableFifoMode+0x66>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2224      	movs	r2, #36	@ 0x24
 800c33e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f022 0201 	bic.w	r2, r2, #1
 800c358:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c360:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2220      	movs	r2, #32
 800c374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d101      	bne.n	800c3a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	e02d      	b.n	800c402 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2224      	movs	r2, #36	@ 0x24
 800c3b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f022 0201 	bic.w	r2, r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f850 	bl	800c488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2220      	movs	r2, #32
 800c3f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d101      	bne.n	800c422 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c41e:	2302      	movs	r3, #2
 800c420:	e02d      	b.n	800c47e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2224      	movs	r2, #36	@ 0x24
 800c42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f022 0201 	bic.w	r2, r2, #1
 800c448:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	683a      	ldr	r2, [r7, #0]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f812 	bl	800c488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2220      	movs	r2, #32
 800c470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c494:	2b00      	cmp	r3, #0
 800c496:	d108      	bne.n	800c4aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4a8:	e031      	b.n	800c50e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4aa:	2308      	movs	r3, #8
 800c4ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4ae:	2308      	movs	r3, #8
 800c4b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	0e5b      	lsrs	r3, r3, #25
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	f003 0307 	and.w	r3, r3, #7
 800c4c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	0f5b      	lsrs	r3, r3, #29
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 0307 	and.w	r3, r3, #7
 800c4d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	7b3a      	ldrb	r2, [r7, #12]
 800c4d6:	4911      	ldr	r1, [pc, #68]	@ (800c51c <UARTEx_SetNbDataToProcess+0x94>)
 800c4d8:	5c8a      	ldrb	r2, [r1, r2]
 800c4da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4de:	7b3a      	ldrb	r2, [r7, #12]
 800c4e0:	490f      	ldr	r1, [pc, #60]	@ (800c520 <UARTEx_SetNbDataToProcess+0x98>)
 800c4e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	7b7a      	ldrb	r2, [r7, #13]
 800c4f4:	4909      	ldr	r1, [pc, #36]	@ (800c51c <UARTEx_SetNbDataToProcess+0x94>)
 800c4f6:	5c8a      	ldrb	r2, [r1, r2]
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4fc:	7b7a      	ldrb	r2, [r7, #13]
 800c4fe:	4908      	ldr	r1, [pc, #32]	@ (800c520 <UARTEx_SetNbDataToProcess+0x98>)
 800c500:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c502:	fb93 f3f2 	sdiv	r3, r3, r2
 800c506:	b29a      	uxth	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c50e:	bf00      	nop
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	0800eae4 	.word	0x0800eae4
 800c520:	0800eaec 	.word	0x0800eaec

0800c524 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c530:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c53c:	f043 0201 	orr.w	r2, r3, #1
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c552:	b084      	sub	sp, #16
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	f107 001c 	add.w	r0, r7, #28
 800c560:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	e008      	b.n	800c580 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7ff ffd8 	bl	800c524 <USB_CoreReset>
 800c574:	4603      	mov	r3, r0
 800c576:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c58a:	b004      	add	sp, #16
 800c58c:	4770      	bx	lr

0800c58e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c596:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c59a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	43db      	mvns	r3, r3
 800c5a4:	401a      	ands	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800c5c4:	78fb      	ldrb	r3, [r7, #3]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	641a      	str	r2, [r3, #64]	@ 0x40
 800c5d6:	e00b      	b.n	800c5f0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800c5d8:	78fb      	ldrb	r3, [r7, #3]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d106      	bne.n	800c5ec <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	641a      	str	r2, [r3, #64]	@ 0x40
 800c5ea:	e001      	b.n	800c5f0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e000      	b.n	800c5f2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c5fe:	b084      	sub	sp, #16
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	f107 001c 	add.w	r0, r7, #28
 800c60c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c61a:	f023 0201 	bic.w	r2, r3, #1
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c622:	2100      	movs	r1, #0
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7ff ffc7 	bl	800c5b8 <USB_SetCurrentMode>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c640:	b004      	add	sp, #16
 800c642:	4770      	bx	lr

0800c644 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c650:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <__NVIC_SetPriority>:
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	6039      	str	r1, [r7, #0]
 800c672:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	db0a      	blt.n	800c692 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	490c      	ldr	r1, [pc, #48]	@ (800c6b4 <__NVIC_SetPriority+0x4c>)
 800c682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c686:	0112      	lsls	r2, r2, #4
 800c688:	b2d2      	uxtb	r2, r2
 800c68a:	440b      	add	r3, r1
 800c68c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c690:	e00a      	b.n	800c6a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	b2da      	uxtb	r2, r3
 800c696:	4908      	ldr	r1, [pc, #32]	@ (800c6b8 <__NVIC_SetPriority+0x50>)
 800c698:	88fb      	ldrh	r3, [r7, #6]
 800c69a:	f003 030f 	and.w	r3, r3, #15
 800c69e:	3b04      	subs	r3, #4
 800c6a0:	0112      	lsls	r2, r2, #4
 800c6a2:	b2d2      	uxtb	r2, r2
 800c6a4:	440b      	add	r3, r1
 800c6a6:	761a      	strb	r2, [r3, #24]
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr
 800c6b4:	e000e100 	.word	0xe000e100
 800c6b8:	e000ed00 	.word	0xe000ed00

0800c6bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800c6c0:	4b05      	ldr	r3, [pc, #20]	@ (800c6d8 <SysTick_Handler+0x1c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c6c4:	f001 fba6 	bl	800de14 <xTaskGetSchedulerState>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d001      	beq.n	800c6d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c6ce:	f001 ff51 	bl	800e574 <xPortSysTickHandler>
  }
}
 800c6d2:	bf00      	nop
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	e000e010 	.word	0xe000e010

0800c6dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	f06f 0004 	mvn.w	r0, #4
 800c6e6:	f7ff ffbf 	bl	800c668 <__NVIC_SetPriority>
#endif
}
 800c6ea:	bf00      	nop
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b086      	sub	sp, #24
 800c6f2:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6f8:	f3ef 8305 	mrs	r3, IPSR
 800c6fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6fe:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800c704:	2301      	movs	r3, #1
 800c706:	617b      	str	r3, [r7, #20]
 800c708:	e013      	b.n	800c732 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800c70a:	f001 fb83 	bl	800de14 <xTaskGetSchedulerState>
 800c70e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d00d      	beq.n	800c732 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c716:	f3ef 8310 	mrs	r3, PRIMASK
 800c71a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c71c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d105      	bne.n	800c72e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c722:	f3ef 8311 	mrs	r3, BASEPRI
 800c726:	607b      	str	r3, [r7, #4]
  return(result);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800c72e:	2301      	movs	r3, #1
 800c730:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800c732:	697b      	ldr	r3, [r7, #20]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800c742:	f7ff ffd4 	bl	800c6ee <IRQ_Context>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800c74c:	f06f 0305 	mvn.w	r3, #5
 800c750:	607b      	str	r3, [r7, #4]
 800c752:	e012      	b.n	800c77a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800c754:	f001 fb5e 	bl	800de14 <xTaskGetSchedulerState>
 800c758:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d109      	bne.n	800c774 <osKernelInitialize+0x38>
 800c760:	4b08      	ldr	r3, [pc, #32]	@ (800c784 <osKernelInitialize+0x48>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d105      	bne.n	800c774 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c768:	4b06      	ldr	r3, [pc, #24]	@ (800c784 <osKernelInitialize+0x48>)
 800c76a:	2201      	movs	r2, #1
 800c76c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c76e:	2300      	movs	r3, #0
 800c770:	607b      	str	r3, [r7, #4]
 800c772:	e002      	b.n	800c77a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800c774:	f04f 33ff 	mov.w	r3, #4294967295
 800c778:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800c77a:	687b      	ldr	r3, [r7, #4]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	20000dbc 	.word	0x20000dbc

0800c788 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800c78e:	f7ff ffae 	bl	800c6ee <IRQ_Context>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <osKernelStart+0x18>
    stat = osErrorISR;
 800c798:	f06f 0305 	mvn.w	r3, #5
 800c79c:	607b      	str	r3, [r7, #4]
 800c79e:	e016      	b.n	800c7ce <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800c7a0:	f001 fb38 	bl	800de14 <xTaskGetSchedulerState>
 800c7a4:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d10d      	bne.n	800c7c8 <osKernelStart+0x40>
 800c7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d8 <osKernelStart+0x50>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d109      	bne.n	800c7c8 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c7b4:	f7ff ff92 	bl	800c6dc <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800c7b8:	4b07      	ldr	r3, [pc, #28]	@ (800c7d8 <osKernelStart+0x50>)
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c7be:	f000 fdf7 	bl	800d3b0 <vTaskStartScheduler>
      stat = osOK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	607b      	str	r3, [r7, #4]
 800c7c6:	e002      	b.n	800c7ce <osKernelStart+0x46>
    } else {
      stat = osError;
 800c7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7cc:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800c7ce:	687b      	ldr	r3, [r7, #4]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20000dbc 	.word	0x20000dbc

0800c7dc <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08e      	sub	sp, #56	@ 0x38
 800c7e0:	af04      	add	r7, sp, #16
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800c7ec:	f7ff ff7f 	bl	800c6ee <IRQ_Context>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d17e      	bne.n	800c8f4 <osThreadNew+0x118>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d07b      	beq.n	800c8f4 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800c7fc:	2380      	movs	r3, #128	@ 0x80
 800c7fe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c800:	2318      	movs	r3, #24
 800c802:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c808:	f04f 33ff 	mov.w	r3, #4294967295
 800c80c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d045      	beq.n	800c8a0 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <osThreadNew+0x46>
        name = attr->name;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d008      	beq.n	800c848 <osThreadNew+0x6c>
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	2b38      	cmp	r3, #56	@ 0x38
 800c83a:	d805      	bhi.n	800c848 <osThreadNew+0x6c>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800c848:	2300      	movs	r3, #0
 800c84a:	e054      	b.n	800c8f6 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	695b      	ldr	r3, [r3, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d003      	beq.n	800c85c <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	089b      	lsrs	r3, r3, #2
 800c85a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00e      	beq.n	800c882 <osThreadNew+0xa6>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	2b5b      	cmp	r3, #91	@ 0x5b
 800c86a:	d90a      	bls.n	800c882 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c870:	2b00      	cmp	r3, #0
 800c872:	d006      	beq.n	800c882 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800c87c:	2301      	movs	r3, #1
 800c87e:	61bb      	str	r3, [r7, #24]
 800c880:	e010      	b.n	800c8a4 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10c      	bne.n	800c8a4 <osThreadNew+0xc8>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d108      	bne.n	800c8a4 <osThreadNew+0xc8>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d104      	bne.n	800c8a4 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	61bb      	str	r3, [r7, #24]
 800c89e:	e001      	b.n	800c8a4 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d110      	bne.n	800c8cc <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c8b2:	9202      	str	r2, [sp, #8]
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	6a3a      	ldr	r2, [r7, #32]
 800c8be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f000 fba5 	bl	800d010 <xTaskCreateStatic>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	e013      	b.n	800c8f4 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d110      	bne.n	800c8f4 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	f107 0314 	add.w	r3, r7, #20
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 fbe0 	bl	800d0aa <xTaskCreate>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d001      	beq.n	800c8f4 <osThreadNew+0x118>
            hTask = NULL;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800c8f4:	697b      	ldr	r3, [r7, #20]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3728      	adds	r7, #40	@ 0x28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800c906:	f7ff fef2 	bl	800c6ee <IRQ_Context>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <osDelay+0x1a>
    stat = osErrorISR;
 800c910:	f06f 0305 	mvn.w	r3, #5
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	e007      	b.n	800c928 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <osDelay+0x2a>
      vTaskDelay(ticks);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fd1e 	bl	800d364 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800c928:	68fb      	ldr	r3, [r7, #12]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
	...

0800c934 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4a07      	ldr	r2, [pc, #28]	@ (800c960 <vApplicationGetIdleTaskMemory+0x2c>)
 800c944:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	4a06      	ldr	r2, [pc, #24]	@ (800c964 <vApplicationGetIdleTaskMemory+0x30>)
 800c94a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2280      	movs	r2, #128	@ 0x80
 800c950:	601a      	str	r2, [r3, #0]
}
 800c952:	bf00      	nop
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20000dc0 	.word	0x20000dc0
 800c964:	20000e1c 	.word	0x20000e1c

0800c968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	4a07      	ldr	r2, [pc, #28]	@ (800c994 <vApplicationGetTimerTaskMemory+0x2c>)
 800c978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	4a06      	ldr	r2, [pc, #24]	@ (800c998 <vApplicationGetTimerTaskMemory+0x30>)
 800c97e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2280      	movs	r2, #128	@ 0x80
 800c984:	601a      	str	r2, [r3, #0]
}
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	2000101c 	.word	0x2000101c
 800c998:	20001078 	.word	0x20001078

0800c99c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f103 0208 	add.w	r2, r3, #8
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f103 0208 	add.w	r2, r3, #8
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f103 0208 	add.w	r2, r3, #8
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9ea:	bf00      	nop
 800c9ec:	370c      	adds	r7, #12
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b085      	sub	sp, #20
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0c:	d103      	bne.n	800ca16 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	e00c      	b.n	800ca30 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3308      	adds	r3, #8
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	e002      	b.n	800ca24 <vListInsert+0x2e>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d2f6      	bcs.n	800ca1e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	601a      	str	r2, [r3, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	6892      	ldr	r2, [r2, #8]
 800ca7e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	6852      	ldr	r2, [r2, #4]
 800ca88:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d103      	bne.n	800ca9c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	689a      	ldr	r2, [r3, #8]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	1e5a      	subs	r2, r3, #1
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800cac6:	2301      	movs	r3, #1
 800cac8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d103      	bne.n	800cadc <xQueueGenericReset+0x20>
 800cad4:	f001 fe60 	bl	800e798 <ulSetInterruptMask>
 800cad8:	bf00      	nop
 800cada:	e7fd      	b.n	800cad8 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d057      	beq.n	800cb92 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d053      	beq.n	800cb92 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caf2:	2100      	movs	r1, #0
 800caf4:	fba3 2302 	umull	r2, r3, r3, r2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d000      	beq.n	800cafe <xQueueGenericReset+0x42>
 800cafc:	2101      	movs	r1, #1
 800cafe:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d146      	bne.n	800cb92 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800cb04:	f001 fd0a 	bl	800e51c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb10:	68b9      	ldr	r1, [r7, #8]
 800cb12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cb14:	fb01 f303 	mul.w	r3, r1, r3
 800cb18:	441a      	add	r2, r3
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2200      	movs	r2, #0
 800cb22:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb34:	3b01      	subs	r3, #1
 800cb36:	68b9      	ldr	r1, [r7, #8]
 800cb38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cb3a:	fb01 f303 	mul.w	r3, r1, r3
 800cb3e:	441a      	add	r2, r3
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	22ff      	movs	r2, #255	@ 0xff
 800cb48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	22ff      	movs	r2, #255	@ 0xff
 800cb50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10e      	bne.n	800cb78 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d014      	beq.n	800cb8c <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	3310      	adds	r3, #16
 800cb66:	4618      	mov	r0, r3
 800cb68:	f000 ff4a 	bl	800da00 <xTaskRemoveFromEventList>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00c      	beq.n	800cb8c <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cb72:	f001 fcc1 	bl	800e4f8 <vPortYield>
 800cb76:	e009      	b.n	800cb8c <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	3310      	adds	r3, #16
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7ff ff0d 	bl	800c99c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	3324      	adds	r3, #36	@ 0x24
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff ff08 	bl	800c99c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800cb8c:	f001 fcd8 	bl	800e540 <vPortExitCritical>
 800cb90:	e001      	b.n	800cb96 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d103      	bne.n	800cba4 <xQueueGenericReset+0xe8>
 800cb9c:	f001 fdfc 	bl	800e798 <ulSetInterruptMask>
 800cba0:	bf00      	nop
 800cba2:	e7fd      	b.n	800cba0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800cba4:	68fb      	ldr	r3, [r7, #12]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b088      	sub	sp, #32
 800cbb2:	af02      	add	r7, sp, #8
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	607a      	str	r2, [r7, #4]
 800cbba:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d103      	bne.n	800cbce <xQueueGenericCreateStatic+0x20>
 800cbc6:	f001 fde7 	bl	800e798 <ulSetInterruptMask>
 800cbca:	bf00      	nop
 800cbcc:	e7fd      	b.n	800cbca <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d029      	beq.n	800cc28 <xQueueGenericCreateStatic+0x7a>
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d026      	beq.n	800cc28 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d002      	beq.n	800cbe6 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d020      	beq.n	800cc28 <xQueueGenericCreateStatic+0x7a>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d102      	bne.n	800cbf2 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d11a      	bne.n	800cc28 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800cbf2:	2350      	movs	r3, #80	@ 0x50
 800cbf4:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	2b50      	cmp	r3, #80	@ 0x50
 800cbfa:	d003      	beq.n	800cc04 <xQueueGenericCreateStatic+0x56>
 800cbfc:	f001 fdcc 	bl	800e798 <ulSetInterruptMask>
 800cc00:	bf00      	nop
 800cc02:	e7fd      	b.n	800cc00 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800cc04:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc12:	f897 2020 	ldrb.w	r2, [r7, #32]
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	68b9      	ldr	r1, [r7, #8]
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f000 f80d 	bl	800cc40 <prvInitialiseNewQueue>
 800cc26:	e006      	b.n	800cc36 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d103      	bne.n	800cc36 <xQueueGenericCreateStatic+0x88>
 800cc2e:	f001 fdb3 	bl	800e798 <ulSetInterruptMask>
 800cc32:	bf00      	nop
 800cc34:	e7fd      	b.n	800cc32 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800cc36:	697b      	ldr	r3, [r7, #20]
    }
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3718      	adds	r7, #24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d103      	bne.n	800cc5c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	e002      	b.n	800cc62 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc6e:	2101      	movs	r1, #1
 800cc70:	69b8      	ldr	r0, [r7, #24]
 800cc72:	f7ff ff23 	bl	800cabc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	78fa      	ldrb	r2, [r7, #3]
 800cc7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800cc7e:	bf00      	nop
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b08a      	sub	sp, #40	@ 0x28
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	60b9      	str	r1, [r7, #8]
 800cc90:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800cc92:	2300      	movs	r3, #0
 800cc94:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d103      	bne.n	800cca8 <xQueueReceive+0x22>
 800cca0:	f001 fd7a 	bl	800e798 <ulSetInterruptMask>
 800cca4:	bf00      	nop
 800cca6:	e7fd      	b.n	800cca4 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <xQueueReceive+0x30>
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <xQueueReceive+0x34>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <xQueueReceive+0x36>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d103      	bne.n	800ccc8 <xQueueReceive+0x42>
 800ccc0:	f001 fd6a 	bl	800e798 <ulSetInterruptMask>
 800ccc4:	bf00      	nop
 800ccc6:	e7fd      	b.n	800ccc4 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccc8:	f001 f8a4 	bl	800de14 <xTaskGetSchedulerState>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d102      	bne.n	800ccd8 <xQueueReceive+0x52>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <xQueueReceive+0x56>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e000      	b.n	800ccde <xQueueReceive+0x58>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d103      	bne.n	800ccea <xQueueReceive+0x64>
 800cce2:	f001 fd59 	bl	800e798 <ulSetInterruptMask>
 800cce6:	bf00      	nop
 800cce8:	e7fd      	b.n	800cce6 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ccea:	f001 fc17 	bl	800e51c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccf2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d019      	beq.n	800cd2e <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ccfa:	68b9      	ldr	r1, [r7, #8]
 800ccfc:	6a38      	ldr	r0, [r7, #32]
 800ccfe:	f000 f87e 	bl	800cdfe <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	1e5a      	subs	r2, r3, #1
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	691b      	ldr	r3, [r3, #16]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d009      	beq.n	800cd26 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	3310      	adds	r3, #16
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 fe72 	bl	800da00 <xTaskRemoveFromEventList>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cd22:	f001 fbe9 	bl	800e4f8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800cd26:	f001 fc0b 	bl	800e540 <vPortExitCritical>
                return pdPASS;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e063      	b.n	800cdf6 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d103      	bne.n	800cd3c <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800cd34:	f001 fc04 	bl	800e540 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	e05c      	b.n	800cdf6 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d106      	bne.n	800cd50 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800cd42:	f107 0314 	add.w	r3, r7, #20
 800cd46:	4618      	mov	r0, r3
 800cd48:	f000 ff28 	bl	800db9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800cd50:	f001 fbf6 	bl	800e540 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800cd54:	f000 fb88 	bl	800d468 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800cd58:	f001 fbe0 	bl	800e51c <vPortEnterCritical>
 800cd5c:	6a3b      	ldr	r3, [r7, #32]
 800cd5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd62:	b25b      	sxtb	r3, r3
 800cd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd68:	d103      	bne.n	800cd72 <xQueueReceive+0xec>
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd78:	b25b      	sxtb	r3, r3
 800cd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7e:	d103      	bne.n	800cd88 <xQueueReceive+0x102>
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd88:	f001 fbda 	bl	800e540 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd8c:	1d3a      	adds	r2, r7, #4
 800cd8e:	f107 0314 	add.w	r3, r7, #20
 800cd92:	4611      	mov	r1, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f000 ff17 	bl	800dbc8 <xTaskCheckForTimeOut>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d11d      	bne.n	800cddc <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cda0:	6a38      	ldr	r0, [r7, #32]
 800cda2:	f000 f8a4 	bl	800ceee <prvIsQueueEmpty>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d011      	beq.n	800cdd0 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cdac:	6a3b      	ldr	r3, [r7, #32]
 800cdae:	3324      	adds	r3, #36	@ 0x24
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f000 fdc7 	bl	800d948 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800cdba:	6a38      	ldr	r0, [r7, #32]
 800cdbc:	f000 f845 	bl	800ce4a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800cdc0:	f000 fb60 	bl	800d484 <xTaskResumeAll>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d18f      	bne.n	800ccea <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800cdca:	f001 fb95 	bl	800e4f8 <vPortYield>
 800cdce:	e78c      	b.n	800ccea <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800cdd0:	6a38      	ldr	r0, [r7, #32]
 800cdd2:	f000 f83a 	bl	800ce4a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800cdd6:	f000 fb55 	bl	800d484 <xTaskResumeAll>
 800cdda:	e786      	b.n	800ccea <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800cddc:	6a38      	ldr	r0, [r7, #32]
 800cdde:	f000 f834 	bl	800ce4a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800cde2:	f000 fb4f 	bl	800d484 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cde6:	6a38      	ldr	r0, [r7, #32]
 800cde8:	f000 f881 	bl	800ceee <prvIsQueueEmpty>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f43f af7b 	beq.w	800ccea <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800cdf4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3728      	adds	r7, #40	@ 0x28
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d018      	beq.n	800ce42 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	68da      	ldr	r2, [r3, #12]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce18:	441a      	add	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d303      	bcc.n	800ce32 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68d9      	ldr	r1, [r3, #12]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	6838      	ldr	r0, [r7, #0]
 800ce3e:	f001 fd99 	bl	800e974 <memcpy>
    }
}
 800ce42:	bf00      	nop
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800ce52:	f001 fb63 	bl	800e51c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce5c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce5e:	e011      	b.n	800ce84 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d012      	beq.n	800ce8e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3324      	adds	r3, #36	@ 0x24
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 fdc7 	bl	800da00 <xTaskRemoveFromEventList>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800ce78:	f000 fefe 	bl	800dc78 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dce9      	bgt.n	800ce60 <prvUnlockQueue+0x16>
 800ce8c:	e000      	b.n	800ce90 <prvUnlockQueue+0x46>
                    break;
 800ce8e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	22ff      	movs	r2, #255	@ 0xff
 800ce94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800ce98:	f001 fb52 	bl	800e540 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800ce9c:	f001 fb3e 	bl	800e51c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cea6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cea8:	e011      	b.n	800cece <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d012      	beq.n	800ced8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	3310      	adds	r3, #16
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 fda2 	bl	800da00 <xTaskRemoveFromEventList>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cec2:	f000 fed9 	bl	800dc78 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dce9      	bgt.n	800ceaa <prvUnlockQueue+0x60>
 800ced6:	e000      	b.n	800ceda <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800ced8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	22ff      	movs	r2, #255	@ 0xff
 800cede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800cee2:	f001 fb2d 	bl	800e540 <vPortExitCritical>
}
 800cee6:	bf00      	nop
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cef6:	f001 fb11 	bl	800e51c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d102      	bne.n	800cf08 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cf02:	2301      	movs	r3, #1
 800cf04:	60fb      	str	r3, [r7, #12]
 800cf06:	e001      	b.n	800cf0c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cf0c:	f001 fb18 	bl	800e540 <vPortExitCritical>

    return xReturn;
 800cf10:	68fb      	ldr	r3, [r7, #12]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d103      	bne.n	800cf38 <vQueueAddToRegistry+0x1c>
 800cf30:	f001 fc32 	bl	800e798 <ulSetInterruptMask>
 800cf34:	bf00      	nop
 800cf36:	e7fd      	b.n	800cf34 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d024      	beq.n	800cf88 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf3e:	2300      	movs	r3, #0
 800cf40:	60fb      	str	r3, [r7, #12]
 800cf42:	e01e      	b.n	800cf82 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800cf44:	4a17      	ldr	r2, [pc, #92]	@ (800cfa4 <vQueueAddToRegistry+0x88>)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	4413      	add	r3, r2
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d105      	bne.n	800cf60 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	4a12      	ldr	r2, [pc, #72]	@ (800cfa4 <vQueueAddToRegistry+0x88>)
 800cf5a:	4413      	add	r3, r2
 800cf5c:	60bb      	str	r3, [r7, #8]
                    break;
 800cf5e:	e013      	b.n	800cf88 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10a      	bne.n	800cf7c <vQueueAddToRegistry+0x60>
 800cf66:	4a0f      	ldr	r2, [pc, #60]	@ (800cfa4 <vQueueAddToRegistry+0x88>)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d104      	bne.n	800cf7c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	4a0b      	ldr	r2, [pc, #44]	@ (800cfa4 <vQueueAddToRegistry+0x88>)
 800cf78:	4413      	add	r3, r2
 800cf7a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	60fb      	str	r3, [r7, #12]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b07      	cmp	r3, #7
 800cf86:	d9dd      	bls.n	800cf44 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d005      	beq.n	800cf9a <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800cf9a:	bf00      	nop
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	20001278 	.word	0x20001278

0800cfa8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800cfb8:	f001 fab0 	bl	800e51c <vPortEnterCritical>
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cfc2:	b25b      	sxtb	r3, r3
 800cfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc8:	d103      	bne.n	800cfd2 <vQueueWaitForMessageRestricted+0x2a>
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfd8:	b25b      	sxtb	r3, r3
 800cfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfde:	d103      	bne.n	800cfe8 <vQueueWaitForMessageRestricted+0x40>
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfe8:	f001 faaa 	bl	800e540 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d106      	bne.n	800d002 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	3324      	adds	r3, #36	@ 0x24
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f000 fcc1 	bl	800d984 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d002:	6978      	ldr	r0, [r7, #20]
 800d004:	f7ff ff21 	bl	800ce4a <prvUnlockQueue>
    }
 800d008:	bf00      	nop
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d010:	b580      	push	{r7, lr}
 800d012:	b08c      	sub	sp, #48	@ 0x30
 800d014:	af04      	add	r7, sp, #16
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d020:	2b00      	cmp	r3, #0
 800d022:	d103      	bne.n	800d02c <xTaskCreateStatic+0x1c>
 800d024:	f001 fbb8 	bl	800e798 <ulSetInterruptMask>
 800d028:	bf00      	nop
 800d02a:	e7fd      	b.n	800d028 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d103      	bne.n	800d03a <xTaskCreateStatic+0x2a>
 800d032:	f001 fbb1 	bl	800e798 <ulSetInterruptMask>
 800d036:	bf00      	nop
 800d038:	e7fd      	b.n	800d036 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d03a:	235c      	movs	r3, #92	@ 0x5c
 800d03c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	2b5c      	cmp	r3, #92	@ 0x5c
 800d042:	d003      	beq.n	800d04c <xTaskCreateStatic+0x3c>
 800d044:	f001 fba8 	bl	800e798 <ulSetInterruptMask>
 800d048:	bf00      	nop
 800d04a:	e7fd      	b.n	800d048 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d04c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d050:	2b00      	cmp	r3, #0
 800d052:	d023      	beq.n	800d09c <xTaskCreateStatic+0x8c>
 800d054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d056:	2b00      	cmp	r3, #0
 800d058:	d020      	beq.n	800d09c <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05c:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d05e:	225c      	movs	r2, #92	@ 0x5c
 800d060:	2100      	movs	r1, #0
 800d062:	69f8      	ldr	r0, [r7, #28]
 800d064:	f001 fc59 	bl	800e91a <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d06c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	2202      	movs	r2, #2
 800d072:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d076:	2300      	movs	r3, #0
 800d078:	9303      	str	r3, [sp, #12]
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	9302      	str	r3, [sp, #8]
 800d07e:	f107 0318 	add.w	r3, r7, #24
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	68b9      	ldr	r1, [r7, #8]
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f000 f855 	bl	800d13e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d094:	69f8      	ldr	r0, [r7, #28]
 800d096:	f000 f8d5 	bl	800d244 <prvAddNewTaskToReadyList>
 800d09a:	e001      	b.n	800d0a0 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d0a0:	69bb      	ldr	r3, [r7, #24]
    }
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3720      	adds	r7, #32
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b08c      	sub	sp, #48	@ 0x30
 800d0ae:	af04      	add	r7, sp, #16
 800d0b0:	60f8      	str	r0, [r7, #12]
 800d0b2:	60b9      	str	r1, [r7, #8]
 800d0b4:	603b      	str	r3, [r7, #0]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d0ba:	88fb      	ldrh	r3, [r7, #6]
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f001 fbca 	bl	800e858 <pvPortMalloc>
 800d0c4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d013      	beq.n	800d0f4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0cc:	205c      	movs	r0, #92	@ 0x5c
 800d0ce:	f001 fbc3 	bl	800e858 <pvPortMalloc>
 800d0d2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d008      	beq.n	800d0ec <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d0da:	225c      	movs	r2, #92	@ 0x5c
 800d0dc:	2100      	movs	r1, #0
 800d0de:	69f8      	ldr	r0, [r7, #28]
 800d0e0:	f001 fc1b 	bl	800e91a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d0ea:	e005      	b.n	800d0f8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d0ec:	6978      	ldr	r0, [r7, #20]
 800d0ee:	f001 fc05 	bl	800e8fc <vPortFree>
 800d0f2:	e001      	b.n	800d0f8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d017      	beq.n	800d12e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d106:	88fa      	ldrh	r2, [r7, #6]
 800d108:	2300      	movs	r3, #0
 800d10a:	9303      	str	r3, [sp, #12]
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	9302      	str	r3, [sp, #8]
 800d110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d112:	9301      	str	r3, [sp, #4]
 800d114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	68b9      	ldr	r1, [r7, #8]
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f000 f80e 	bl	800d13e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d122:	69f8      	ldr	r0, [r7, #28]
 800d124:	f000 f88e 	bl	800d244 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d128:	2301      	movs	r3, #1
 800d12a:	61bb      	str	r3, [r7, #24]
 800d12c:	e002      	b.n	800d134 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d12e:	f04f 33ff 	mov.w	r3, #4294967295
 800d132:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d134:	69bb      	ldr	r3, [r7, #24]
    }
 800d136:	4618      	mov	r0, r3
 800d138:	3720      	adds	r7, #32
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b086      	sub	sp, #24
 800d142:	af00      	add	r7, sp, #0
 800d144:	60f8      	str	r0, [r7, #12]
 800d146:	60b9      	str	r1, [r7, #8]
 800d148:	607a      	str	r2, [r7, #4]
 800d14a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	461a      	mov	r2, r3
 800d156:	21a5      	movs	r1, #165	@ 0xa5
 800d158:	f001 fbdf 	bl	800e91a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d166:	3b01      	subs	r3, #1
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	4413      	add	r3, r2
 800d16c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	f023 0307 	bic.w	r3, r3, #7
 800d174:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	f003 0307 	and.w	r3, r3, #7
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d003      	beq.n	800d188 <prvInitialiseNewTask+0x4a>
 800d180:	f001 fb0a 	bl	800e798 <ulSetInterruptMask>
 800d184:	bf00      	nop
 800d186:	e7fd      	b.n	800d184 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d01e      	beq.n	800d1cc <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d18e:	2300      	movs	r3, #0
 800d190:	617b      	str	r3, [r7, #20]
 800d192:	e012      	b.n	800d1ba <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	4413      	add	r3, r2
 800d19a:	7819      	ldrb	r1, [r3, #0]
 800d19c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3334      	adds	r3, #52	@ 0x34
 800d1a4:	460a      	mov	r2, r1
 800d1a6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	617b      	str	r3, [r7, #20]
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	2b0f      	cmp	r3, #15
 800d1be:	d9e9      	bls.n	800d194 <prvInitialiseNewTask+0x56>
 800d1c0:	e000      	b.n	800d1c4 <prvInitialiseNewTask+0x86>
            {
                break;
 800d1c2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	2b37      	cmp	r3, #55	@ 0x37
 800d1d0:	d903      	bls.n	800d1da <prvInitialiseNewTask+0x9c>
 800d1d2:	f001 fae1 	bl	800e798 <ulSetInterruptMask>
 800d1d6:	bf00      	nop
 800d1d8:	e7fd      	b.n	800d1d6 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	2b37      	cmp	r3, #55	@ 0x37
 800d1de:	d901      	bls.n	800d1e4 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1e0:	2337      	movs	r3, #55	@ 0x37
 800d1e2:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e6:	6a3a      	ldr	r2, [r7, #32]
 800d1e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ec:	6a3a      	ldr	r2, [r7, #32]
 800d1ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7ff fbf1 	bl	800c9dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fc:	3318      	adds	r3, #24
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7ff fbec 	bl	800c9dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d208:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d212:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d218:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d21c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	6938      	ldr	r0, [r7, #16]
 800d224:	f001 f9d8 	bl	800e5d8 <pxPortInitialiseStack>
 800d228:	4602      	mov	r2, r0
 800d22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d22c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d238:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d23a:	bf00      	nop
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
	...

0800d244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d24c:	f001 f966 	bl	800e51c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d250:	4b3e      	ldr	r3, [pc, #248]	@ (800d34c <prvAddNewTaskToReadyList+0x108>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	4a3d      	ldr	r2, [pc, #244]	@ (800d34c <prvAddNewTaskToReadyList+0x108>)
 800d258:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d25a:	4b3d      	ldr	r3, [pc, #244]	@ (800d350 <prvAddNewTaskToReadyList+0x10c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d109      	bne.n	800d276 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d262:	4a3b      	ldr	r2, [pc, #236]	@ (800d350 <prvAddNewTaskToReadyList+0x10c>)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d268:	4b38      	ldr	r3, [pc, #224]	@ (800d34c <prvAddNewTaskToReadyList+0x108>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d110      	bne.n	800d292 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d270:	f000 fd1e 	bl	800dcb0 <prvInitialiseTaskLists>
 800d274:	e00d      	b.n	800d292 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d276:	4b37      	ldr	r3, [pc, #220]	@ (800d354 <prvAddNewTaskToReadyList+0x110>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d109      	bne.n	800d292 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d27e:	4b34      	ldr	r3, [pc, #208]	@ (800d350 <prvAddNewTaskToReadyList+0x10c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d288:	429a      	cmp	r2, r3
 800d28a:	d802      	bhi.n	800d292 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d28c:	4a30      	ldr	r2, [pc, #192]	@ (800d350 <prvAddNewTaskToReadyList+0x10c>)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d292:	4b31      	ldr	r3, [pc, #196]	@ (800d358 <prvAddNewTaskToReadyList+0x114>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	3301      	adds	r3, #1
 800d298:	4a2f      	ldr	r2, [pc, #188]	@ (800d358 <prvAddNewTaskToReadyList+0x114>)
 800d29a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d29c:	4b2e      	ldr	r3, [pc, #184]	@ (800d358 <prvAddNewTaskToReadyList+0x114>)
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2a8:	4b2c      	ldr	r3, [pc, #176]	@ (800d35c <prvAddNewTaskToReadyList+0x118>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d903      	bls.n	800d2b8 <prvAddNewTaskToReadyList+0x74>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b4:	4a29      	ldr	r2, [pc, #164]	@ (800d35c <prvAddNewTaskToReadyList+0x118>)
 800d2b6:	6013      	str	r3, [r2, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2bc:	4928      	ldr	r1, [pc, #160]	@ (800d360 <prvAddNewTaskToReadyList+0x11c>)
 800d2be:	4613      	mov	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	440b      	add	r3, r1
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	609a      	str	r2, [r3, #8]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	689a      	ldr	r2, [r3, #8]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	60da      	str	r2, [r3, #12]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	3204      	adds	r2, #4
 800d2e4:	605a      	str	r2, [r3, #4]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	1d1a      	adds	r2, r3, #4
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	609a      	str	r2, [r3, #8]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4413      	add	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	4a19      	ldr	r2, [pc, #100]	@ (800d360 <prvAddNewTaskToReadyList+0x11c>)
 800d2fc:	441a      	add	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	615a      	str	r2, [r3, #20]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d306:	4916      	ldr	r1, [pc, #88]	@ (800d360 <prvAddNewTaskToReadyList+0x11c>)
 800d308:	4613      	mov	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4413      	add	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	440b      	add	r3, r1
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	1c59      	adds	r1, r3, #1
 800d316:	4812      	ldr	r0, [pc, #72]	@ (800d360 <prvAddNewTaskToReadyList+0x11c>)
 800d318:	4613      	mov	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4403      	add	r3, r0
 800d322:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d324:	f001 f90c 	bl	800e540 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d328:	4b0a      	ldr	r3, [pc, #40]	@ (800d354 <prvAddNewTaskToReadyList+0x110>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d008      	beq.n	800d342 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d330:	4b07      	ldr	r3, [pc, #28]	@ (800d350 <prvAddNewTaskToReadyList+0x10c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d201      	bcs.n	800d342 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d33e:	f001 f8db 	bl	800e4f8 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d342:	bf00      	nop
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	2000178c 	.word	0x2000178c
 800d350:	200012b8 	.word	0x200012b8
 800d354:	20001798 	.word	0x20001798
 800d358:	200017a8 	.word	0x200017a8
 800d35c:	20001794 	.word	0x20001794
 800d360:	200012bc 	.word	0x200012bc

0800d364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d36c:	2300      	movs	r3, #0
 800d36e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d010      	beq.n	800d398 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800d376:	4b0d      	ldr	r3, [pc, #52]	@ (800d3ac <vTaskDelay+0x48>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <vTaskDelay+0x22>
 800d37e:	f001 fa0b 	bl	800e798 <ulSetInterruptMask>
 800d382:	bf00      	nop
 800d384:	e7fd      	b.n	800d382 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d386:	f000 f86f 	bl	800d468 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d38a:	2100      	movs	r1, #0
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fd5f 	bl	800de50 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d392:	f000 f877 	bl	800d484 <xTaskResumeAll>
 800d396:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800d39e:	f001 f8ab 	bl	800e4f8 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d3a2:	bf00      	nop
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	200017b4 	.word	0x200017b4

0800d3b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b088      	sub	sp, #32
 800d3b4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3be:	463a      	mov	r2, r7
 800d3c0:	1d39      	adds	r1, r7, #4
 800d3c2:	f107 0308 	add.w	r3, r7, #8
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff fab4 	bl	800c934 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	9202      	str	r2, [sp, #8]
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	2300      	movs	r3, #0
 800d3dc:	460a      	mov	r2, r1
 800d3de:	491b      	ldr	r1, [pc, #108]	@ (800d44c <vTaskStartScheduler+0x9c>)
 800d3e0:	481b      	ldr	r0, [pc, #108]	@ (800d450 <vTaskStartScheduler+0xa0>)
 800d3e2:	f7ff fe15 	bl	800d010 <xTaskCreateStatic>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	4a1a      	ldr	r2, [pc, #104]	@ (800d454 <vTaskStartScheduler+0xa4>)
 800d3ea:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d3ec:	4b19      	ldr	r3, [pc, #100]	@ (800d454 <vTaskStartScheduler+0xa4>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	60fb      	str	r3, [r7, #12]
 800d3f8:	e001      	b.n	800d3fe <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d102      	bne.n	800d40a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d404:	f000 fd92 	bl	800df2c <xTimerCreateTimerTask>
 800d408:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d10e      	bne.n	800d42e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d410:	f001 f9c2 	bl	800e798 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d414:	4b10      	ldr	r3, [pc, #64]	@ (800d458 <vTaskStartScheduler+0xa8>)
 800d416:	f04f 32ff 	mov.w	r2, #4294967295
 800d41a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d41c:	4b0f      	ldr	r3, [pc, #60]	@ (800d45c <vTaskStartScheduler+0xac>)
 800d41e:	2201      	movs	r2, #1
 800d420:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d422:	4b0f      	ldr	r3, [pc, #60]	@ (800d460 <vTaskStartScheduler+0xb0>)
 800d424:	2200      	movs	r2, #0
 800d426:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d428:	f001 f960 	bl	800e6ec <xPortStartScheduler>
 800d42c:	e007      	b.n	800d43e <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d434:	d103      	bne.n	800d43e <vTaskStartScheduler+0x8e>
 800d436:	f001 f9af 	bl	800e798 <ulSetInterruptMask>
 800d43a:	bf00      	nop
 800d43c:	e7fd      	b.n	800d43a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d43e:	4b09      	ldr	r3, [pc, #36]	@ (800d464 <vTaskStartScheduler+0xb4>)
 800d440:	681b      	ldr	r3, [r3, #0]
}
 800d442:	bf00      	nop
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	0800e9e8 	.word	0x0800e9e8
 800d450:	0800dc91 	.word	0x0800dc91
 800d454:	200017b0 	.word	0x200017b0
 800d458:	200017ac 	.word	0x200017ac
 800d45c:	20001798 	.word	0x20001798
 800d460:	20001790 	.word	0x20001790
 800d464:	2000000c 	.word	0x2000000c

0800d468 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d468:	b480      	push	{r7}
 800d46a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d46c:	4b04      	ldr	r3, [pc, #16]	@ (800d480 <vTaskSuspendAll+0x18>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3301      	adds	r3, #1
 800d472:	4a03      	ldr	r2, [pc, #12]	@ (800d480 <vTaskSuspendAll+0x18>)
 800d474:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d476:	bf00      	nop
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	200017b4 	.word	0x200017b4

0800d484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d48e:	2300      	movs	r3, #0
 800d490:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d492:	4b6b      	ldr	r3, [pc, #428]	@ (800d640 <xTaskResumeAll+0x1bc>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d103      	bne.n	800d4a2 <xTaskResumeAll+0x1e>
 800d49a:	f001 f97d 	bl	800e798 <ulSetInterruptMask>
 800d49e:	bf00      	nop
 800d4a0:	e7fd      	b.n	800d49e <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d4a2:	f001 f83b 	bl	800e51c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d4a6:	4b66      	ldr	r3, [pc, #408]	@ (800d640 <xTaskResumeAll+0x1bc>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	4a64      	ldr	r2, [pc, #400]	@ (800d640 <xTaskResumeAll+0x1bc>)
 800d4ae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b0:	4b63      	ldr	r3, [pc, #396]	@ (800d640 <xTaskResumeAll+0x1bc>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f040 80bb 	bne.w	800d630 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d4ba:	4b62      	ldr	r3, [pc, #392]	@ (800d644 <xTaskResumeAll+0x1c0>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f000 80b6 	beq.w	800d630 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4c4:	e08b      	b.n	800d5de <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c6:	4b60      	ldr	r3, [pc, #384]	@ (800d648 <xTaskResumeAll+0x1c4>)
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4d2:	60bb      	str	r3, [r7, #8]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	6a12      	ldr	r2, [r2, #32]
 800d4dc:	609a      	str	r2, [r3, #8]
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	6a1b      	ldr	r3, [r3, #32]
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	69d2      	ldr	r2, [r2, #28]
 800d4e6:	605a      	str	r2, [r3, #4]
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	3318      	adds	r3, #24
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d103      	bne.n	800d4fc <xTaskResumeAll+0x78>
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	6a1a      	ldr	r2, [r3, #32]
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	605a      	str	r2, [r3, #4]
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2200      	movs	r2, #0
 800d500:	629a      	str	r2, [r3, #40]	@ 0x28
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	1e5a      	subs	r2, r3, #1
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	607b      	str	r3, [r7, #4]
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	697a      	ldr	r2, [r7, #20]
 800d518:	68d2      	ldr	r2, [r2, #12]
 800d51a:	609a      	str	r2, [r3, #8]
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	6892      	ldr	r2, [r2, #8]
 800d524:	605a      	str	r2, [r3, #4]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	3304      	adds	r3, #4
 800d52e:	429a      	cmp	r2, r3
 800d530:	d103      	bne.n	800d53a <xTaskResumeAll+0xb6>
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	68da      	ldr	r2, [r3, #12]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	605a      	str	r2, [r3, #4]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2200      	movs	r2, #0
 800d53e:	615a      	str	r2, [r3, #20]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	1e5a      	subs	r2, r3, #1
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54e:	4b3f      	ldr	r3, [pc, #252]	@ (800d64c <xTaskResumeAll+0x1c8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	429a      	cmp	r2, r3
 800d554:	d903      	bls.n	800d55e <xTaskResumeAll+0xda>
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55a:	4a3c      	ldr	r2, [pc, #240]	@ (800d64c <xTaskResumeAll+0x1c8>)
 800d55c:	6013      	str	r3, [r2, #0]
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d562:	493b      	ldr	r1, [pc, #236]	@ (800d650 <xTaskResumeAll+0x1cc>)
 800d564:	4613      	mov	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	440b      	add	r3, r1
 800d56e:	3304      	adds	r3, #4
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	603b      	str	r3, [r7, #0]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	609a      	str	r2, [r3, #8]
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	689a      	ldr	r2, [r3, #8]
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	60da      	str	r2, [r3, #12]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	3204      	adds	r2, #4
 800d58a:	605a      	str	r2, [r3, #4]
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	1d1a      	adds	r2, r3, #4
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	609a      	str	r2, [r3, #8]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d598:	4613      	mov	r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4a2b      	ldr	r2, [pc, #172]	@ (800d650 <xTaskResumeAll+0x1cc>)
 800d5a2:	441a      	add	r2, r3
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	615a      	str	r2, [r3, #20]
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ac:	4928      	ldr	r1, [pc, #160]	@ (800d650 <xTaskResumeAll+0x1cc>)
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	4413      	add	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	440b      	add	r3, r1
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	1c59      	adds	r1, r3, #1
 800d5bc:	4824      	ldr	r0, [pc, #144]	@ (800d650 <xTaskResumeAll+0x1cc>)
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4403      	add	r3, r0
 800d5c8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ce:	4b21      	ldr	r3, [pc, #132]	@ (800d654 <xTaskResumeAll+0x1d0>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d302      	bcc.n	800d5de <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800d5d8:	4b1f      	ldr	r3, [pc, #124]	@ (800d658 <xTaskResumeAll+0x1d4>)
 800d5da:	2201      	movs	r2, #1
 800d5dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5de:	4b1a      	ldr	r3, [pc, #104]	@ (800d648 <xTaskResumeAll+0x1c4>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f47f af6f 	bne.w	800d4c6 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d5ee:	f000 fbf5 	bl	800dddc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d5f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d65c <xTaskResumeAll+0x1d8>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d010      	beq.n	800d620 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d5fe:	f000 f83f 	bl	800d680 <xTaskIncrementTick>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800d608:	4b13      	ldr	r3, [pc, #76]	@ (800d658 <xTaskResumeAll+0x1d4>)
 800d60a:	2201      	movs	r2, #1
 800d60c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3b01      	subs	r3, #1
 800d612:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1f1      	bne.n	800d5fe <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800d61a:	4b10      	ldr	r3, [pc, #64]	@ (800d65c <xTaskResumeAll+0x1d8>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d620:	4b0d      	ldr	r3, [pc, #52]	@ (800d658 <xTaskResumeAll+0x1d4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d628:	2301      	movs	r3, #1
 800d62a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d62c:	f000 ff64 	bl	800e4f8 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d630:	f000 ff86 	bl	800e540 <vPortExitCritical>

    return xAlreadyYielded;
 800d634:	693b      	ldr	r3, [r7, #16]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200017b4 	.word	0x200017b4
 800d644:	2000178c 	.word	0x2000178c
 800d648:	2000174c 	.word	0x2000174c
 800d64c:	20001794 	.word	0x20001794
 800d650:	200012bc 	.word	0x200012bc
 800d654:	200012b8 	.word	0x200012b8
 800d658:	200017a0 	.word	0x200017a0
 800d65c:	2000179c 	.word	0x2000179c

0800d660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d666:	4b05      	ldr	r3, [pc, #20]	@ (800d67c <xTaskGetTickCount+0x1c>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d66c:	687b      	ldr	r3, [r7, #4]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	20001790 	.word	0x20001790

0800d680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d686:	2300      	movs	r3, #0
 800d688:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d68a:	4b7a      	ldr	r3, [pc, #488]	@ (800d874 <xTaskIncrementTick+0x1f4>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f040 80e6 	bne.w	800d860 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d694:	4b78      	ldr	r3, [pc, #480]	@ (800d878 <xTaskIncrementTick+0x1f8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d69c:	4a76      	ldr	r2, [pc, #472]	@ (800d878 <xTaskIncrementTick+0x1f8>)
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d119      	bne.n	800d6dc <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d6a8:	4b74      	ldr	r3, [pc, #464]	@ (800d87c <xTaskIncrementTick+0x1fc>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d003      	beq.n	800d6ba <xTaskIncrementTick+0x3a>
 800d6b2:	f001 f871 	bl	800e798 <ulSetInterruptMask>
 800d6b6:	bf00      	nop
 800d6b8:	e7fd      	b.n	800d6b6 <xTaskIncrementTick+0x36>
 800d6ba:	4b70      	ldr	r3, [pc, #448]	@ (800d87c <xTaskIncrementTick+0x1fc>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	617b      	str	r3, [r7, #20]
 800d6c0:	4b6f      	ldr	r3, [pc, #444]	@ (800d880 <xTaskIncrementTick+0x200>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a6d      	ldr	r2, [pc, #436]	@ (800d87c <xTaskIncrementTick+0x1fc>)
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	4a6d      	ldr	r2, [pc, #436]	@ (800d880 <xTaskIncrementTick+0x200>)
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	4b6d      	ldr	r3, [pc, #436]	@ (800d884 <xTaskIncrementTick+0x204>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	4a6b      	ldr	r2, [pc, #428]	@ (800d884 <xTaskIncrementTick+0x204>)
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	f000 fb80 	bl	800dddc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d6dc:	4b6a      	ldr	r3, [pc, #424]	@ (800d888 <xTaskIncrementTick+0x208>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	69ba      	ldr	r2, [r7, #24]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	f0c0 80a7 	bcc.w	800d836 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6e8:	4b64      	ldr	r3, [pc, #400]	@ (800d87c <xTaskIncrementTick+0x1fc>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d104      	bne.n	800d6fc <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6f2:	4b65      	ldr	r3, [pc, #404]	@ (800d888 <xTaskIncrementTick+0x208>)
 800d6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f8:	601a      	str	r2, [r3, #0]
                    break;
 800d6fa:	e09c      	b.n	800d836 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6fc:	4b5f      	ldr	r3, [pc, #380]	@ (800d87c <xTaskIncrementTick+0x1fc>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d70c:	69ba      	ldr	r2, [r7, #24]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	429a      	cmp	r2, r3
 800d712:	d203      	bcs.n	800d71c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d714:	4a5c      	ldr	r2, [pc, #368]	@ (800d888 <xTaskIncrementTick+0x208>)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d71a:	e08c      	b.n	800d836 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	695b      	ldr	r3, [r3, #20]
 800d720:	60bb      	str	r3, [r7, #8]
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	68d2      	ldr	r2, [r2, #12]
 800d72a:	609a      	str	r2, [r3, #8]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	6892      	ldr	r2, [r2, #8]
 800d734:	605a      	str	r2, [r3, #4]
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	685a      	ldr	r2, [r3, #4]
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	3304      	adds	r3, #4
 800d73e:	429a      	cmp	r2, r3
 800d740:	d103      	bne.n	800d74a <xTaskIncrementTick+0xca>
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	605a      	str	r2, [r3, #4]
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	2200      	movs	r2, #0
 800d74e:	615a      	str	r2, [r3, #20]
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	1e5a      	subs	r2, r3, #1
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d01e      	beq.n	800d7a0 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d766:	607b      	str	r3, [r7, #4]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	69db      	ldr	r3, [r3, #28]
 800d76c:	693a      	ldr	r2, [r7, #16]
 800d76e:	6a12      	ldr	r2, [r2, #32]
 800d770:	609a      	str	r2, [r3, #8]
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	693a      	ldr	r2, [r7, #16]
 800d778:	69d2      	ldr	r2, [r2, #28]
 800d77a:	605a      	str	r2, [r3, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	3318      	adds	r3, #24
 800d784:	429a      	cmp	r2, r3
 800d786:	d103      	bne.n	800d790 <xTaskIncrementTick+0x110>
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	6a1a      	ldr	r2, [r3, #32]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	605a      	str	r2, [r3, #4]
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	2200      	movs	r2, #0
 800d794:	629a      	str	r2, [r3, #40]	@ 0x28
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	1e5a      	subs	r2, r3, #1
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7a4:	4b39      	ldr	r3, [pc, #228]	@ (800d88c <xTaskIncrementTick+0x20c>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d903      	bls.n	800d7b4 <xTaskIncrementTick+0x134>
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7b0:	4a36      	ldr	r2, [pc, #216]	@ (800d88c <xTaskIncrementTick+0x20c>)
 800d7b2:	6013      	str	r3, [r2, #0]
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7b8:	4935      	ldr	r1, [pc, #212]	@ (800d890 <xTaskIncrementTick+0x210>)
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	4413      	add	r3, r2
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	440b      	add	r3, r1
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	603b      	str	r3, [r7, #0]
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	609a      	str	r2, [r3, #8]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	689a      	ldr	r2, [r3, #8]
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	60da      	str	r2, [r3, #12]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	3204      	adds	r2, #4
 800d7e0:	605a      	str	r2, [r3, #4]
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	1d1a      	adds	r2, r3, #4
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	609a      	str	r2, [r3, #8]
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4a26      	ldr	r2, [pc, #152]	@ (800d890 <xTaskIncrementTick+0x210>)
 800d7f8:	441a      	add	r2, r3
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	615a      	str	r2, [r3, #20]
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d802:	4923      	ldr	r1, [pc, #140]	@ (800d890 <xTaskIncrementTick+0x210>)
 800d804:	4613      	mov	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4413      	add	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	440b      	add	r3, r1
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	1c59      	adds	r1, r3, #1
 800d812:	481f      	ldr	r0, [pc, #124]	@ (800d890 <xTaskIncrementTick+0x210>)
 800d814:	4613      	mov	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4413      	add	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	4403      	add	r3, r0
 800d81e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d824:	4b1b      	ldr	r3, [pc, #108]	@ (800d894 <xTaskIncrementTick+0x214>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82a:	429a      	cmp	r2, r3
 800d82c:	f67f af5c 	bls.w	800d6e8 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800d830:	2301      	movs	r3, #1
 800d832:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d834:	e758      	b.n	800d6e8 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d836:	4b17      	ldr	r3, [pc, #92]	@ (800d894 <xTaskIncrementTick+0x214>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d83c:	4914      	ldr	r1, [pc, #80]	@ (800d890 <xTaskIncrementTick+0x210>)
 800d83e:	4613      	mov	r3, r2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4413      	add	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	440b      	add	r3, r1
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d901      	bls.n	800d852 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800d84e:	2301      	movs	r3, #1
 800d850:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d852:	4b11      	ldr	r3, [pc, #68]	@ (800d898 <xTaskIncrementTick+0x218>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d007      	beq.n	800d86a <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800d85a:	2301      	movs	r3, #1
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	e004      	b.n	800d86a <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d860:	4b0e      	ldr	r3, [pc, #56]	@ (800d89c <xTaskIncrementTick+0x21c>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3301      	adds	r3, #1
 800d866:	4a0d      	ldr	r2, [pc, #52]	@ (800d89c <xTaskIncrementTick+0x21c>)
 800d868:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d86a:	69fb      	ldr	r3, [r7, #28]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3720      	adds	r7, #32
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	200017b4 	.word	0x200017b4
 800d878:	20001790 	.word	0x20001790
 800d87c:	20001744 	.word	0x20001744
 800d880:	20001748 	.word	0x20001748
 800d884:	200017a4 	.word	0x200017a4
 800d888:	200017ac 	.word	0x200017ac
 800d88c:	20001794 	.word	0x20001794
 800d890:	200012bc 	.word	0x200012bc
 800d894:	200012b8 	.word	0x200012b8
 800d898:	200017a0 	.word	0x200017a0
 800d89c:	2000179c 	.word	0x2000179c

0800d8a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8a6:	4b23      	ldr	r3, [pc, #140]	@ (800d934 <vTaskSwitchContext+0x94>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d8ae:	4b22      	ldr	r3, [pc, #136]	@ (800d938 <vTaskSwitchContext+0x98>)
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800d8b4:	e03a      	b.n	800d92c <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 800d8b6:	4b20      	ldr	r3, [pc, #128]	@ (800d938 <vTaskSwitchContext+0x98>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8bc:	4b1f      	ldr	r3, [pc, #124]	@ (800d93c <vTaskSwitchContext+0x9c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	607b      	str	r3, [r7, #4]
 800d8c2:	e009      	b.n	800d8d8 <vTaskSwitchContext+0x38>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d103      	bne.n	800d8d2 <vTaskSwitchContext+0x32>
 800d8ca:	f000 ff65 	bl	800e798 <ulSetInterruptMask>
 800d8ce:	bf00      	nop
 800d8d0:	e7fd      	b.n	800d8ce <vTaskSwitchContext+0x2e>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	607b      	str	r3, [r7, #4]
 800d8d8:	4919      	ldr	r1, [pc, #100]	@ (800d940 <vTaskSwitchContext+0xa0>)
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4413      	add	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	440b      	add	r3, r1
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d0eb      	beq.n	800d8c4 <vTaskSwitchContext+0x24>
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4a12      	ldr	r2, [pc, #72]	@ (800d940 <vTaskSwitchContext+0xa0>)
 800d8f8:	4413      	add	r3, r2
 800d8fa:	603b      	str	r3, [r7, #0]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	605a      	str	r2, [r3, #4]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	3308      	adds	r3, #8
 800d90e:	429a      	cmp	r2, r3
 800d910:	d104      	bne.n	800d91c <vTaskSwitchContext+0x7c>
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	685a      	ldr	r2, [r3, #4]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	605a      	str	r2, [r3, #4]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	4a08      	ldr	r2, [pc, #32]	@ (800d944 <vTaskSwitchContext+0xa4>)
 800d924:	6013      	str	r3, [r2, #0]
 800d926:	4a05      	ldr	r2, [pc, #20]	@ (800d93c <vTaskSwitchContext+0x9c>)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6013      	str	r3, [r2, #0]
}
 800d92c:	bf00      	nop
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	200017b4 	.word	0x200017b4
 800d938:	200017a0 	.word	0x200017a0
 800d93c:	20001794 	.word	0x20001794
 800d940:	200012bc 	.word	0x200012bc
 800d944:	200012b8 	.word	0x200012b8

0800d948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d103      	bne.n	800d960 <vTaskPlaceOnEventList+0x18>
 800d958:	f000 ff1e 	bl	800e798 <ulSetInterruptMask>
 800d95c:	bf00      	nop
 800d95e:	e7fd      	b.n	800d95c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d960:	4b07      	ldr	r3, [pc, #28]	@ (800d980 <vTaskPlaceOnEventList+0x38>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3318      	adds	r3, #24
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff f844 	bl	800c9f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d96e:	2101      	movs	r1, #1
 800d970:	6838      	ldr	r0, [r7, #0]
 800d972:	f000 fa6d 	bl	800de50 <prvAddCurrentTaskToDelayedList>
}
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	200012b8 	.word	0x200012b8

0800d984 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d103      	bne.n	800d99e <vTaskPlaceOnEventListRestricted+0x1a>
 800d996:	f000 feff 	bl	800e798 <ulSetInterruptMask>
 800d99a:	bf00      	nop
 800d99c:	e7fd      	b.n	800d99a <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	617b      	str	r3, [r7, #20]
 800d9a4:	4b15      	ldr	r3, [pc, #84]	@ (800d9fc <vTaskPlaceOnEventListRestricted+0x78>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	61da      	str	r2, [r3, #28]
 800d9ac:	4b13      	ldr	r3, [pc, #76]	@ (800d9fc <vTaskPlaceOnEventListRestricted+0x78>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	6892      	ldr	r2, [r2, #8]
 800d9b4:	621a      	str	r2, [r3, #32]
 800d9b6:	4b11      	ldr	r3, [pc, #68]	@ (800d9fc <vTaskPlaceOnEventListRestricted+0x78>)
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	3218      	adds	r2, #24
 800d9c0:	605a      	str	r2, [r3, #4]
 800d9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800d9fc <vTaskPlaceOnEventListRestricted+0x78>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f103 0218 	add.w	r2, r3, #24
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	609a      	str	r2, [r3, #8]
 800d9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d9fc <vTaskPlaceOnEventListRestricted+0x78>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	1c5a      	adds	r2, r3, #1
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d002      	beq.n	800d9ec <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800d9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9ec:	6879      	ldr	r1, [r7, #4]
 800d9ee:	68b8      	ldr	r0, [r7, #8]
 800d9f0:	f000 fa2e 	bl	800de50 <prvAddCurrentTaskToDelayedList>
    }
 800d9f4:	bf00      	nop
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	200012b8 	.word	0x200012b8

0800da00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d103      	bne.n	800da1e <xTaskRemoveFromEventList+0x1e>
 800da16:	f000 febf 	bl	800e798 <ulSetInterruptMask>
 800da1a:	bf00      	nop
 800da1c:	e7fd      	b.n	800da1a <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da22:	617b      	str	r3, [r7, #20]
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	69db      	ldr	r3, [r3, #28]
 800da28:	69ba      	ldr	r2, [r7, #24]
 800da2a:	6a12      	ldr	r2, [r2, #32]
 800da2c:	609a      	str	r2, [r3, #8]
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	6a1b      	ldr	r3, [r3, #32]
 800da32:	69ba      	ldr	r2, [r7, #24]
 800da34:	69d2      	ldr	r2, [r2, #28]
 800da36:	605a      	str	r2, [r3, #4]
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	685a      	ldr	r2, [r3, #4]
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	3318      	adds	r3, #24
 800da40:	429a      	cmp	r2, r3
 800da42:	d103      	bne.n	800da4c <xTaskRemoveFromEventList+0x4c>
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	6a1a      	ldr	r2, [r3, #32]
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	605a      	str	r2, [r3, #4]
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	2200      	movs	r2, #0
 800da50:	629a      	str	r2, [r3, #40]	@ 0x28
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	1e5a      	subs	r2, r3, #1
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da5c:	4b49      	ldr	r3, [pc, #292]	@ (800db84 <xTaskRemoveFromEventList+0x184>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d15f      	bne.n	800db24 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	695b      	ldr	r3, [r3, #20]
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	69ba      	ldr	r2, [r7, #24]
 800da70:	68d2      	ldr	r2, [r2, #12]
 800da72:	609a      	str	r2, [r3, #8]
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	69ba      	ldr	r2, [r7, #24]
 800da7a:	6892      	ldr	r2, [r2, #8]
 800da7c:	605a      	str	r2, [r3, #4]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	685a      	ldr	r2, [r3, #4]
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	3304      	adds	r3, #4
 800da86:	429a      	cmp	r2, r3
 800da88:	d103      	bne.n	800da92 <xTaskRemoveFromEventList+0x92>
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	68da      	ldr	r2, [r3, #12]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	605a      	str	r2, [r3, #4]
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	2200      	movs	r2, #0
 800da96:	615a      	str	r2, [r3, #20]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	1e5a      	subs	r2, r3, #1
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daa6:	4b38      	ldr	r3, [pc, #224]	@ (800db88 <xTaskRemoveFromEventList+0x188>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d903      	bls.n	800dab6 <xTaskRemoveFromEventList+0xb6>
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab2:	4a35      	ldr	r2, [pc, #212]	@ (800db88 <xTaskRemoveFromEventList+0x188>)
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daba:	4934      	ldr	r1, [pc, #208]	@ (800db8c <xTaskRemoveFromEventList+0x18c>)
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	440b      	add	r3, r1
 800dac6:	3304      	adds	r3, #4
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	60bb      	str	r3, [r7, #8]
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	609a      	str	r2, [r3, #8]
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	689a      	ldr	r2, [r3, #8]
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	60da      	str	r2, [r3, #12]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	69ba      	ldr	r2, [r7, #24]
 800dae0:	3204      	adds	r2, #4
 800dae2:	605a      	str	r2, [r3, #4]
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	1d1a      	adds	r2, r3, #4
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	609a      	str	r2, [r3, #8]
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf0:	4613      	mov	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4a24      	ldr	r2, [pc, #144]	@ (800db8c <xTaskRemoveFromEventList+0x18c>)
 800dafa:	441a      	add	r2, r3
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	615a      	str	r2, [r3, #20]
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db04:	4921      	ldr	r1, [pc, #132]	@ (800db8c <xTaskRemoveFromEventList+0x18c>)
 800db06:	4613      	mov	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	440b      	add	r3, r1
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	1c59      	adds	r1, r3, #1
 800db14:	481d      	ldr	r0, [pc, #116]	@ (800db8c <xTaskRemoveFromEventList+0x18c>)
 800db16:	4613      	mov	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4403      	add	r3, r0
 800db20:	6019      	str	r1, [r3, #0]
 800db22:	e01b      	b.n	800db5c <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db24:	4b1a      	ldr	r3, [pc, #104]	@ (800db90 <xTaskRemoveFromEventList+0x190>)
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	613b      	str	r3, [r7, #16]
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	693a      	ldr	r2, [r7, #16]
 800db2e:	61da      	str	r2, [r3, #28]
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	621a      	str	r2, [r3, #32]
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	69ba      	ldr	r2, [r7, #24]
 800db3e:	3218      	adds	r2, #24
 800db40:	605a      	str	r2, [r3, #4]
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	f103 0218 	add.w	r2, r3, #24
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	609a      	str	r2, [r3, #8]
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	4a10      	ldr	r2, [pc, #64]	@ (800db90 <xTaskRemoveFromEventList+0x190>)
 800db50:	629a      	str	r2, [r3, #40]	@ 0x28
 800db52:	4b0f      	ldr	r3, [pc, #60]	@ (800db90 <xTaskRemoveFromEventList+0x190>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3301      	adds	r3, #1
 800db58:	4a0d      	ldr	r2, [pc, #52]	@ (800db90 <xTaskRemoveFromEventList+0x190>)
 800db5a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db60:	4b0c      	ldr	r3, [pc, #48]	@ (800db94 <xTaskRemoveFromEventList+0x194>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db66:	429a      	cmp	r2, r3
 800db68:	d905      	bls.n	800db76 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800db6a:	2301      	movs	r3, #1
 800db6c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800db6e:	4b0a      	ldr	r3, [pc, #40]	@ (800db98 <xTaskRemoveFromEventList+0x198>)
 800db70:	2201      	movs	r2, #1
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	e001      	b.n	800db7a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800db76:	2300      	movs	r3, #0
 800db78:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800db7a:	69fb      	ldr	r3, [r7, #28]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3720      	adds	r7, #32
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	200017b4 	.word	0x200017b4
 800db88:	20001794 	.word	0x20001794
 800db8c:	200012bc 	.word	0x200012bc
 800db90:	2000174c 	.word	0x2000174c
 800db94:	200012b8 	.word	0x200012b8
 800db98:	200017a0 	.word	0x200017a0

0800db9c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dba4:	4b06      	ldr	r3, [pc, #24]	@ (800dbc0 <vTaskInternalSetTimeOutState+0x24>)
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800dbac:	4b05      	ldr	r3, [pc, #20]	@ (800dbc4 <vTaskInternalSetTimeOutState+0x28>)
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	605a      	str	r2, [r3, #4]
}
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr
 800dbc0:	200017a4 	.word	0x200017a4
 800dbc4:	20001790 	.word	0x20001790

0800dbc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d103      	bne.n	800dbe0 <xTaskCheckForTimeOut+0x18>
 800dbd8:	f000 fdde 	bl	800e798 <ulSetInterruptMask>
 800dbdc:	bf00      	nop
 800dbde:	e7fd      	b.n	800dbdc <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d103      	bne.n	800dbee <xTaskCheckForTimeOut+0x26>
 800dbe6:	f000 fdd7 	bl	800e798 <ulSetInterruptMask>
 800dbea:	bf00      	nop
 800dbec:	e7fd      	b.n	800dbea <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800dbee:	f000 fc95 	bl	800e51c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800dbf2:	4b1f      	ldr	r3, [pc, #124]	@ (800dc70 <xTaskCheckForTimeOut+0xa8>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	693a      	ldr	r2, [r7, #16]
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0a:	d102      	bne.n	800dc12 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	e026      	b.n	800dc60 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	4b17      	ldr	r3, [pc, #92]	@ (800dc74 <xTaskCheckForTimeOut+0xac>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d00a      	beq.n	800dc34 <xTaskCheckForTimeOut+0x6c>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	693a      	ldr	r2, [r7, #16]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d305      	bcc.n	800dc34 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	e015      	b.n	800dc60 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d20b      	bcs.n	800dc56 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	1ad2      	subs	r2, r2, r3
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff ffa6 	bl	800db9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800dc50:	2300      	movs	r3, #0
 800dc52:	617b      	str	r3, [r7, #20]
 800dc54:	e004      	b.n	800dc60 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800dc60:	f000 fc6e 	bl	800e540 <vPortExitCritical>

    return xReturn;
 800dc64:	697b      	ldr	r3, [r7, #20]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20001790 	.word	0x20001790
 800dc74:	200017a4 	.word	0x200017a4

0800dc78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800dc7c:	4b03      	ldr	r3, [pc, #12]	@ (800dc8c <vTaskMissedYield+0x14>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	601a      	str	r2, [r3, #0]
}
 800dc82:	bf00      	nop
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	200017a0 	.word	0x200017a0

0800dc90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800dc98:	f000 f84a 	bl	800dd30 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc9c:	4b03      	ldr	r3, [pc, #12]	@ (800dcac <prvIdleTask+0x1c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d9f9      	bls.n	800dc98 <prvIdleTask+0x8>
            {
                taskYIELD();
 800dca4:	f000 fc28 	bl	800e4f8 <vPortYield>
        prvCheckTasksWaitingTermination();
 800dca8:	e7f6      	b.n	800dc98 <prvIdleTask+0x8>
 800dcaa:	bf00      	nop
 800dcac:	200012bc 	.word	0x200012bc

0800dcb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
 800dcba:	e00c      	b.n	800dcd6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4a12      	ldr	r2, [pc, #72]	@ (800dd10 <prvInitialiseTaskLists+0x60>)
 800dcc8:	4413      	add	r3, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe fe66 	bl	800c99c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	607b      	str	r3, [r7, #4]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b37      	cmp	r3, #55	@ 0x37
 800dcda:	d9ef      	bls.n	800dcbc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800dcdc:	480d      	ldr	r0, [pc, #52]	@ (800dd14 <prvInitialiseTaskLists+0x64>)
 800dcde:	f7fe fe5d 	bl	800c99c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800dce2:	480d      	ldr	r0, [pc, #52]	@ (800dd18 <prvInitialiseTaskLists+0x68>)
 800dce4:	f7fe fe5a 	bl	800c99c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800dce8:	480c      	ldr	r0, [pc, #48]	@ (800dd1c <prvInitialiseTaskLists+0x6c>)
 800dcea:	f7fe fe57 	bl	800c99c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800dcee:	480c      	ldr	r0, [pc, #48]	@ (800dd20 <prvInitialiseTaskLists+0x70>)
 800dcf0:	f7fe fe54 	bl	800c99c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800dcf4:	480b      	ldr	r0, [pc, #44]	@ (800dd24 <prvInitialiseTaskLists+0x74>)
 800dcf6:	f7fe fe51 	bl	800c99c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800dcfa:	4b0b      	ldr	r3, [pc, #44]	@ (800dd28 <prvInitialiseTaskLists+0x78>)
 800dcfc:	4a05      	ldr	r2, [pc, #20]	@ (800dd14 <prvInitialiseTaskLists+0x64>)
 800dcfe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd00:	4b0a      	ldr	r3, [pc, #40]	@ (800dd2c <prvInitialiseTaskLists+0x7c>)
 800dd02:	4a05      	ldr	r2, [pc, #20]	@ (800dd18 <prvInitialiseTaskLists+0x68>)
 800dd04:	601a      	str	r2, [r3, #0]
}
 800dd06:	bf00      	nop
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	200012bc 	.word	0x200012bc
 800dd14:	2000171c 	.word	0x2000171c
 800dd18:	20001730 	.word	0x20001730
 800dd1c:	2000174c 	.word	0x2000174c
 800dd20:	20001760 	.word	0x20001760
 800dd24:	20001778 	.word	0x20001778
 800dd28:	20001744 	.word	0x20001744
 800dd2c:	20001748 	.word	0x20001748

0800dd30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd36:	e019      	b.n	800dd6c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800dd38:	f000 fbf0 	bl	800e51c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd3c:	4b10      	ldr	r3, [pc, #64]	@ (800dd80 <prvCheckTasksWaitingTermination+0x50>)
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3304      	adds	r3, #4
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe fe8d 	bl	800ca68 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800dd4e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd84 <prvCheckTasksWaitingTermination+0x54>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	4a0b      	ldr	r2, [pc, #44]	@ (800dd84 <prvCheckTasksWaitingTermination+0x54>)
 800dd56:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800dd58:	4b0b      	ldr	r3, [pc, #44]	@ (800dd88 <prvCheckTasksWaitingTermination+0x58>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	4a0a      	ldr	r2, [pc, #40]	@ (800dd88 <prvCheckTasksWaitingTermination+0x58>)
 800dd60:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800dd62:	f000 fbed 	bl	800e540 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f810 	bl	800dd8c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd6c:	4b06      	ldr	r3, [pc, #24]	@ (800dd88 <prvCheckTasksWaitingTermination+0x58>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1e1      	bne.n	800dd38 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800dd74:	bf00      	nop
 800dd76:	bf00      	nop
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	20001760 	.word	0x20001760
 800dd84:	2000178c 	.word	0x2000178c
 800dd88:	20001774 	.word	0x20001774

0800dd8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d108      	bne.n	800ddb0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dda2:	4618      	mov	r0, r3
 800dda4:	f000 fdaa 	bl	800e8fc <vPortFree>
                vPortFree( pxTCB );
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 fda7 	bl	800e8fc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ddae:	e011      	b.n	800ddd4 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d103      	bne.n	800ddc2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fd9e 	bl	800e8fc <vPortFree>
    }
 800ddc0:	e008      	b.n	800ddd4 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d003      	beq.n	800ddd4 <prvDeleteTCB+0x48>
 800ddcc:	f000 fce4 	bl	800e798 <ulSetInterruptMask>
 800ddd0:	bf00      	nop
 800ddd2:	e7fd      	b.n	800ddd0 <prvDeleteTCB+0x44>
    }
 800ddd4:	bf00      	nop
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dddc:	b480      	push	{r7}
 800ddde:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dde0:	4b0a      	ldr	r3, [pc, #40]	@ (800de0c <prvResetNextTaskUnblockTime+0x30>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d104      	bne.n	800ddf4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ddea:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <prvResetNextTaskUnblockTime+0x34>)
 800ddec:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800ddf2:	e005      	b.n	800de00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ddf4:	4b05      	ldr	r3, [pc, #20]	@ (800de0c <prvResetNextTaskUnblockTime+0x30>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a04      	ldr	r2, [pc, #16]	@ (800de10 <prvResetNextTaskUnblockTime+0x34>)
 800ddfe:	6013      	str	r3, [r2, #0]
}
 800de00:	bf00      	nop
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	20001744 	.word	0x20001744
 800de10:	200017ac 	.word	0x200017ac

0800de14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800de1a:	4b0b      	ldr	r3, [pc, #44]	@ (800de48 <xTaskGetSchedulerState+0x34>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d102      	bne.n	800de28 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800de22:	2301      	movs	r3, #1
 800de24:	607b      	str	r3, [r7, #4]
 800de26:	e008      	b.n	800de3a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de28:	4b08      	ldr	r3, [pc, #32]	@ (800de4c <xTaskGetSchedulerState+0x38>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d102      	bne.n	800de36 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800de30:	2302      	movs	r3, #2
 800de32:	607b      	str	r3, [r7, #4]
 800de34:	e001      	b.n	800de3a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800de36:	2300      	movs	r3, #0
 800de38:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800de3a:	687b      	ldr	r3, [r7, #4]
    }
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	20001798 	.word	0x20001798
 800de4c:	200017b4 	.word	0x200017b4

0800de50 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b086      	sub	sp, #24
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800de5a:	4b2e      	ldr	r3, [pc, #184]	@ (800df14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de60:	4b2d      	ldr	r3, [pc, #180]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	3304      	adds	r3, #4
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe fdfe 	bl	800ca68 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de72:	d124      	bne.n	800debe <prvAddCurrentTaskToDelayedList+0x6e>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d021      	beq.n	800debe <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de7a:	4b28      	ldr	r3, [pc, #160]	@ (800df1c <prvAddCurrentTaskToDelayedList+0xcc>)
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	613b      	str	r3, [r7, #16]
 800de80:	4b25      	ldr	r3, [pc, #148]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	693a      	ldr	r2, [r7, #16]
 800de86:	609a      	str	r2, [r3, #8]
 800de88:	4b23      	ldr	r3, [pc, #140]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	6892      	ldr	r2, [r2, #8]
 800de90:	60da      	str	r2, [r3, #12]
 800de92:	4b21      	ldr	r3, [pc, #132]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	3204      	adds	r2, #4
 800de9c:	605a      	str	r2, [r3, #4]
 800de9e:	4b1e      	ldr	r3, [pc, #120]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	1d1a      	adds	r2, r3, #4
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	609a      	str	r2, [r3, #8]
 800dea8:	4b1b      	ldr	r3, [pc, #108]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a1b      	ldr	r2, [pc, #108]	@ (800df1c <prvAddCurrentTaskToDelayedList+0xcc>)
 800deae:	615a      	str	r2, [r3, #20]
 800deb0:	4b1a      	ldr	r3, [pc, #104]	@ (800df1c <prvAddCurrentTaskToDelayedList+0xcc>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3301      	adds	r3, #1
 800deb6:	4a19      	ldr	r2, [pc, #100]	@ (800df1c <prvAddCurrentTaskToDelayedList+0xcc>)
 800deb8:	6013      	str	r3, [r2, #0]
 800deba:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800debc:	e026      	b.n	800df0c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4413      	add	r3, r2
 800dec4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dec6:	4b14      	ldr	r3, [pc, #80]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d209      	bcs.n	800deea <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ded6:	4b12      	ldr	r3, [pc, #72]	@ (800df20 <prvAddCurrentTaskToDelayedList+0xd0>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	4b0f      	ldr	r3, [pc, #60]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3304      	adds	r3, #4
 800dee0:	4619      	mov	r1, r3
 800dee2:	4610      	mov	r0, r2
 800dee4:	f7fe fd87 	bl	800c9f6 <vListInsert>
}
 800dee8:	e010      	b.n	800df0c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800deea:	4b0e      	ldr	r3, [pc, #56]	@ (800df24 <prvAddCurrentTaskToDelayedList+0xd4>)
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	4b0a      	ldr	r3, [pc, #40]	@ (800df18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3304      	adds	r3, #4
 800def4:	4619      	mov	r1, r3
 800def6:	4610      	mov	r0, r2
 800def8:	f7fe fd7d 	bl	800c9f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800defc:	4b0a      	ldr	r3, [pc, #40]	@ (800df28 <prvAddCurrentTaskToDelayedList+0xd8>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	429a      	cmp	r2, r3
 800df04:	d202      	bcs.n	800df0c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800df06:	4a08      	ldr	r2, [pc, #32]	@ (800df28 <prvAddCurrentTaskToDelayedList+0xd8>)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6013      	str	r3, [r2, #0]
}
 800df0c:	bf00      	nop
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	20001790 	.word	0x20001790
 800df18:	200012b8 	.word	0x200012b8
 800df1c:	20001778 	.word	0x20001778
 800df20:	20001748 	.word	0x20001748
 800df24:	20001744 	.word	0x20001744
 800df28:	200017ac 	.word	0x200017ac

0800df2c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b088      	sub	sp, #32
 800df30:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800df32:	2300      	movs	r3, #0
 800df34:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800df36:	f000 fa5f 	bl	800e3f8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800df3a:	4b18      	ldr	r3, [pc, #96]	@ (800df9c <xTimerCreateTimerTask+0x70>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d020      	beq.n	800df84 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800df42:	2300      	movs	r3, #0
 800df44:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800df46:	2300      	movs	r3, #0
 800df48:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df4a:	463a      	mov	r2, r7
 800df4c:	1d39      	adds	r1, r7, #4
 800df4e:	f107 0308 	add.w	r3, r7, #8
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe fd08 	bl	800c968 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800df58:	6839      	ldr	r1, [r7, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	9202      	str	r2, [sp, #8]
 800df60:	9301      	str	r3, [sp, #4]
 800df62:	2302      	movs	r3, #2
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	2300      	movs	r3, #0
 800df68:	460a      	mov	r2, r1
 800df6a:	490d      	ldr	r1, [pc, #52]	@ (800dfa0 <xTimerCreateTimerTask+0x74>)
 800df6c:	480d      	ldr	r0, [pc, #52]	@ (800dfa4 <xTimerCreateTimerTask+0x78>)
 800df6e:	f7ff f84f 	bl	800d010 <xTaskCreateStatic>
 800df72:	4603      	mov	r3, r0
 800df74:	4a0c      	ldr	r2, [pc, #48]	@ (800dfa8 <xTimerCreateTimerTask+0x7c>)
 800df76:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800df78:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa8 <xTimerCreateTimerTask+0x7c>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800df80:	2301      	movs	r3, #1
 800df82:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d103      	bne.n	800df92 <xTimerCreateTimerTask+0x66>
 800df8a:	f000 fc05 	bl	800e798 <ulSetInterruptMask>
 800df8e:	bf00      	nop
 800df90:	e7fd      	b.n	800df8e <xTimerCreateTimerTask+0x62>
        return xReturn;
 800df92:	68fb      	ldr	r3, [r7, #12]
    }
 800df94:	4618      	mov	r0, r3
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	200017e8 	.word	0x200017e8
 800dfa0:	0800e9f0 	.word	0x0800e9f0
 800dfa4:	0800e051 	.word	0x0800e051
 800dfa8:	200017ec 	.word	0x200017ec

0800dfac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800dfb8:	e008      	b.n	800dfcc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6a1b      	ldr	r3, [r3, #32]
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	699a      	ldr	r2, [r3, #24]
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	18d1      	adds	r1, r2, r3
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 f8d7 	bl	800e18c <prvInsertTimerInActiveList>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1ea      	bne.n	800dfba <prvReloadTimer+0xe>
        }
    }
 800dfe4:	bf00      	nop
 800dfe6:	bf00      	nop
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
	...

0800dff0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dffa:	4b14      	ldr	r3, [pc, #80]	@ (800e04c <prvProcessExpiredTimer+0x5c>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3304      	adds	r3, #4
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fe fd2d 	bl	800ca68 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d005      	beq.n	800e028 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	6879      	ldr	r1, [r7, #4]
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff ffc3 	bl	800dfac <prvReloadTimer>
 800e026:	e008      	b.n	800e03a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e02e:	f023 0301 	bic.w	r3, r3, #1
 800e032:	b2da      	uxtb	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	4798      	blx	r3
    }
 800e042:	bf00      	nop
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	200017e0 	.word	0x200017e0

0800e050 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e058:	f107 0308 	add.w	r3, r7, #8
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 f851 	bl	800e104 <prvGetNextExpireTime>
 800e062:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	4619      	mov	r1, r3
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	f000 f805 	bl	800e078 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e06e:	f000 f8cf 	bl	800e210 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e072:	bf00      	nop
 800e074:	e7f0      	b.n	800e058 <prvTimerTask+0x8>
	...

0800e078 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e082:	f7ff f9f1 	bl	800d468 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e086:	f107 0308 	add.w	r3, r7, #8
 800e08a:	4618      	mov	r0, r3
 800e08c:	f000 f85e 	bl	800e14c <prvSampleTimeNow>
 800e090:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d12a      	bne.n	800e0ee <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10a      	bne.n	800e0b4 <prvProcessTimerOrBlockTask+0x3c>
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d806      	bhi.n	800e0b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e0a6:	f7ff f9ed 	bl	800d484 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e0aa:	68f9      	ldr	r1, [r7, #12]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff ff9f 	bl	800dff0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e0b2:	e01e      	b.n	800e0f2 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d008      	beq.n	800e0cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e0ba:	4b10      	ldr	r3, [pc, #64]	@ (800e0fc <prvProcessTimerOrBlockTask+0x84>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <prvProcessTimerOrBlockTask+0x50>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e000      	b.n	800e0ca <prvProcessTimerOrBlockTask+0x52>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e100 <prvProcessTimerOrBlockTask+0x88>)
 800e0ce:	6818      	ldr	r0, [r3, #0]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f7fe ff65 	bl	800cfa8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e0de:	f7ff f9d1 	bl	800d484 <xTaskResumeAll>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d104      	bne.n	800e0f2 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e0e8:	f000 fa06 	bl	800e4f8 <vPortYield>
    }
 800e0ec:	e001      	b.n	800e0f2 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e0ee:	f7ff f9c9 	bl	800d484 <xTaskResumeAll>
    }
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	200017e4 	.word	0x200017e4
 800e100:	200017e8 	.word	0x200017e8

0800e104 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e10c:	4b0e      	ldr	r3, [pc, #56]	@ (800e148 <prvGetNextExpireTime+0x44>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <prvGetNextExpireTime+0x16>
 800e116:	2201      	movs	r2, #1
 800e118:	e000      	b.n	800e11c <prvGetNextExpireTime+0x18>
 800e11a:	2200      	movs	r2, #0
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d105      	bne.n	800e134 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e128:	4b07      	ldr	r3, [pc, #28]	@ (800e148 <prvGetNextExpireTime+0x44>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	e001      	b.n	800e138 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e134:	2300      	movs	r3, #0
 800e136:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e138:	68fb      	ldr	r3, [r7, #12]
    }
 800e13a:	4618      	mov	r0, r3
 800e13c:	3714      	adds	r7, #20
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	200017e0 	.word	0x200017e0

0800e14c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e154:	f7ff fa84 	bl	800d660 <xTaskGetTickCount>
 800e158:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e15a:	4b0b      	ldr	r3, [pc, #44]	@ (800e188 <prvSampleTimeNow+0x3c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	429a      	cmp	r2, r3
 800e162:	d205      	bcs.n	800e170 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e164:	f000 f922 	bl	800e3ac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	601a      	str	r2, [r3, #0]
 800e16e:	e002      	b.n	800e176 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e176:	4a04      	ldr	r2, [pc, #16]	@ (800e188 <prvSampleTimeNow+0x3c>)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e17c:	68fb      	ldr	r3, [r7, #12]
    }
 800e17e:	4618      	mov	r0, r3
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	200017f0 	.word	0x200017f0

0800e18c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d812      	bhi.n	800e1d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	1ad2      	subs	r2, r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d302      	bcc.n	800e1c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	617b      	str	r3, [r7, #20]
 800e1c4:	e01b      	b.n	800e1fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1c6:	4b10      	ldr	r3, [pc, #64]	@ (800e208 <prvInsertTimerInActiveList+0x7c>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fe fc10 	bl	800c9f6 <vListInsert>
 800e1d6:	e012      	b.n	800e1fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d206      	bcs.n	800e1ee <prvInsertTimerInActiveList+0x62>
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d302      	bcc.n	800e1ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	617b      	str	r3, [r7, #20]
 800e1ec:	e007      	b.n	800e1fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1ee:	4b07      	ldr	r3, [pc, #28]	@ (800e20c <prvInsertTimerInActiveList+0x80>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	3304      	adds	r3, #4
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	f7fe fbfc 	bl	800c9f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e1fe:	697b      	ldr	r3, [r7, #20]
    }
 800e200:	4618      	mov	r0, r3
 800e202:	3718      	adds	r7, #24
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	200017e4 	.word	0x200017e4
 800e20c:	200017e0 	.word	0x200017e0

0800e210 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e210:	b580      	push	{r7, lr}
 800e212:	b088      	sub	sp, #32
 800e214:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e216:	e0b7      	b.n	800e388 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	da11      	bge.n	800e242 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e21e:	1d3b      	adds	r3, r7, #4
 800e220:	3304      	adds	r3, #4
 800e222:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d103      	bne.n	800e232 <prvProcessReceivedCommands+0x22>
 800e22a:	f000 fab5 	bl	800e798 <ulSetInterruptMask>
 800e22e:	bf00      	nop
 800e230:	e7fd      	b.n	800e22e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	6850      	ldr	r0, [r2, #4]
 800e23a:	69fa      	ldr	r2, [r7, #28]
 800e23c:	6892      	ldr	r2, [r2, #8]
 800e23e:	4611      	mov	r1, r2
 800e240:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f2c0 809f 	blt.w	800e388 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d004      	beq.n	800e260 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe fc04 	bl	800ca68 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e260:	463b      	mov	r3, r7
 800e262:	4618      	mov	r0, r3
 800e264:	f7ff ff72 	bl	800e14c <prvSampleTimeNow>
 800e268:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3b01      	subs	r3, #1
 800e26e:	2b08      	cmp	r3, #8
 800e270:	f200 8087 	bhi.w	800e382 <prvProcessReceivedCommands+0x172>
 800e274:	a201      	add	r2, pc, #4	@ (adr r2, 800e27c <prvProcessReceivedCommands+0x6c>)
 800e276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27a:	bf00      	nop
 800e27c:	0800e2a1 	.word	0x0800e2a1
 800e280:	0800e2a1 	.word	0x0800e2a1
 800e284:	0800e309 	.word	0x0800e309
 800e288:	0800e31d 	.word	0x0800e31d
 800e28c:	0800e359 	.word	0x0800e359
 800e290:	0800e2a1 	.word	0x0800e2a1
 800e294:	0800e2a1 	.word	0x0800e2a1
 800e298:	0800e309 	.word	0x0800e309
 800e29c:	0800e31d 	.word	0x0800e31d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2a6:	f043 0301 	orr.w	r3, r3, #1
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	699b      	ldr	r3, [r3, #24]
 800e2b8:	18d1      	adds	r1, r2, r3
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	69b8      	ldr	r0, [r7, #24]
 800e2c0:	f7ff ff64 	bl	800e18c <prvInsertTimerInActiveList>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d05d      	beq.n	800e386 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2d0:	f003 0304 	and.w	r3, r3, #4
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d009      	beq.n	800e2ec <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	4413      	add	r3, r2
 800e2e0:	697a      	ldr	r2, [r7, #20]
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	69b8      	ldr	r0, [r7, #24]
 800e2e6:	f7ff fe61 	bl	800dfac <prvReloadTimer>
 800e2ea:	e008      	b.n	800e2fe <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2f2:	f023 0301 	bic.w	r3, r3, #1
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	6a1b      	ldr	r3, [r3, #32]
 800e302:	69b8      	ldr	r0, [r7, #24]
 800e304:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e306:	e03e      	b.n	800e386 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e30e:	f023 0301 	bic.w	r3, r3, #1
 800e312:	b2da      	uxtb	r2, r3
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e31a:	e035      	b.n	800e388 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e322:	f043 0301 	orr.w	r3, r3, #1
 800e326:	b2da      	uxtb	r2, r3
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	699b      	ldr	r3, [r3, #24]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d103      	bne.n	800e344 <prvProcessReceivedCommands+0x134>
 800e33c:	f000 fa2c 	bl	800e798 <ulSetInterruptMask>
 800e340:	bf00      	nop
 800e342:	e7fd      	b.n	800e340 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	699a      	ldr	r2, [r3, #24]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	18d1      	adds	r1, r2, r3
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	697a      	ldr	r2, [r7, #20]
 800e350:	69b8      	ldr	r0, [r7, #24]
 800e352:	f7ff ff1b 	bl	800e18c <prvInsertTimerInActiveList>
                        break;
 800e356:	e017      	b.n	800e388 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e35e:	f003 0302 	and.w	r3, r3, #2
 800e362:	2b00      	cmp	r3, #0
 800e364:	d103      	bne.n	800e36e <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800e366:	69b8      	ldr	r0, [r7, #24]
 800e368:	f000 fac8 	bl	800e8fc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e36c:	e00c      	b.n	800e388 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e374:	f023 0301 	bic.w	r3, r3, #1
 800e378:	b2da      	uxtb	r2, r3
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e380:	e002      	b.n	800e388 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e382:	bf00      	nop
 800e384:	e000      	b.n	800e388 <prvProcessReceivedCommands+0x178>
                        break;
 800e386:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e388:	4b07      	ldr	r3, [pc, #28]	@ (800e3a8 <prvProcessReceivedCommands+0x198>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	1d39      	adds	r1, r7, #4
 800e38e:	2200      	movs	r2, #0
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe fc78 	bl	800cc86 <xQueueReceive>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f47f af3d 	bne.w	800e218 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e39e:	bf00      	nop
 800e3a0:	bf00      	nop
 800e3a2:	3720      	adds	r7, #32
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	200017e8 	.word	0x200017e8

0800e3ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3b2:	e009      	b.n	800e3c8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3b4:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f0 <prvSwitchTimerLists+0x44>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e3be:	f04f 31ff 	mov.w	r1, #4294967295
 800e3c2:	6838      	ldr	r0, [r7, #0]
 800e3c4:	f7ff fe14 	bl	800dff0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3c8:	4b09      	ldr	r3, [pc, #36]	@ (800e3f0 <prvSwitchTimerLists+0x44>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1f0      	bne.n	800e3b4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e3d2:	4b07      	ldr	r3, [pc, #28]	@ (800e3f0 <prvSwitchTimerLists+0x44>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e3d8:	4b06      	ldr	r3, [pc, #24]	@ (800e3f4 <prvSwitchTimerLists+0x48>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a04      	ldr	r2, [pc, #16]	@ (800e3f0 <prvSwitchTimerLists+0x44>)
 800e3de:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e3e0:	4a04      	ldr	r2, [pc, #16]	@ (800e3f4 <prvSwitchTimerLists+0x48>)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6013      	str	r3, [r2, #0]
    }
 800e3e6:	bf00      	nop
 800e3e8:	3708      	adds	r7, #8
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	200017e0 	.word	0x200017e0
 800e3f4:	200017e4 	.word	0x200017e4

0800e3f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e3fe:	f000 f88d 	bl	800e51c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e402:	4b15      	ldr	r3, [pc, #84]	@ (800e458 <prvCheckForValidListAndQueue+0x60>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d120      	bne.n	800e44c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e40a:	4814      	ldr	r0, [pc, #80]	@ (800e45c <prvCheckForValidListAndQueue+0x64>)
 800e40c:	f7fe fac6 	bl	800c99c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e410:	4813      	ldr	r0, [pc, #76]	@ (800e460 <prvCheckForValidListAndQueue+0x68>)
 800e412:	f7fe fac3 	bl	800c99c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e416:	4b13      	ldr	r3, [pc, #76]	@ (800e464 <prvCheckForValidListAndQueue+0x6c>)
 800e418:	4a10      	ldr	r2, [pc, #64]	@ (800e45c <prvCheckForValidListAndQueue+0x64>)
 800e41a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e41c:	4b12      	ldr	r3, [pc, #72]	@ (800e468 <prvCheckForValidListAndQueue+0x70>)
 800e41e:	4a10      	ldr	r2, [pc, #64]	@ (800e460 <prvCheckForValidListAndQueue+0x68>)
 800e420:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e422:	2300      	movs	r3, #0
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	4b11      	ldr	r3, [pc, #68]	@ (800e46c <prvCheckForValidListAndQueue+0x74>)
 800e428:	4a11      	ldr	r2, [pc, #68]	@ (800e470 <prvCheckForValidListAndQueue+0x78>)
 800e42a:	2110      	movs	r1, #16
 800e42c:	200a      	movs	r0, #10
 800e42e:	f7fe fbbe 	bl	800cbae <xQueueGenericCreateStatic>
 800e432:	4603      	mov	r3, r0
 800e434:	4a08      	ldr	r2, [pc, #32]	@ (800e458 <prvCheckForValidListAndQueue+0x60>)
 800e436:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e438:	4b07      	ldr	r3, [pc, #28]	@ (800e458 <prvCheckForValidListAndQueue+0x60>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d005      	beq.n	800e44c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e440:	4b05      	ldr	r3, [pc, #20]	@ (800e458 <prvCheckForValidListAndQueue+0x60>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	490b      	ldr	r1, [pc, #44]	@ (800e474 <prvCheckForValidListAndQueue+0x7c>)
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fd68 	bl	800cf1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e44c:	f000 f878 	bl	800e540 <vPortExitCritical>
    }
 800e450:	bf00      	nop
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	200017e8 	.word	0x200017e8
 800e45c:	200017b8 	.word	0x200017b8
 800e460:	200017cc 	.word	0x200017cc
 800e464:	200017e0 	.word	0x200017e0
 800e468:	200017e4 	.word	0x200017e4
 800e46c:	20001894 	.word	0x20001894
 800e470:	200017f4 	.word	0x200017f4
 800e474:	0800e9f8 	.word	0x0800e9f8

0800e478 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e478:	b480      	push	{r7}
 800e47a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e47c:	4b0b      	ldr	r3, [pc, #44]	@ (800e4ac <vPortSetupTimerInterrupt+0x34>)
 800e47e:	2200      	movs	r2, #0
 800e480:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e482:	4b0b      	ldr	r3, [pc, #44]	@ (800e4b0 <vPortSetupTimerInterrupt+0x38>)
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e488:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b4 <vPortSetupTimerInterrupt+0x3c>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a0a      	ldr	r2, [pc, #40]	@ (800e4b8 <vPortSetupTimerInterrupt+0x40>)
 800e48e:	fba2 2303 	umull	r2, r3, r2, r3
 800e492:	099b      	lsrs	r3, r3, #6
 800e494:	4a09      	ldr	r2, [pc, #36]	@ (800e4bc <vPortSetupTimerInterrupt+0x44>)
 800e496:	3b01      	subs	r3, #1
 800e498:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e49a:	4b04      	ldr	r3, [pc, #16]	@ (800e4ac <vPortSetupTimerInterrupt+0x34>)
 800e49c:	2207      	movs	r2, #7
 800e49e:	601a      	str	r2, [r3, #0]
}
 800e4a0:	bf00      	nop
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	e000e010 	.word	0xe000e010
 800e4b0:	e000e018 	.word	0xe000e018
 800e4b4:	20000000 	.word	0x20000000
 800e4b8:	10624dd3 	.word	0x10624dd3
 800e4bc:	e000e014 	.word	0xe000e014

0800e4c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e4ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e4f4 <prvTaskExitError+0x34>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d2:	d003      	beq.n	800e4dc <prvTaskExitError+0x1c>
 800e4d4:	f000 f960 	bl	800e798 <ulSetInterruptMask>
 800e4d8:	bf00      	nop
 800e4da:	e7fd      	b.n	800e4d8 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e4dc:	f000 f95c 	bl	800e798 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e4e0:	bf00      	nop
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d0fc      	beq.n	800e4e2 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e4e8:	bf00      	nop
 800e4ea:	bf00      	nop
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000010 	.word	0x20000010

0800e4f8 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4fc:	4b06      	ldr	r3, [pc, #24]	@ (800e518 <vPortYield+0x20>)
 800e4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e502:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e504:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e508:	f3bf 8f6f 	isb	sy
}
 800e50c:	bf00      	nop
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	e000ed04 	.word	0xe000ed04

0800e51c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e520:	f000 f93a 	bl	800e798 <ulSetInterruptMask>
    ulCriticalNesting++;
 800e524:	4b05      	ldr	r3, [pc, #20]	@ (800e53c <vPortEnterCritical+0x20>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3301      	adds	r3, #1
 800e52a:	4a04      	ldr	r2, [pc, #16]	@ (800e53c <vPortEnterCritical+0x20>)
 800e52c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e52e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e532:	f3bf 8f6f 	isb	sy
}
 800e536:	bf00      	nop
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	20000010 	.word	0x20000010

0800e540 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e540:	b580      	push	{r7, lr}
 800e542:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800e544:	4b0a      	ldr	r3, [pc, #40]	@ (800e570 <vPortExitCritical+0x30>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d103      	bne.n	800e554 <vPortExitCritical+0x14>
 800e54c:	f000 f924 	bl	800e798 <ulSetInterruptMask>
 800e550:	bf00      	nop
 800e552:	e7fd      	b.n	800e550 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800e554:	4b06      	ldr	r3, [pc, #24]	@ (800e570 <vPortExitCritical+0x30>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3b01      	subs	r3, #1
 800e55a:	4a05      	ldr	r2, [pc, #20]	@ (800e570 <vPortExitCritical+0x30>)
 800e55c:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800e55e:	4b04      	ldr	r3, [pc, #16]	@ (800e570 <vPortExitCritical+0x30>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d102      	bne.n	800e56c <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800e566:	2000      	movs	r0, #0
 800e568:	f000 f923 	bl	800e7b2 <vClearInterruptMask>
    }
}
 800e56c:	bf00      	nop
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20000010 	.word	0x20000010

0800e574 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e57a:	f000 f90d 	bl	800e798 <ulSetInterruptMask>
 800e57e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e580:	f7ff f87e 	bl	800d680 <xTaskIncrementTick>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d003      	beq.n	800e592 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e58a:	4b05      	ldr	r3, [pc, #20]	@ (800e5a0 <xPortSysTickHandler+0x2c>)
 800e58c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e590:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 f90d 	bl	800e7b2 <vClearInterruptMask>
}
 800e598:	bf00      	nop
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	e000ed04 	.word	0xe000ed04

0800e5a4 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3b02      	subs	r3, #2
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800e5ba:	7afb      	ldrb	r3, [r7, #11]
 800e5bc:	2b02      	cmp	r3, #2
 800e5be:	d102      	bne.n	800e5c6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800e5c0:	f000 f8b6 	bl	800e730 <vRestoreContextOfFirstTask>
            break;
 800e5c4:	e003      	b.n	800e5ce <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800e5c6:	f000 f8e7 	bl	800e798 <ulSetInterruptMask>
 800e5ca:	bf00      	nop
 800e5cc:	e7fd      	b.n	800e5ca <vPortSVCHandler_C+0x26>
    }
}
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
 800e5e4:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3b04      	subs	r3, #4
 800e5ea:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e5f2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3b04      	subs	r3, #4
 800e5f8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3b04      	subs	r3, #4
 800e604:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800e606:	4a38      	ldr	r2, [pc, #224]	@ (800e6e8 <pxPortInitialiseStack+0x110>)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	3b04      	subs	r3, #4
 800e610:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800e618:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	3b04      	subs	r3, #4
 800e61e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800e626:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	3b04      	subs	r3, #4
 800e62c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800e634:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3b04      	subs	r3, #4
 800e63a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800e642:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	3b04      	subs	r3, #4
 800e648:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	3b04      	subs	r3, #4
 800e654:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800e65c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3b04      	subs	r3, #4
 800e662:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800e66a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	3b04      	subs	r3, #4
 800e670:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800e678:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	3b04      	subs	r3, #4
 800e67e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800e686:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	3b04      	subs	r3, #4
 800e68c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800e694:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3b04      	subs	r3, #4
 800e69a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800e6a2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3b04      	subs	r3, #4
 800e6a8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800e6b0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3b04      	subs	r3, #4
 800e6b6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800e6be:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	3b04      	subs	r3, #4
 800e6c4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800e6cc:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3b04      	subs	r3, #4
 800e6d2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800e6da:	68fb      	ldr	r3, [r7, #12]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3714      	adds	r7, #20
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	0800e4c1 	.word	0x0800e4c1

0800e6ec <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e724 <xPortStartScheduler+0x38>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a0b      	ldr	r2, [pc, #44]	@ (800e724 <xPortStartScheduler+0x38>)
 800e6f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e6fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800e6fc:	4b09      	ldr	r3, [pc, #36]	@ (800e724 <xPortStartScheduler+0x38>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a08      	ldr	r2, [pc, #32]	@ (800e724 <xPortStartScheduler+0x38>)
 800e702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e706:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800e708:	f7ff feb6 	bl	800e478 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800e70c:	4b06      	ldr	r3, [pc, #24]	@ (800e728 <xPortStartScheduler+0x3c>)
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800e712:	f000 f82d 	bl	800e770 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800e716:	f7ff f8c3 	bl	800d8a0 <vTaskSwitchContext>
    prvTaskExitError();
 800e71a:	f7ff fed1 	bl	800e4c0 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	bd80      	pop	{r7, pc}
 800e724:	e000ed20 	.word	0xe000ed20
 800e728:	20000010 	.word	0x20000010
 800e72c:	00000000 	.word	0x00000000

0800e730 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e730:	4a0b      	ldr	r2, [pc, #44]	@ (800e760 <pxCurrentTCBConst2>)
 800e732:	6811      	ldr	r1, [r2, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	c806      	ldmia	r0!, {r1, r2}
 800e738:	f381 880b 	msr	PSPLIM, r1
 800e73c:	2102      	movs	r1, #2
 800e73e:	f381 8814 	msr	CONTROL, r1
 800e742:	3020      	adds	r0, #32
 800e744:	f380 8809 	msr	PSP, r0
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f04f 0000 	mov.w	r0, #0
 800e750:	f380 8811 	msr	BASEPRI, r0
 800e754:	4710      	bx	r2
 800e756:	bf00      	nop
 800e758:	f3af 8000 	nop.w
 800e75c:	f3af 8000 	nop.w

0800e760 <pxCurrentTCBConst2>:
 800e760:	200012b8 	.word	0x200012b8
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800e764:	bf00      	nop
 800e766:	bf00      	nop
	...

0800e770 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e770:	4807      	ldr	r0, [pc, #28]	@ (800e790 <xVTORConst>)
 800e772:	6800      	ldr	r0, [r0, #0]
 800e774:	6800      	ldr	r0, [r0, #0]
 800e776:	f380 8808 	msr	MSP, r0
 800e77a:	b662      	cpsie	i
 800e77c:	b661      	cpsie	f
 800e77e:	f3bf 8f4f 	dsb	sy
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	df02      	svc	2
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
 800e78c:	f3af 8000 	nop.w

0800e790 <xVTORConst>:
 800e790:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800e794:	bf00      	nop
 800e796:	bf00      	nop

0800e798 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e798:	f3ef 8011 	mrs	r0, BASEPRI
 800e79c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800e7a0:	f381 8811 	msr	BASEPRI, r1
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800e7ae:	bf00      	nop
 800e7b0:	4618      	mov	r0, r3

0800e7b2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e7b2:	f380 8811 	msr	BASEPRI, r0
 800e7b6:	f3bf 8f4f 	dsb	sy
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800e7c0:	bf00      	nop
	...

0800e7d0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e7d0:	f3ef 8009 	mrs	r0, PSP
 800e7d4:	f3ef 820b 	mrs	r2, PSPLIM
 800e7d8:	4673      	mov	r3, lr
 800e7da:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e7de:	4a10      	ldr	r2, [pc, #64]	@ (800e820 <pxCurrentTCBConst>)
 800e7e0:	6811      	ldr	r1, [r2, #0]
 800e7e2:	6008      	str	r0, [r1, #0]
 800e7e4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e7e8:	f380 8811 	msr	BASEPRI, r0
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	f7ff f854 	bl	800d8a0 <vTaskSwitchContext>
 800e7f8:	f04f 0000 	mov.w	r0, #0
 800e7fc:	f380 8811 	msr	BASEPRI, r0
 800e800:	4a07      	ldr	r2, [pc, #28]	@ (800e820 <pxCurrentTCBConst>)
 800e802:	6811      	ldr	r1, [r2, #0]
 800e804:	6808      	ldr	r0, [r1, #0]
 800e806:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e80a:	f382 880b 	msr	PSPLIM, r2
 800e80e:	f380 8809 	msr	PSP, r0
 800e812:	4718      	bx	r3
 800e814:	f3af 8000 	nop.w
 800e818:	f3af 8000 	nop.w
 800e81c:	f3af 8000 	nop.w

0800e820 <pxCurrentTCBConst>:
 800e820:	200012b8 	.word	0x200012b8
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop
	...

0800e830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e830:	f01e 0f04 	tst.w	lr, #4
 800e834:	bf0c      	ite	eq
 800e836:	f3ef 8008 	mrseq	r0, MSP
 800e83a:	f3ef 8009 	mrsne	r0, PSP
 800e83e:	4904      	ldr	r1, [pc, #16]	@ (800e850 <svchandler_address_const>)
 800e840:	4708      	bx	r1
 800e842:	bf00      	nop
 800e844:	f3af 8000 	nop.w
 800e848:	f3af 8000 	nop.w
 800e84c:	f3af 8000 	nop.w

0800e850 <svchandler_address_const>:
 800e850:	0800e5a5 	.word	0x0800e5a5
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800e854:	bf00      	nop
 800e856:	bf00      	nop

0800e858 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800e860:	2300      	movs	r3, #0
 800e862:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f003 0307 	and.w	r3, r3, #7
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00e      	beq.n	800e88c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f023 0307 	bic.w	r3, r3, #7
 800e874:	3308      	adds	r3, #8
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d205      	bcs.n	800e888 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f023 0307 	bic.w	r3, r3, #7
 800e882:	3308      	adds	r3, #8
 800e884:	607b      	str	r3, [r7, #4]
 800e886:	e001      	b.n	800e88c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800e888:	2300      	movs	r3, #0
 800e88a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800e88c:	f7fe fdec 	bl	800d468 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800e890:	4b17      	ldr	r3, [pc, #92]	@ (800e8f0 <pvPortMalloc+0x98>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d105      	bne.n	800e8a4 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800e898:	4b16      	ldr	r3, [pc, #88]	@ (800e8f4 <pvPortMalloc+0x9c>)
 800e89a:	f023 0307 	bic.w	r3, r3, #7
 800e89e:	461a      	mov	r2, r3
 800e8a0:	4b13      	ldr	r3, [pc, #76]	@ (800e8f0 <pvPortMalloc+0x98>)
 800e8a2:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d01b      	beq.n	800e8e2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800e8aa:	4b13      	ldr	r3, [pc, #76]	@ (800e8f8 <pvPortMalloc+0xa0>)
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800e8b2:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d813      	bhi.n	800e8e2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800e8ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e8f8 <pvPortMalloc+0xa0>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	441a      	add	r2, r3
 800e8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f8 <pvPortMalloc+0xa0>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d90b      	bls.n	800e8e2 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800e8ca:	4b09      	ldr	r3, [pc, #36]	@ (800e8f0 <pvPortMalloc+0x98>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e8f8 <pvPortMalloc+0xa0>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800e8d6:	4b08      	ldr	r3, [pc, #32]	@ (800e8f8 <pvPortMalloc+0xa0>)
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4413      	add	r3, r2
 800e8de:	4a06      	ldr	r2, [pc, #24]	@ (800e8f8 <pvPortMalloc+0xa0>)
 800e8e0:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800e8e2:	f7fe fdcf 	bl	800d484 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	200038e8 	.word	0x200038e8
 800e8f4:	200018eb 	.word	0x200018eb
 800e8f8:	200038e4 	.word	0x200038e4

0800e8fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <vPortFree+0x16>
 800e90a:	f7ff ff45 	bl	800e798 <ulSetInterruptMask>
 800e90e:	bf00      	nop
 800e910:	e7fd      	b.n	800e90e <vPortFree+0x12>
}
 800e912:	bf00      	nop
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <memset>:
 800e91a:	4402      	add	r2, r0
 800e91c:	4603      	mov	r3, r0
 800e91e:	4293      	cmp	r3, r2
 800e920:	d100      	bne.n	800e924 <memset+0xa>
 800e922:	4770      	bx	lr
 800e924:	f803 1b01 	strb.w	r1, [r3], #1
 800e928:	e7f9      	b.n	800e91e <memset+0x4>
	...

0800e92c <__libc_init_array>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	4d0d      	ldr	r5, [pc, #52]	@ (800e964 <__libc_init_array+0x38>)
 800e930:	2600      	movs	r6, #0
 800e932:	4c0d      	ldr	r4, [pc, #52]	@ (800e968 <__libc_init_array+0x3c>)
 800e934:	1b64      	subs	r4, r4, r5
 800e936:	10a4      	asrs	r4, r4, #2
 800e938:	42a6      	cmp	r6, r4
 800e93a:	d109      	bne.n	800e950 <__libc_init_array+0x24>
 800e93c:	4d0b      	ldr	r5, [pc, #44]	@ (800e96c <__libc_init_array+0x40>)
 800e93e:	2600      	movs	r6, #0
 800e940:	4c0b      	ldr	r4, [pc, #44]	@ (800e970 <__libc_init_array+0x44>)
 800e942:	f000 f825 	bl	800e990 <_init>
 800e946:	1b64      	subs	r4, r4, r5
 800e948:	10a4      	asrs	r4, r4, #2
 800e94a:	42a6      	cmp	r6, r4
 800e94c:	d105      	bne.n	800e95a <__libc_init_array+0x2e>
 800e94e:	bd70      	pop	{r4, r5, r6, pc}
 800e950:	f855 3b04 	ldr.w	r3, [r5], #4
 800e954:	3601      	adds	r6, #1
 800e956:	4798      	blx	r3
 800e958:	e7ee      	b.n	800e938 <__libc_init_array+0xc>
 800e95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e95e:	3601      	adds	r6, #1
 800e960:	4798      	blx	r3
 800e962:	e7f2      	b.n	800e94a <__libc_init_array+0x1e>
 800e964:	0800eafc 	.word	0x0800eafc
 800e968:	0800eafc 	.word	0x0800eafc
 800e96c:	0800eafc 	.word	0x0800eafc
 800e970:	0800eb00 	.word	0x0800eb00

0800e974 <memcpy>:
 800e974:	440a      	add	r2, r1
 800e976:	1e43      	subs	r3, r0, #1
 800e978:	4291      	cmp	r1, r2
 800e97a:	d100      	bne.n	800e97e <memcpy+0xa>
 800e97c:	4770      	bx	lr
 800e97e:	b510      	push	{r4, lr}
 800e980:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e984:	4291      	cmp	r1, r2
 800e986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e98a:	d1f9      	bne.n	800e980 <memcpy+0xc>
 800e98c:	bd10      	pop	{r4, pc}
	...

0800e990 <_init>:
 800e990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e992:	bf00      	nop
 800e994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e996:	bc08      	pop	{r3}
 800e998:	469e      	mov	lr, r3
 800e99a:	4770      	bx	lr

0800e99c <_fini>:
 800e99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99e:	bf00      	nop
 800e9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9a2:	bc08      	pop	{r3}
 800e9a4:	469e      	mov	lr, r3
 800e9a6:	4770      	bx	lr
